<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <package name="libsoup-2.4"/>
  <c:include name="libsoup/soup.h"/>
  <namespace name="Soup"
             version="2.4"
             shared-library="libsoup-2.4.so.1"
             c:identifier-prefixes="Soup"
             c:symbol-prefixes="soup">
    <function-macro name="ADDRESS"
                    c:identifier="SOUP_ADDRESS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-address.h" line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ADDRESS_ANY_PORT" value="0" c:type="SOUP_ADDRESS_ANY_PORT">
      <doc xml:space="preserve"
           filename="../libsoup/soup-address.c"
           line="411">This can be passed to any #SoupAddress method that expects a port,
to indicate that you don't care what port is used.</doc>
      <source-position filename="../libsoup/soup-address.h" line="51"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="ADDRESS_CLASS"
                    c:identifier="SOUP_ADDRESS_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-address.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ADDRESS_FAMILY"
              value="family"
              c:type="SOUP_ADDRESS_FAMILY">
      <doc xml:space="preserve"
           filename="../libsoup/soup-address.c"
           line="273">Alias for the #SoupAddress:family property. (The
#SoupAddressFamily for this address.)</doc>
      <source-position filename="../libsoup/soup-address.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="ADDRESS_GET_CLASS"
                    c:identifier="SOUP_ADDRESS_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-address.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ADDRESS_NAME" value="name" c:type="SOUP_ADDRESS_NAME">
      <doc xml:space="preserve"
           filename="../libsoup/soup-address.c"
           line="259">Alias for the #SoupAddress:name property. (The hostname for
this address.)</doc>
      <source-position filename="../libsoup/soup-address.h" line="37"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ADDRESS_PHYSICAL"
              value="physical"
              c:type="SOUP_ADDRESS_PHYSICAL">
      <doc xml:space="preserve"
           filename="../libsoup/soup-address.c"
           line="316">An alias for the #SoupAddress:physical property. (The
stringified IP address for this address.)</doc>
      <source-position filename="../libsoup/soup-address.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ADDRESS_PORT" value="port" c:type="SOUP_ADDRESS_PORT">
      <doc xml:space="preserve"
           filename="../libsoup/soup-address.c"
           line="288">An alias for the #SoupAddress:port property. (The port for
this address.)</doc>
      <source-position filename="../libsoup/soup-address.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ADDRESS_PROTOCOL"
              value="protocol"
              c:type="SOUP_ADDRESS_PROTOCOL">
      <doc xml:space="preserve"
           filename="../libsoup/soup-address.c"
           line="302">Alias for the #SoupAddress:protocol property. (The URI scheme
used with this address.)</doc>
      <source-position filename="../libsoup/soup-address.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ADDRESS_SOCKADDR"
              value="sockaddr"
              c:type="SOUP_ADDRESS_SOCKADDR">
      <doc xml:space="preserve"
           filename="../libsoup/soup-address.c"
           line="330">An alias for the #SoupAddress:sockaddr property. (A pointer
to the struct sockaddr for this address.)</doc>
      <source-position filename="../libsoup/soup-address.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="AUTH" c:identifier="SOUP_AUTH" introspectable="0">
      <source-position filename="../libsoup/soup-auth.h" line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTH_CLASS"
                    c:identifier="SOUP_AUTH_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth.h" line="16"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTH_DOMAIN"
                    c:identifier="SOUP_AUTH_DOMAIN"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="AUTH_DOMAIN_ADD_PATH"
              value="add-path"
              c:type="SOUP_AUTH_DOMAIN_ADD_PATH">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain.c"
           line="215">Alias for the #SoupAuthDomain:add-path property. (Shortcut
for calling soup_auth_domain_add_path().)</doc>
      <source-position filename="../libsoup/soup-auth-domain.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="AUTH_DOMAIN_BASIC"
                    c:identifier="SOUP_AUTH_DOMAIN_BASIC"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain-basic.h"
                       line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="AUTH_DOMAIN_BASIC_AUTH_CALLBACK"
              value="auth-callback"
              c:type="SOUP_AUTH_DOMAIN_BASIC_AUTH_CALLBACK">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain-basic.c"
           line="308">Alias for the #SoupAuthDomainBasic:auth-callback property.
(The #SoupAuthDomainBasicAuthCallback.)</doc>
      <source-position filename="../libsoup/soup-auth-domain-basic.h"
                       line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="AUTH_DOMAIN_BASIC_AUTH_DATA"
              value="auth-data"
              c:type="SOUP_AUTH_DOMAIN_BASIC_AUTH_DATA">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain-basic.c"
           line="326">Alias for the #SoupAuthDomainBasic:auth-data property.
(The data to pass to the #SoupAuthDomainBasicAuthCallback.)</doc>
      <source-position filename="../libsoup/soup-auth-domain-basic.h"
                       line="36"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="AUTH_DOMAIN_BASIC_CLASS"
                    c:identifier="SOUP_AUTH_DOMAIN_BASIC_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain-basic.h"
                       line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTH_DOMAIN_BASIC_GET_CLASS"
                    c:identifier="SOUP_AUTH_DOMAIN_BASIC_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain-basic.h"
                       line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTH_DOMAIN_CLASS"
                    c:identifier="SOUP_AUTH_DOMAIN_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTH_DOMAIN_DIGEST"
                    c:identifier="SOUP_AUTH_DOMAIN_DIGEST"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain-digest.h"
                       line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="AUTH_DOMAIN_DIGEST_AUTH_CALLBACK"
              value="auth-callback"
              c:type="SOUP_AUTH_DOMAIN_DIGEST_AUTH_CALLBACK">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain-digest.c"
           line="414">Alias for the #SoupAuthDomainDigest:auth-callback property.
(The #SoupAuthDomainDigestAuthCallback.)</doc>
      <source-position filename="../libsoup/soup-auth-domain-digest.h"
                       line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="AUTH_DOMAIN_DIGEST_AUTH_DATA"
              value="auth-data"
              c:type="SOUP_AUTH_DOMAIN_DIGEST_AUTH_DATA">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain-digest.c"
           line="432">Alias for the #SoupAuthDomainDigest:auth-callback property.
(The #SoupAuthDomainDigestAuthCallback.)</doc>
      <source-position filename="../libsoup/soup-auth-domain-digest.h"
                       line="36"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="AUTH_DOMAIN_DIGEST_CLASS"
                    c:identifier="SOUP_AUTH_DOMAIN_DIGEST_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain-digest.h"
                       line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTH_DOMAIN_DIGEST_GET_CLASS"
                    c:identifier="SOUP_AUTH_DOMAIN_DIGEST_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain-digest.h"
                       line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="AUTH_DOMAIN_FILTER"
              value="filter"
              c:type="SOUP_AUTH_DOMAIN_FILTER">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain.c"
           line="243">Alias for the #SoupAuthDomain:filter property. (The
#SoupAuthDomainFilter for the domain.)</doc>
      <source-position filename="../libsoup/soup-auth-domain.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="AUTH_DOMAIN_FILTER_DATA"
              value="filter-data"
              c:type="SOUP_AUTH_DOMAIN_FILTER_DATA">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain.c"
           line="261">Alias for the #SoupAuthDomain:filter-data property. (Data
to pass to the #SoupAuthDomainFilter.)</doc>
      <source-position filename="../libsoup/soup-auth-domain.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="AUTH_DOMAIN_GENERIC_AUTH_CALLBACK"
              value="generic-auth-callback"
              c:type="SOUP_AUTH_DOMAIN_GENERIC_AUTH_CALLBACK">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain.c"
           line="279">Alias for the #SoupAuthDomain:generic-auth-callback property.
(The #SoupAuthDomainGenericAuthCallback.)</doc>
      <source-position filename="../libsoup/soup-auth-domain.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="AUTH_DOMAIN_GENERIC_AUTH_DATA"
              value="generic-auth-data"
              c:type="SOUP_AUTH_DOMAIN_GENERIC_AUTH_DATA">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain.c"
           line="292">Alias for the #SoupAuthDomain:generic-auth-data property.
(The data to pass to the #SoupAuthDomainGenericAuthCallback.)</doc>
      <source-position filename="../libsoup/soup-auth-domain.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="AUTH_DOMAIN_GET_CLASS"
                    c:identifier="SOUP_AUTH_DOMAIN_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="AUTH_DOMAIN_PROXY"
              value="proxy"
              c:type="SOUP_AUTH_DOMAIN_PROXY">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain.c"
           line="201">Alias for the #SoupAuthDomain:proxy property. (Whether or
not this is a proxy auth domain.)</doc>
      <source-position filename="../libsoup/soup-auth-domain.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="AUTH_DOMAIN_REALM"
              value="realm"
              c:type="SOUP_AUTH_DOMAIN_REALM">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain.c"
           line="187">Alias for the #SoupAuthDomain:realm property. (The realm of
this auth domain.)</doc>
      <source-position filename="../libsoup/soup-auth-domain.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="AUTH_DOMAIN_REMOVE_PATH"
              value="remove-path"
              c:type="SOUP_AUTH_DOMAIN_REMOVE_PATH">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain.c"
           line="229">Alias for the #SoupAuthDomain:remove-path property.
(Shortcut for calling soup_auth_domain_remove_path().)</doc>
      <source-position filename="../libsoup/soup-auth-domain.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="AUTH_GET_CLASS"
                    c:identifier="SOUP_AUTH_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="AUTH_HOST" value="host" c:type="SOUP_AUTH_HOST">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth.c"
           line="173">An alias for the #SoupAuth:host property. (The
host being authenticated to.)</doc>
      <source-position filename="../libsoup/soup-auth.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="AUTH_IS_AUTHENTICATED"
              value="is-authenticated"
              c:type="SOUP_AUTH_IS_AUTHENTICATED">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth.c"
           line="201">An alias for the #SoupAuth:is-authenticated property.
(Whether or not the auth has been authenticated.)</doc>
      <source-position filename="../libsoup/soup-auth.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="AUTH_IS_FOR_PROXY"
              value="is-for-proxy"
              c:type="SOUP_AUTH_IS_FOR_PROXY">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth.c"
           line="187">An alias for the #SoupAuth:is-for-proxy property. (Whether
or not the auth is for a proxy server.)</doc>
      <source-position filename="../libsoup/soup-auth.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="AUTH_MANAGER"
                    c:identifier="SOUP_AUTH_MANAGER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-manager.h" line="15"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTH_MANAGER_CLASS"
                    c:identifier="SOUP_AUTH_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-manager.h" line="16"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTH_MANAGER_GET_CLASS"
                    c:identifier="SOUP_AUTH_MANAGER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-manager.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="AUTH_REALM" value="realm" c:type="SOUP_AUTH_REALM">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth.c"
           line="159">An alias for the #SoupAuth:realm property. (The
authentication realm.)</doc>
      <source-position filename="../libsoup/soup-auth.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="AUTH_SCHEME_NAME"
              value="scheme-name"
              c:type="SOUP_AUTH_SCHEME_NAME">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth.c"
           line="145">An alias for the #SoupAuth:scheme-name property. (The
authentication scheme name.)</doc>
      <source-position filename="../libsoup/soup-auth.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Address"
           c:symbol-prefix="address"
           c:type="SoupAddress"
           parent="GObject.Object"
           glib:type-name="SoupAddress"
           glib:get-type="soup_address_get_type"
           glib:type-struct="AddressClass">
      <source-position filename="../libsoup/soup-address.h" line="35"/>
      <implements name="Gio.SocketConnectable"/>
      <constructor name="new" c:identifier="soup_address_new">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="345">Creates a #SoupAddress from @name and @port. The #SoupAddress's IP
address may not be available right away; the caller can call
soup_address_resolve_async() or soup_address_resolve_sync() to
force a DNS resolution.</doc>
        <source-position filename="../libsoup/soup-address.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="355">a #SoupAddress</doc>
          <type name="Address" c:type="SoupAddress*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="347">a hostname or physical address</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="348">a port number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_any" c:identifier="soup_address_new_any">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="418">Returns a #SoupAddress corresponding to the "any" address
for @family (or %NULL if @family isn't supported), suitable for
using as a listening #SoupSocket.</doc>
        <source-position filename="../libsoup/soup-address.h" line="69"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="427">the new #SoupAddress</doc>
          <type name="Address" c:type="SoupAddress*"/>
        </return-value>
        <parameters>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="420">the address family</doc>
            <type name="AddressFamily" c:type="SoupAddressFamily"/>
          </parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="421">the port number (usually %SOUP_ADDRESS_ANY_PORT)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_sockaddr"
                   c:identifier="soup_address_new_from_sockaddr">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="369">Returns a #SoupAddress equivalent to @sa (or %NULL if @sa's
address family isn't supported)</doc>
        <source-position filename="../libsoup/soup-address.h" line="66"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="377">the new #SoupAddress</doc>
          <type name="Address" c:type="SoupAddress*"/>
        </return-value>
        <parameters>
          <parameter name="sa"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="371">a pointer to a sockaddr</doc>
            <type name="gpointer" c:type="sockaddr*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="372">size of @sa</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="equal_by_ip"
              c:identifier="soup_address_equal_by_ip"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="1069">Tests if @addr1 and @addr2 have the same IP address. This method
can be used with soup_address_hash_by_ip() to create a
#GHashTable that hashes on IP address.

This would be used to distinguish hosts in situations where
different virtual hosts on the same IP address should be considered
the same. Eg, if "www.example.com" and "www.example.net" have the
same IP address, then a single connection can be used to talk
to either of them.

See also soup_address_equal_by_name(), which compares by name
rather than by IP address.</doc>
        <source-position filename="../libsoup/soup-address.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="1089">whether or not @addr1 and @addr2 have the same IP
address.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="1071">a #SoupAddress with a resolved IP
  address</doc>
            <type name="Address" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="addr2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="1073">another #SoupAddress with a resolved
  IP address</doc>
            <type name="Address" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal_by_name"
              c:identifier="soup_address_equal_by_name"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="1002">Tests if @addr1 and @addr2 have the same "name". This method can be
used with soup_address_hash_by_name() to create a #GHashTable that
hashes on address "names".

Comparing by name normally means comparing the addresses by their
hostnames. But if the address was originally created using an IP
address literal, then it will be compared by that instead.

In particular, if "www.example.com" has the IP address 10.0.0.1,
and @addr1 was created with the name "www.example.com" and @addr2
was created with the name "10.0.0.1", then they will compare as
unequal for purposes of soup_address_equal_by_name().

This would be used to distinguish hosts in situations where
different virtual hosts on the same IP address should be considered
different. Eg, for purposes of HTTP authentication or cookies, two
hosts with the same IP address but different names are considered
to be different hosts.

See also soup_address_equal_by_ip(), which compares by IP address
rather than by name.</doc>
        <source-position filename="../libsoup/soup-address.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="1030">whether or not @addr1 and @addr2 have the same name</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="1004">a #SoupAddress with a resolved name</doc>
            <type name="Address" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="addr2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="1005">another #SoupAddress with a resolved
  name</doc>
            <type name="Address" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gsockaddr"
              c:identifier="soup_address_get_gsockaddr"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="493">Creates a new #GSocketAddress corresponding to @addr (which is assumed
to only have one socket address associated with it).</doc>
        <source-position filename="../libsoup/soup-address.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="500">a new #GSocketAddress</doc>
          <type name="Gio.SocketAddress" c:type="GSocketAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="495">a #SoupAddress</doc>
            <type name="Address" c:type="SoupAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="soup_address_get_name">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="441">Returns the hostname associated with @addr.

This method is not thread-safe; if you call it while @addr is being
resolved in another thread, it may return garbage. You can use
soup_address_is_resolved() to safely test whether or not an address
is resolved before fetching its name or address.</doc>
        <source-position filename="../libsoup/soup-address.h" line="83"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="452">the hostname, or %NULL if it is not known.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="443">a #SoupAddress</doc>
            <type name="Address" c:type="SoupAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_physical" c:identifier="soup_address_get_physical">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="528">Returns the physical address associated with @addr as a string.
(Eg, "127.0.0.1"). If the address is not yet known, returns %NULL.

This method is not thread-safe; if you call it while @addr is being
resolved in another thread, it may return garbage. You can use
soup_address_is_resolved() to safely test whether or not an address
is resolved before fetching its name or address.</doc>
        <source-position filename="../libsoup/soup-address.h" line="85"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="540">the physical address, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="530">a #SoupAddress</doc>
            <type name="Address" c:type="SoupAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="soup_address_get_port">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="564">Returns the port associated with @addr.</doc>
        <source-position filename="../libsoup/soup-address.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="570">the port</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="566">a #SoupAddress</doc>
            <type name="Address" c:type="SoupAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sockaddr" c:identifier="soup_address_get_sockaddr">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="465">Returns the sockaddr associated with @addr, with its length in
*@len. If the sockaddr is not yet known, returns %NULL.

This method is not thread-safe; if you call it while @addr is being
resolved in another thread, it may return garbage. You can use
soup_address_is_resolved() to safely test whether or not an address
is resolved before fetching its name or address.</doc>
        <source-position filename="../libsoup/soup-address.h" line="89"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="478">the sockaddr, or %NULL</doc>
          <type name="gpointer" c:type="sockaddr*"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="467">a #SoupAddress</doc>
            <type name="Address" c:type="SoupAddress*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="468">return location for sockaddr length</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hash_by_ip"
              c:identifier="soup_address_hash_by_ip"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="1045">A hash function (for #GHashTable) that corresponds to
soup_address_equal_by_ip(), qv</doc>
        <source-position filename="../libsoup/soup-address.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="1052">the IP-based hash value for @addr.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="1047">a #SoupAddress</doc>
            <type name="Address" c:type="gconstpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hash_by_name"
              c:identifier="soup_address_hash_by_name"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="982">A hash function (for #GHashTable) that corresponds to
soup_address_equal_by_name(), qv</doc>
        <source-position filename="../libsoup/soup-address.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="989">the named-based hash value for @addr.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="984">a #SoupAddress</doc>
            <type name="Address" c:type="gconstpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_resolved" c:identifier="soup_address_is_resolved">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="956">Tests if @addr has already been resolved. Unlike the other
#SoupAddress "get" methods, this is safe to call when @addr might
be being resolved in another thread.</doc>
        <source-position filename="../libsoup/soup-address.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="964">%TRUE if @addr has been resolved.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="958">a #SoupAddress</doc>
            <type name="Address" c:type="SoupAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resolve_async" c:identifier="soup_address_resolve_async">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="789">Asynchronously resolves the missing half of @addr (its IP address
if it was created with soup_address_new(), or its hostname if it
was created with soup_address_new_from_sockaddr() or
soup_address_new_any().)

If @cancellable is non-%NULL, it can be used to cancel the
resolution. @callback will still be invoked in this case, with a
status of %SOUP_STATUS_CANCELLED.

It is safe to call this more than once on a given address, from the
same thread, with the same @async_context (and doing so will not
result in redundant DNS queries being made). But it is not safe to
call from multiple threads, or with different @async_contexts, or
mixed with calls to soup_address_resolve_sync().</doc>
        <source-position filename="../libsoup/soup-address.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="791">a #SoupAddress</doc>
            <type name="Address" c:type="SoupAddress*"/>
          </instance-parameter>
          <parameter name="async_context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="792">the #GMainContext to call @callback from</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="793">a #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="794">callback to call with the result</doc>
            <type name="AddressCallback" c:type="SoupAddressCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="795">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_sync" c:identifier="soup_address_resolve_sync">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="924">Synchronously resolves the missing half of @addr, as with
soup_address_resolve_async().

If @cancellable is non-%NULL, it can be used to cancel the
resolution. soup_address_resolve_sync() will then return a status
of %SOUP_STATUS_CANCELLED.

It is safe to call this more than once, even from different
threads, but it is not safe to mix calls to
soup_address_resolve_sync() with calls to
soup_address_resolve_async() on the same address.</doc>
        <source-position filename="../libsoup/soup-address.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="941">%SOUP_STATUS_OK, %SOUP_STATUS_CANT_RESOLVE, or
%SOUP_STATUS_CANCELLED.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="926">a #SoupAddress</doc>
            <type name="Address" c:type="SoupAddress*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-address.c"
                 line="927">a #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="family"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="AddressFamily"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="physical" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="port"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="protocol"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sockaddr"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <callback name="AddressCallback" c:type="SoupAddressCallback">
      <doc xml:space="preserve"
           filename="../libsoup/soup-address.c"
           line="778">The callback function passed to soup_address_resolve_async().</doc>
      <source-position filename="../libsoup/soup-address.h" line="55"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="addr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="780">the #SoupAddress that was resolved</doc>
          <type name="Address" c:type="SoupAddress*"/>
        </parameter>
        <parameter name="status" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="781">%SOUP_STATUS_OK, %SOUP_STATUS_CANT_RESOLVE, or
%SOUP_STATUS_CANCELLED</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="../libsoup/soup-address.c"
               line="783">the user data that was passed to
soup_address_resolve_async()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="AddressClass"
            c:type="SoupAddressClass"
            glib:is-gtype-struct-for="Address">
      <source-position filename="../libsoup/soup-address.h" line="35"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-address.h" line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-address.h" line="32"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-address.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-address.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="AddressFamily"
                 glib:type-name="SoupAddressFamily"
                 glib:get-type="soup_address_family_get_type"
                 c:type="SoupAddressFamily">
      <doc xml:space="preserve"
           filename="../libsoup/soup-address.c"
           line="402">The supported address families.</doc>
      <member name="invalid"
              value="-1"
              c:identifier="SOUP_ADDRESS_FAMILY_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="404">an invalid %SoupAddress</doc>
      </member>
      <member name="ipv4"
              value="2"
              c:identifier="SOUP_ADDRESS_FAMILY_IPV4"
              glib:nick="ipv4">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="405">an IPv4 address</doc>
      </member>
      <member name="ipv6"
              value="10"
              c:identifier="SOUP_ADDRESS_FAMILY_IPV6"
              glib:nick="ipv6">
        <doc xml:space="preserve"
             filename="../libsoup/soup-address.c"
             line="406">an IPv6 address</doc>
      </member>
    </enumeration>
    <class name="Auth"
           c:symbol-prefix="auth"
           c:type="SoupAuth"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="SoupAuth"
           glib:get-type="soup_auth_get_type"
           glib:type-struct="AuthClass">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth.c"
           line="28">The abstract base class for handling authentication. Specific HTTP
Authentication mechanisms are implemented by its subclasses, but
applications never need to be aware of the specific subclasses
being used.</doc>
      <source-position filename="../libsoup/soup-auth.h" line="56"/>
      <constructor name="new" c:identifier="soup_auth_new">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="217">Creates a new #SoupAuth of type @type with the information from
@msg and @auth_header.

This is called by #SoupSession; you will normally not create auths
yourself.</doc>
        <source-position filename="../libsoup/soup-auth.h" line="68"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="229">the new #SoupAuth, or %NULL if it could
not be created</doc>
          <type name="Auth" c:type="SoupAuth*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="219">the type of auth to create (a subtype of #SoupAuth)</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="220">the #SoupMessage the auth is being created for</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="auth_header" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="221">the WWW-Authenticate/Proxy-Authenticate header</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="authenticate" invoker="authenticate">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="317">Call this on an auth to authenticate it; normally this will cause
the auth's message to be requeued with the new authentication info.</doc>
        <source-position filename="../libsoup/soup-auth.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="319">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="320">the username provided by the user or client</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="321">the password provided by the user or client</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="can_authenticate"
                      invoker="can_authenticate"
                      version="2.54">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="501">Tests if @auth is able to authenticate by providing credentials to the
soup_auth_authenticate().</doc>
        <source-position filename="../libsoup/soup-auth.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="508">%TRUE if @auth is able to accept credentials.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="503">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_authorization" invoker="get_authorization">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="454">Generates an appropriate "Authorization" header for @msg. (The
session will only call this if soup_auth_is_authenticated()
returned %TRUE.)</doc>
        <source-position filename="../libsoup/soup-auth.h" line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="463">the "Authorization" header, which must be freed.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="456">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="457">the #SoupMessage to be authorized</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_protection_space"
                      invoker="get_protection_space">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="520">Returns a list of paths on the server which @auth extends over.
(All subdirectories of these paths are also assumed to be part
of @auth's protection space, unless otherwise discovered not to
be.)</doc>
        <source-position filename="../libsoup/soup-auth.h" line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="531">the list of
paths, which can be freed with soup_auth_free_protection_space().</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="522">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="source_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="523">the URI of the request that @auth was generated in
response to.</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_authenticated" invoker="is_authenticated">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="438">Tests if @auth has been given a username and password</doc>
        <source-position filename="../libsoup/soup-auth.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="444">%TRUE if @auth has been given a username and password</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="440">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_ready" invoker="is_ready" version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="474">Tests if @auth is ready to make a request for @msg with. For most
auths, this is equivalent to soup_auth_is_authenticated(), but for
some auth types (eg, NTLM), the auth may be sendable (eg, as an
authentication request) even before it is authenticated.</doc>
        <source-position filename="../libsoup/soup-auth.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="484">%TRUE if @auth is ready to make a request with.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="476">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="477">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update" invoker="update">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="270">Updates @auth with the information from @msg and @auth_header,
possibly un-authenticating it. As with soup_auth_new(), this is
normally only used by #SoupSession.</doc>
        <source-position filename="../libsoup/soup-auth.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="280">%TRUE if @auth is still a valid (but potentially
unauthenticated) #SoupAuth. %FALSE if something about @auth_params
could not be parsed or incorporated into @auth at all.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="272">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="273">the #SoupMessage @auth is being updated for</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="auth_header" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="274">the WWW-Authenticate/Proxy-Authenticate header</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="authenticate" c:identifier="soup_auth_authenticate">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="317">Call this on an auth to authenticate it; normally this will cause
the auth's message to be requeued with the new authentication info.</doc>
        <source-position filename="../libsoup/soup-auth.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="319">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="320">the username provided by the user or client</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="321">the password provided by the user or client</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_authenticate"
              c:identifier="soup_auth_can_authenticate"
              version="2.54">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="501">Tests if @auth is able to authenticate by providing credentials to the
soup_auth_authenticate().</doc>
        <source-position filename="../libsoup/soup-auth.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="508">%TRUE if @auth is able to accept credentials.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="503">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free_protection_space"
              c:identifier="soup_auth_free_protection_space"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="543">Frees @space.</doc>
        <source-position filename="../libsoup/soup-auth.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="545">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="space" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="546">the return value from soup_auth_get_protection_space()</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_authorization"
              c:identifier="soup_auth_get_authorization">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="454">Generates an appropriate "Authorization" header for @msg. (The
session will only call this if soup_auth_is_authenticated()
returned %TRUE.)</doc>
        <source-position filename="../libsoup/soup-auth.h" line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="463">the "Authorization" header, which must be freed.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="456">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="457">the #SoupMessage to be authorized</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_host" c:identifier="soup_auth_get_host">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="376">Returns the host that @auth is associated with.</doc>
        <source-position filename="../libsoup/soup-auth.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="382">the hostname</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="378">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info" c:identifier="soup_auth_get_info">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="413">Gets an opaque identifier for @auth, for use as a hash key or the
like. #SoupAuth objects from the same server with the same
identifier refer to the same authentication domain (eg, the URLs
associated with them take the same usernames and passwords).</doc>
        <source-position filename="../libsoup/soup-auth.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="422">the identifier</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="415">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protection_space"
              c:identifier="soup_auth_get_protection_space">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="520">Returns a list of paths on the server which @auth extends over.
(All subdirectories of these paths are also assumed to be part
of @auth's protection space, unless otherwise discovered not to
be.)</doc>
        <source-position filename="../libsoup/soup-auth.h" line="104"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="531">the list of
paths, which can be freed with soup_auth_free_protection_space().</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="522">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="source_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="523">the URI of the request that @auth was generated in
response to.</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_realm" c:identifier="soup_auth_get_realm">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="394">Returns @auth's realm. This is an identifier that distinguishes
separate authentication spaces on a given server, and may be some
string that is meaningful to the user. (Although it is probably not
localized.)</doc>
        <source-position filename="../libsoup/soup-auth.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="403">the realm name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="396">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_saved_password"
              c:identifier="soup_auth_get_saved_password">
        <source-position filename="../libsoup/soup-auth.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_saved_users" c:identifier="soup_auth_get_saved_users">
        <source-position filename="../libsoup/soup-auth.h" line="128"/>
        <return-value transfer-ownership="full">
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scheme_name" c:identifier="soup_auth_get_scheme_name">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="360">Returns @auth's scheme name. (Eg, "Basic", "Digest", or "NTLM")</doc>
        <source-position filename="../libsoup/soup-auth.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="366">the scheme name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="362">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_saved_password"
              c:identifier="soup_auth_has_saved_password">
        <source-position filename="../libsoup/soup-auth.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_authenticated"
              c:identifier="soup_auth_is_authenticated">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="438">Tests if @auth has been given a username and password</doc>
        <source-position filename="../libsoup/soup-auth.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="444">%TRUE if @auth has been given a username and password</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="440">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_for_proxy" c:identifier="soup_auth_is_for_proxy">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="341">Tests whether or not @auth is associated with a proxy server rather
than an "origin" server.</doc>
        <source-position filename="../libsoup/soup-auth.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="348">%TRUE or %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="343">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_ready" c:identifier="soup_auth_is_ready" version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="474">Tests if @auth is ready to make a request for @msg with. For most
auths, this is equivalent to soup_auth_is_authenticated(), but for
some auth types (eg, NTLM), the auth may be sendable (eg, as an
authentication request) even before it is authenticated.</doc>
        <source-position filename="../libsoup/soup-auth.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="484">%TRUE if @auth is ready to make a request with.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="476">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="477">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_password" c:identifier="soup_auth_save_password">
        <source-position filename="../libsoup/soup-auth.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="soup_auth_update">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth.c"
             line="270">Updates @auth with the information from @msg and @auth_header,
possibly un-authenticating it. As with soup_auth_new(), this is
normally only used by #SoupSession.</doc>
        <source-position filename="../libsoup/soup-auth.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth.c"
               line="280">%TRUE if @auth is still a valid (but potentially
unauthenticated) #SoupAuth. %FALSE if something about @auth_params
could not be parsed or incorporated into @auth at all.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="272">a #SoupAuth</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="273">the #SoupMessage @auth is being updated for</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="auth_header" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="274">the WWW-Authenticate/Proxy-Authenticate header</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="host" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="is-authenticated" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-for-proxy" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="realm" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="scheme-name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="realm">
        <type name="utf8" c:type="char*"/>
      </field>
    </class>
    <class name="AuthBasic"
           c:symbol-prefix="auth_basic"
           parent="Auth"
           glib:type-name="SoupAuthBasic"
           glib:get-type="soup_auth_basic_get_type">
    </class>
    <record name="AuthClass"
            c:type="SoupAuthClass"
            glib:is-gtype-struct-for="Auth">
      <source-position filename="../libsoup/soup-auth.h" line="56"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="scheme_name">
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="strength">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="update">
        <callback name="update">
          <source-position filename="../libsoup/soup-auth.h" line="33"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="280">%TRUE if @auth is still a valid (but potentially
unauthenticated) #SoupAuth. %FALSE if something about @auth_params
could not be parsed or incorporated into @auth at all.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="auth" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="272">a #SoupAuth</doc>
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="273">the #SoupMessage @auth is being updated for</doc>
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="auth_header" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="274">the WWW-Authenticate/Proxy-Authenticate header</doc>
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_protection_space">
        <callback name="get_protection_space">
          <source-position filename="../libsoup/soup-auth.h" line="37"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="531">the list of
paths, which can be freed with soup_auth_free_protection_space().</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="utf8"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="auth" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="522">a #SoupAuth</doc>
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
            <parameter name="source_uri" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="523">the URI of the request that @auth was generated in
response to.</doc>
              <type name="URI" c:type="SoupURI*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="authenticate">
        <callback name="authenticate">
          <source-position filename="../libsoup/soup-auth.h" line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="auth" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="319">a #SoupAuth</doc>
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
            <parameter name="username" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="320">the username provided by the user or client</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="password" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="321">the password provided by the user or client</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_authenticated">
        <callback name="is_authenticated">
          <source-position filename="../libsoup/soup-auth.h" line="43"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="444">%TRUE if @auth has been given a username and password</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="auth" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="440">a #SoupAuth</doc>
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_authorization">
        <callback name="get_authorization">
          <source-position filename="../libsoup/soup-auth.h" line="45"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="463">the "Authorization" header, which must be freed.</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="auth" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="456">a #SoupAuth</doc>
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="457">the #SoupMessage to be authorized</doc>
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_ready">
        <callback name="is_ready">
          <source-position filename="../libsoup/soup-auth.h" line="48"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="484">%TRUE if @auth is ready to make a request with.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="auth" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="476">a #SoupAuth</doc>
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="477">a #SoupMessage</doc>
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="can_authenticate">
        <callback name="can_authenticate">
          <source-position filename="../libsoup/soup-auth.h" line="51"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth.c"
                 line="508">%TRUE if @auth is able to accept credentials.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="auth" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth.c"
                   line="503">a #SoupAuth</doc>
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-auth.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-auth.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="AuthDigest"
           c:symbol-prefix="auth_digest"
           parent="Auth"
           glib:type-name="SoupAuthDigest"
           glib:get-type="soup_auth_digest_get_type">
    </class>
    <class name="AuthDomain"
           c:symbol-prefix="auth_domain"
           c:type="SoupAuthDomain"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="SoupAuthDomain"
           glib:get-type="soup_auth_domain_get_type"
           glib:type-struct="AuthDomainClass">
      <source-position filename="../libsoup/soup-auth-domain.h" line="42"/>
      <virtual-method name="accepts">
        <source-position filename="../libsoup/soup-auth-domain.h" line="28"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="header" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="challenge" invoker="challenge">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="607">Adds a "WWW-Authenticate" or "Proxy-Authenticate" header to @msg,
requesting that the client authenticate, and sets @msg's status
accordingly.

This is used by #SoupServer internally and is probably of no use to
anyone else.</doc>
        <source-position filename="../libsoup/soup-auth-domain.h" line="31"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="609">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="610">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="check_password" invoker="check_password">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="519">Checks if @msg authenticates to @domain via @username and
@password. This would normally be called from a
#SoupAuthDomainGenericAuthCallback.</doc>
        <source-position filename="../libsoup/soup-auth-domain.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="530">whether or not the message is authenticated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="521">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="522">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="523">a username</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="524">a password</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="accepts" c:identifier="soup_auth_domain_accepts">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="576">Checks if @msg contains appropriate authorization for @domain to
accept it. Mirroring soup_auth_domain_covers(), this does not check
whether or not @domain &lt;emphasis&gt;cares&lt;/emphasis&gt; if @msg is
authorized.

This is used by #SoupServer internally and is probably of no use to
anyone else.</doc>
        <source-position filename="../libsoup/soup-auth-domain.h" line="96"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="589">the username that @msg has authenticated
as, if in fact it has authenticated. %NULL otherwise.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="578">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="579">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_path" c:identifier="soup_auth_domain_add_path">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="307">Adds @path to @domain, such that requests under @path on @domain's
server will require authentication (unless overridden by
soup_auth_domain_remove_path() or soup_auth_domain_set_filter()).

You can also add paths by setting the %SOUP_AUTH_DOMAIN_ADD_PATH
property, which can also be used to add one or more paths at
construct time.</doc>
        <source-position filename="../libsoup/soup-auth-domain.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="309">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="310">the path to add to @domain</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="challenge" c:identifier="soup_auth_domain_challenge">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="607">Adds a "WWW-Authenticate" or "Proxy-Authenticate" header to @msg,
requesting that the client authenticate, and sets @msg's status
accordingly.

This is used by #SoupServer internally and is probably of no use to
anyone else.</doc>
        <source-position filename="../libsoup/soup-auth-domain.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="609">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="610">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_password"
              c:identifier="soup_auth_domain_check_password">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="519">Checks if @msg authenticates to @domain via @username and
@password. This would normally be called from a
#SoupAuthDomainGenericAuthCallback.</doc>
        <source-position filename="../libsoup/soup-auth-domain.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="530">whether or not the message is authenticated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="521">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="522">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="523">a username</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="524">a password</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="covers" c:identifier="soup_auth_domain_covers">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="543">Checks if @domain requires @msg to be authenticated (according to
its paths and filter function). This does not actually look at
whether @msg &lt;emphasis&gt;is&lt;/emphasis&gt; authenticated, merely whether
or not it needs to be.

This is used by #SoupServer internally and is probably of no use to
anyone else.</doc>
        <source-position filename="../libsoup/soup-auth-domain.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="556">%TRUE if @domain requires @msg to be authenticated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="545">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="546">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_realm" c:identifier="soup_auth_domain_get_realm">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="428">Gets the realm name associated with @domain</doc>
        <source-position filename="../libsoup/soup-auth-domain.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="434">@domain's realm</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="430">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_path" c:identifier="soup_auth_domain_remove_path">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="332">Removes @path from @domain, such that requests under @path on
@domain's server will NOT require authentication.

This is not simply an undo-er for soup_auth_domain_add_path(); it
can be used to "carve out" a subtree that does not require
authentication inside a hierarchy that does. Note also that unlike
with soup_auth_domain_add_path(), this cannot be overridden by
adding a filter, as filters can only bypass authentication that
would otherwise be required, not require it where it would
otherwise be unnecessary.

You can also remove paths by setting the
%SOUP_AUTH_DOMAIN_REMOVE_PATH property, which can also be used to
remove one or more paths at construct time.</doc>
        <source-position filename="../libsoup/soup-auth-domain.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="334">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="335">the path to remove from @domain</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filter" c:identifier="soup_auth_domain_set_filter">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="376">Adds @filter as an authentication filter to @domain. The filter
gets a chance to bypass authentication for certain requests that
would otherwise require it. Eg, it might check the message's path
in some way that is too complicated to do via the other methods, or
it might check the message's method, and allow GETs but not PUTs.

The filter function returns %TRUE if the request should still
require authentication, or %FALSE if authentication is unnecessary
for this request.

To help prevent security holes, your filter should return %TRUE by
default, and only return %FALSE under specifically-tested
circumstances, rather than the other way around. Eg, in the example
above, where you want to authenticate PUTs but not GETs, you should
check if the method is GET and return %FALSE in that case, and then
return %TRUE for all other methods (rather than returning %TRUE for
PUT and %FALSE for all other methods). This way if it turned out
(now or later) that some paths supported additional methods besides
GET and PUT, those methods would default to being NOT allowed for
unauthenticated users.

You can also set the filter by setting the %SOUP_AUTH_DOMAIN_FILTER
and %SOUP_AUTH_DOMAIN_FILTER_DATA properties, which can also be
used to set the filter at construct time.</doc>
        <source-position filename="../libsoup/soup-auth-domain.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="378">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="filter"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="379">the auth filter for @domain</doc>
            <type name="AuthDomainFilter" c:type="SoupAuthDomainFilter"/>
          </parameter>
          <parameter name="filter_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="380">data to pass to @filter</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="dnotify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="381">destroy notifier to free @filter_data when @domain
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_generic_auth_callback"
              c:identifier="soup_auth_domain_set_generic_auth_callback">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="472">Sets @auth_callback as an authentication-handling callback for
@domain. Whenever a request comes in to @domain which cannot be
authenticated via a domain-specific auth callback (eg,
#SoupAuthDomainDigestAuthCallback), the generic auth callback
will be invoked. See #SoupAuthDomainGenericAuthCallback for information
on what the callback should do.</doc>
        <source-position filename="../libsoup/soup-auth-domain.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="474">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="auth_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="475">the auth callback</doc>
            <type name="AuthDomainGenericAuthCallback"
                  c:type="SoupAuthDomainGenericAuthCallback"/>
          </parameter>
          <parameter name="auth_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="476">data to pass to @auth_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="dnotify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="477">destroy notifier to free @auth_data when @domain
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_generic_auth_callback"
              c:identifier="soup_auth_domain_try_generic_auth_callback">
        <source-position filename="../libsoup/soup-auth-domain.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="add-path"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="filter" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="249">The #SoupAuthDomainFilter for the domain</doc>
        <type name="AuthDomainFilter" c:type="gpointer"/>
      </property>
      <property name="filter-data" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="generic-auth-callback"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="267">The #SoupAuthDomainGenericAuthCallback for the domain</doc>
        <type name="AuthDomainGenericAuthCallback" c:type="gpointer"/>
      </property>
      <property name="generic-auth-data"
                writable="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="proxy"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="realm"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="remove-path"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <class name="AuthDomainBasic"
           c:symbol-prefix="auth_domain_basic"
           c:type="SoupAuthDomainBasic"
           parent="AuthDomain"
           glib:type-name="SoupAuthDomainBasic"
           glib:get-type="soup_auth_domain_basic_get_type"
           glib:type-struct="AuthDomainBasicClass">
      <source-position filename="../libsoup/soup-auth-domain-basic.h"
                       line="33"/>
      <constructor name="new"
                   c:identifier="soup_auth_domain_basic_new"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain-basic.c"
             line="103">Creates a #SoupAuthDomainBasic. You must set the
%SOUP_AUTH_DOMAIN_REALM parameter, to indicate the realm name to be
returned with the authentication challenge to the client. Other
parameters are optional.</doc>
        <source-position filename="../libsoup/soup-auth-domain-basic.h"
                         line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-basic.c"
               line="113">the new #SoupAuthDomain</doc>
          <type name="AuthDomain" c:type="SoupAuthDomain*"/>
        </return-value>
        <parameters>
          <parameter name="optname1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-basic.c"
                 line="105">name of first option, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-basic.c"
                 line="106">option name/value pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_auth_callback"
              c:identifier="soup_auth_domain_basic_set_auth_callback">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain-basic.c"
             line="157">Sets the callback that @domain will use to authenticate incoming
requests. For each request containing authorization, @domain will
invoke the callback, and then either accept or reject the request
based on @callback's return value.

You can also set the auth callback by setting the
%SOUP_AUTH_DOMAIN_BASIC_AUTH_CALLBACK and
%SOUP_AUTH_DOMAIN_BASIC_AUTH_DATA properties, which can also be
used to set the callback at construct time.</doc>
        <source-position filename="../libsoup/soup-auth-domain-basic.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-basic.c"
                 line="159">the domain</doc>
            <type name="AuthDomainBasic" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-basic.c"
                 line="160">the callback</doc>
            <type name="AuthDomainBasicAuthCallback"
                  c:type="SoupAuthDomainBasicAuthCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-basic.c"
                 line="161">data to pass to @auth_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="dnotify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-basic.c"
                 line="162">destroy notifier to free @user_data when @domain
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="auth-callback" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain-basic.c"
             line="314">The #SoupAuthDomainBasicAuthCallback</doc>
        <type name="AuthDomainBasicAuthCallback" c:type="gpointer"/>
      </property>
      <property name="auth-data" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain-basic.c"
             line="332">The data to pass to the #SoupAuthDomainBasicAuthCallback</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent">
        <type name="AuthDomain" c:type="SoupAuthDomain"/>
      </field>
    </class>
    <callback name="AuthDomainBasicAuthCallback"
              c:type="SoupAuthDomainBasicAuthCallback">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain-basic.c"
           line="131">Callback used by #SoupAuthDomainBasic for authentication purposes.
The application should verify that @username and @password and valid
and return %TRUE or %FALSE.

If you are maintaining your own password database (rather than
using the password to authenticate against some other system like
PAM or a remote server), you should make sure you know what you are
doing. In particular, don't store cleartext passwords, or
easily-computed hashes of cleartext passwords, even if you don't
care that much about the security of your server, because users
will frequently use the same password for multiple sites, and so
compromising any site with a cleartext (or easily-cracked) password
database may give attackers access to other more-interesting sites
as well.</doc>
      <source-position filename="../libsoup/soup-auth-domain-basic.h"
                       line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain-basic.c"
             line="154">%TRUE if @username and @password are valid</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-basic.c"
               line="133">the domain</doc>
          <type name="AuthDomainBasic" c:type="SoupAuthDomain*"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-basic.c"
               line="134">the message being authenticated</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="username" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-basic.c"
               line="135">the username provided by the client</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-basic.c"
               line="136">the password provided by the client</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-basic.c"
               line="137">the data passed to soup_auth_domain_basic_set_auth_callback()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="AuthDomainBasicClass"
            c:type="SoupAuthDomainBasicClass"
            glib:is-gtype-struct-for="AuthDomainBasic">
      <source-position filename="../libsoup/soup-auth-domain-basic.h"
                       line="33"/>
      <field name="parent_class">
        <type name="AuthDomainClass" c:type="SoupAuthDomainClass"/>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-auth-domain-basic.h"
                           line="29"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-auth-domain-basic.h"
                           line="30"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-auth-domain-basic.h"
                           line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-auth-domain-basic.h"
                           line="32"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="AuthDomainClass"
            c:type="SoupAuthDomainClass"
            glib:is-gtype-struct-for="AuthDomain">
      <source-position filename="../libsoup/soup-auth-domain.h" line="42"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="accepts">
        <callback name="accepts">
          <source-position filename="../libsoup/soup-auth-domain.h" line="28"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="domain" transfer-ownership="none">
              <type name="AuthDomain" c:type="SoupAuthDomain*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="header" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="challenge">
        <callback name="challenge">
          <source-position filename="../libsoup/soup-auth-domain.h" line="31"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="domain" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth-domain.c"
                   line="609">a #SoupAuthDomain</doc>
              <type name="AuthDomain" c:type="SoupAuthDomain*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth-domain.c"
                   line="610">a #SoupMessage</doc>
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="check_password">
        <callback name="check_password">
          <source-position filename="../libsoup/soup-auth-domain.h" line="33"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain.c"
                 line="530">whether or not the message is authenticated</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="domain" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth-domain.c"
                   line="521">a #SoupAuthDomain</doc>
              <type name="AuthDomain" c:type="SoupAuthDomain*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth-domain.c"
                   line="522">a #SoupMessage</doc>
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="username" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth-domain.c"
                   line="523">a username</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="password" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-auth-domain.c"
                   line="524">a password</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-auth-domain.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-auth-domain.h" line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-auth-domain.h" line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="AuthDomainDigest"
           c:symbol-prefix="auth_domain_digest"
           c:type="SoupAuthDomainDigest"
           parent="AuthDomain"
           glib:type-name="SoupAuthDomainDigest"
           glib:get-type="soup_auth_domain_digest_get_type"
           glib:type-struct="AuthDomainDigestClass">
      <source-position filename="../libsoup/soup-auth-domain-digest.h"
                       line="33"/>
      <constructor name="new"
                   c:identifier="soup_auth_domain_digest_new"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain-digest.c"
             line="106">Creates a #SoupAuthDomainDigest. You must set the
%SOUP_AUTH_DOMAIN_REALM parameter, to indicate the realm name to be
returned with the authentication challenge to the client. Other
parameters are optional.</doc>
        <source-position filename="../libsoup/soup-auth-domain-digest.h"
                         line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-digest.c"
               line="116">the new #SoupAuthDomain</doc>
          <type name="AuthDomain" c:type="SoupAuthDomain*"/>
        </return-value>
        <parameters>
          <parameter name="optname1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-digest.c"
                 line="108">name of first option, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-digest.c"
                 line="109">option name/value pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <function name="encode_password"
                c:identifier="soup_auth_domain_digest_encode_password">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain-digest.c"
             line="331">Encodes the username/realm/password triplet for Digest
authentication. (That is, it returns a stringified MD5 hash of
@username, @realm, and @password concatenated together). This is
the form that is needed as the return value of
#SoupAuthDomainDigest's auth handler.

For security reasons, you should store the encoded hash, rather
than storing the cleartext password itself and calling this method
only when you need to verify it. This way, if your server is
compromised, the attackers will not gain access to cleartext
passwords which might also be usable at other sites. (Note also
that the encoded password returned by this method is identical to
the encoded password stored in an Apache .htdigest file.)</doc>
        <source-position filename="../libsoup/soup-auth-domain-digest.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-digest.c"
               line="351">the encoded password</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-digest.c"
                 line="333">a username</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="realm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-digest.c"
                 line="334">an auth realm name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-digest.c"
                 line="335">the password for @username in @realm</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="set_auth_callback"
              c:identifier="soup_auth_domain_digest_set_auth_callback">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain-digest.c"
             line="151">Sets the callback that @domain will use to authenticate incoming
requests. For each request containing authorization, @domain will
invoke the callback, and then either accept or reject the request
based on @callback's return value.

You can also set the auth callback by setting the
%SOUP_AUTH_DOMAIN_DIGEST_AUTH_CALLBACK and
%SOUP_AUTH_DOMAIN_DIGEST_AUTH_DATA properties, which can also be
used to set the callback at construct time.</doc>
        <source-position filename="../libsoup/soup-auth-domain-digest.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-digest.c"
                 line="153">the domain</doc>
            <type name="AuthDomainDigest" c:type="SoupAuthDomain*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-digest.c"
                 line="154">the callback</doc>
            <type name="AuthDomainDigestAuthCallback"
                  c:type="SoupAuthDomainDigestAuthCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-digest.c"
                 line="155">data to pass to @auth_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="dnotify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-domain-digest.c"
                 line="156">destroy notifier to free @user_data when @domain
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="auth-callback" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain-digest.c"
             line="420">The #SoupAuthDomainDigestAuthCallback</doc>
        <type name="AuthDomainDigestAuthCallback" c:type="gpointer"/>
      </property>
      <property name="auth-data" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain-digest.c"
             line="438">The data to pass to the #SoupAuthDomainDigestAuthCallback</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent">
        <type name="AuthDomain" c:type="SoupAuthDomain"/>
      </field>
    </class>
    <callback name="AuthDomainDigestAuthCallback"
              c:type="SoupAuthDomainDigestAuthCallback">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain-digest.c"
           line="134">Callback used by #SoupAuthDomainDigest for authentication purposes.
The application should look up @username in its password database,
and return the corresponding encoded password (see
soup_auth_domain_digest_encode_password()).</doc>
      <source-position filename="../libsoup/soup-auth-domain-digest.h"
                       line="45"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain-digest.c"
             line="146">the encoded password, or %NULL if
@username is not a valid user. @domain will free the password when
it is done with it.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-digest.c"
               line="136">the domain</doc>
          <type name="AuthDomainDigest" c:type="SoupAuthDomain*"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-digest.c"
               line="137">the message being authenticated</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="username" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-digest.c"
               line="138">the username provided by the client</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain-digest.c"
               line="139">the data passed to soup_auth_domain_digest_set_auth_callback()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="AuthDomainDigestClass"
            c:type="SoupAuthDomainDigestClass"
            glib:is-gtype-struct-for="AuthDomainDigest">
      <source-position filename="../libsoup/soup-auth-domain-digest.h"
                       line="33"/>
      <field name="parent_class">
        <type name="AuthDomainClass" c:type="SoupAuthDomainClass"/>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-auth-domain-digest.h"
                           line="29"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-auth-domain-digest.h"
                           line="30"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-auth-domain-digest.h"
                           line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-auth-domain-digest.h"
                           line="32"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="AuthDomainFilter" c:type="SoupAuthDomainFilter">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain.c"
           line="364">The prototype for a #SoupAuthDomain filter; see
soup_auth_domain_set_filter() for details.</doc>
      <source-position filename="../libsoup/soup-auth-domain.h" line="53"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="373">%TRUE if @msg requires authentication, %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="366">a #SoupAuthDomain</doc>
          <type name="AuthDomain" c:type="SoupAuthDomain*"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="367">a #SoupMessage</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="368">the data passed to soup_auth_domain_set_filter()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="AuthDomainGenericAuthCallback"
              c:type="SoupAuthDomainGenericAuthCallback">
      <doc xml:space="preserve"
           filename="../libsoup/soup-auth-domain.c"
           line="444">The prototype for a #SoupAuthDomain generic authentication callback.

The callback should look up the user's password, call
soup_auth_domain_check_password(), and use the return value from
that method as its own return value.

In general, for security reasons, it is preferable to use the
auth-domain-specific auth callbacks (eg,
#SoupAuthDomainBasicAuthCallback and
#SoupAuthDomainDigestAuthCallback), because they don't require
keeping a cleartext password database. Most users will use the same
password for many different sites, meaning if any site with a
cleartext password database is compromised, accounts on other
servers might be compromised as well. For many of the cases where
#SoupServer is used, this is not really relevant, but it may still
be worth considering.</doc>
      <source-position filename="../libsoup/soup-auth-domain.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-domain.c"
             line="469">%TRUE if @msg is authenticated, %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="446">a #SoupAuthDomain</doc>
          <type name="AuthDomain" c:type="SoupAuthDomain*"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="447">the #SoupMessage being authenticated</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="username" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="448">the username from @msg</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="../libsoup/soup-auth-domain.c"
               line="449">the data passed to
soup_auth_domain_set_generic_auth_callback()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="AuthManager"
           c:symbol-prefix="auth_manager"
           c:type="SoupAuthManager"
           parent="GObject.Object"
           glib:type-name="SoupAuthManager"
           glib:get-type="soup_auth_manager_get_type"
           glib:type-struct="AuthManagerClass">
      <source-position filename="../libsoup/soup-auth-manager.h" line="34"/>
      <implements name="SessionFeature"/>
      <virtual-method name="authenticate">
        <source-position filename="../libsoup/soup-auth-manager.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="AuthManager" c:type="SoupAuthManager*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <type name="Auth" c:type="SoupAuth*"/>
          </parameter>
          <parameter name="retrying" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clear_cached_credentials"
              c:identifier="soup_auth_manager_clear_cached_credentials"
              version="2.58">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-manager.c"
             line="828">Clear all credentials cached by @manager</doc>
        <source-position filename="../libsoup/soup-auth-manager.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-manager.c"
                 line="830">a #SoupAuthManager</doc>
            <type name="AuthManager" c:type="SoupAuthManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="use_auth"
              c:identifier="soup_auth_manager_use_auth"
              version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-manager.c"
             line="798">Records that @auth is to be used under @uri, as though a
WWW-Authenticate header had been received at that URI. This can be
used to "preload" @manager's auth cache, to avoid an extra HTTP
round trip in the case where you know ahead of time that a 401
response will be returned.

This is only useful for authentication types where the initial
Authorization header does not depend on any additional information
from the server. (Eg, Basic or NTLM, but not Digest.)</doc>
        <source-position filename="../libsoup/soup-auth-manager.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-manager.c"
                 line="800">a #SoupAuthManager</doc>
            <type name="AuthManager" c:type="SoupAuthManager*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-manager.c"
                 line="801">the #SoupURI under which @auth is to be used</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-manager.c"
                 line="802">the #SoupAuth to use</doc>
            <type name="Auth" c:type="SoupAuth*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="AuthManagerPrivate" c:type="SoupAuthManagerPrivate*"/>
      </field>
      <glib:signal name="authenticate" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-manager.c"
             line="128">Emitted when the manager requires the application to
provide authentication credentials.

#SoupSession connects to this signal and emits its own
#SoupSession::authenticate signal when it is emitted, so
you shouldn't need to use this signal directly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-manager.c"
                 line="131">the #SoupMessage being sent</doc>
            <type name="Message"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-manager.c"
                 line="132">the #SoupAuth to authenticate</doc>
            <type name="Auth"/>
          </parameter>
          <parameter name="retrying" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-auth-manager.c"
                 line="133">%TRUE if this is the second (or later) attempt</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AuthManagerClass"
            c:type="SoupAuthManagerClass"
            glib:is-gtype-struct-for="AuthManager">
      <source-position filename="../libsoup/soup-auth-manager.h" line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="authenticate">
        <callback name="authenticate">
          <source-position filename="../libsoup/soup-auth-manager.h"
                           line="32"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="AuthManager" c:type="SoupAuthManager*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="auth" transfer-ownership="none">
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
            <parameter name="retrying" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="AuthManagerPrivate"
            c:type="SoupAuthManagerPrivate"
            disguised="1">
      <source-position filename="../libsoup/soup-auth-manager.h" line="21"/>
    </record>
    <class name="AuthNTLM"
           c:symbol-prefix="auth_ntlm"
           parent="Auth"
           glib:type-name="SoupAuthNTLM"
           glib:get-type="soup_auth_ntlm_get_type">
    </class>
    <class name="AuthNegotiate"
           c:symbol-prefix="auth_negotiate"
           parent="Auth"
           glib:type-name="SoupAuthNegotiate"
           glib:get-type="soup_auth_negotiate_get_type">
      <function name="supported"
                c:identifier="soup_auth_negotiate_supported"
                version="2.54">
        <doc xml:space="preserve"
             filename="../libsoup/soup-auth-negotiate.c"
             line="26">Indicates whether libsoup was built with GSSAPI support. If this is
%FALSE, %SOUP_TYPE_AUTH_NEGOTIATE will still be defined and can
still be added to a #SoupSession, but libsoup will never attempt to
actually use this auth type.</doc>
        <source-position filename="../libsoup/soup-auth.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
    </class>
    <record name="Buffer"
            c:type="SoupBuffer"
            glib:type-name="SoupBuffer"
            glib:get-type="soup_buffer_get_type"
            c:symbol-prefix="buffer">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message-body.c"
           line="62">A data buffer, generally used to represent a chunk of a
#SoupMessageBody.

@data is a #char because that's generally convenient; in some
situations you may need to cast it to #guchar or another type.</doc>
      <source-position filename="../libsoup/soup-message-body.h" line="23"/>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="64">the data</doc>
        <type name="gpointer"/>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="65">length of @data</doc>
        <type name="gsize" c:type="gsize"/>
      </field>
      <constructor name="new"
                   c:identifier="soup_buffer_new"
                   shadowed-by="new_take">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="83">Creates a new #SoupBuffer containing @length bytes from @data.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="30"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-body.c"
               line="91">the new #SoupBuffer.</doc>
          <type name="Buffer" c:type="SoupBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="use" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="85">how @data is to be used by the buffer</doc>
            <type name="MemoryUse" c:type="SoupMemoryUse"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="86">data</doc>
            <array length="2" zero-terminated="0" c:type="gconstpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="87">length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_take"
                   c:identifier="soup_buffer_new_take"
                   shadows="new"
                   version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="116">Creates a new #SoupBuffer containing @length bytes from @data.

This function is exactly equivalent to soup_buffer_new() with
%SOUP_MEMORY_TAKE as first argument; it exists mainly for
convenience and simplifying language bindings.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-body.c"
               line="127">the new #SoupBuffer.</doc>
          <type name="Buffer" c:type="SoupBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="118">data</doc>
            <array length="1" zero-terminated="0" c:type="guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="119">length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_owner"
                   c:identifier="soup_buffer_new_with_owner">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="171">Creates a new #SoupBuffer containing @length bytes from @data. When
the #SoupBuffer is freed, it will call @owner_dnotify, passing
@owner to it. You must ensure that @data will remain valid until
@owner_dnotify is called.

For example, you could use this to create a buffer containing data
returned from libxml without needing to do an extra copy:

&lt;informalexample&gt;&lt;programlisting&gt;
xmlDocDumpMemory (doc, &amp;xmlbody, &amp;len);
return soup_buffer_new_with_owner (xmlbody, len, xmlbody,
                                   (GDestroyNotify)xmlFree);
&lt;/programlisting&gt;&lt;/informalexample&gt;

In this example, @data and @owner are the same, but in other cases
they would be different (eg, @owner would be a object, and @data
would be a pointer to one of the object's fields).</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-body.c"
               line="197">the new #SoupBuffer.</doc>
          <type name="Buffer" c:type="SoupBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="173">data</doc>
            <array length="1" zero-terminated="0" c:type="gconstpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="174">length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="owner"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="175">pointer to an object that owns @data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="owner_dnotify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="176">a function to free/unref @owner when
the buffer is freed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="soup_buffer_copy">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="255">Makes a copy of @buffer. In reality, #SoupBuffer is a refcounted
type, and calling soup_buffer_copy() will normally just increment
the refcount on @buffer and return it. However, if @buffer was
created with #SOUP_MEMORY_TEMPORARY memory, then soup_buffer_copy()
will actually return a copy of it, so that the data in the copy
will remain valid after the temporary buffer is freed.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-body.c"
               line="266">the new (or newly-reffed) buffer</doc>
          <type name="Buffer" c:type="SoupBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="257">a #SoupBuffer</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="soup_buffer_free">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="295">Frees @buffer. (In reality, as described in the documentation for
soup_buffer_copy(), this is actually an "unref" operation, and may
or may not actually free @buffer.)</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="297">a #SoupBuffer</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_as_bytes"
              c:identifier="soup_buffer_get_as_bytes"
              version="2.40">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="316">Creates a #GBytes pointing to the same memory as @buffer. The
#GBytes will hold a reference on @buffer to ensure that it is not
freed while the #GBytes is still valid.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-body.c"
               line="324">a new #GBytes which has the same content
as the #SoupBuffer.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="318">a #SoupBuffer</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data"
              c:identifier="soup_buffer_get_data"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="233">This function exists for use by language bindings, because it's not
currently possible to get the right effect by annotating the fields
of #SoupBuffer.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="235">a #SoupBuffer</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="236">the pointer
to the buffer data is stored here</doc>
            <array length="1" zero-terminated="0" c:type="const guint8**">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="238">the length of the buffer data is stored here</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_owner" c:identifier="soup_buffer_get_owner">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="215">Gets the "owner" object for a buffer created with
soup_buffer_new_with_owner().</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-body.c"
               line="222">the owner pointer</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="217">a #SoupBuffer created with soup_buffer_new_with_owner()</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_subbuffer" c:identifier="soup_buffer_new_subbuffer">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="137">Creates a new #SoupBuffer containing @length bytes "copied" from
@parent starting at @offset. (Normally this will not actually copy
any data, but will instead simply reference the same data as
@parent does.)</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-body.c"
               line="148">the new #SoupBuffer.</doc>
          <type name="Buffer" c:type="SoupBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="139">the parent #SoupBuffer</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="140">offset within @parent to start at</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="141">number of bytes to copy from @parent</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <glib:boxed glib:name="ByteArray"
                c:symbol-prefix="byte_array"
                glib:type-name="SoupByteArray"
                glib:get-type="soup_byte_array_get_type">
    </glib:boxed>
    <function-macro name="CACHE" c:identifier="SOUP_CACHE" introspectable="0">
      <source-position filename="../libsoup/soup-cache.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CACHE_CLASS"
                    c:identifier="SOUP_CACHE_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cache.h" line="33"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CACHE_GET_CLASS"
                    c:identifier="SOUP_CACHE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cache.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CHAR_HTTP_CTL" value="16" c:type="SOUP_CHAR_HTTP_CTL">
      <source-position filename="../libsoup/soup-misc.h" line="52"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CHAR_HTTP_SEPARATOR"
              value="8"
              c:type="SOUP_CHAR_HTTP_SEPARATOR">
      <source-position filename="../libsoup/soup-misc.h" line="51"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CHAR_URI_GEN_DELIMS"
              value="2"
              c:type="SOUP_CHAR_URI_GEN_DELIMS">
      <source-position filename="../libsoup/soup-misc.h" line="49"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CHAR_URI_PERCENT_ENCODED"
              value="1"
              c:type="SOUP_CHAR_URI_PERCENT_ENCODED">
      <source-position filename="../libsoup/soup-misc.h" line="48"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CHAR_URI_SUB_DELIMS"
              value="4"
              c:type="SOUP_CHAR_URI_SUB_DELIMS">
      <source-position filename="../libsoup/soup-misc.h" line="50"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="CHECK_VERSION"
                    c:identifier="SOUP_CHECK_VERSION"
                    version="2.42"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-version.c"
           line="49">Macro to test the version of libsoup being compiled against.</doc>
      <source-position filename="../libsoup/soup-version.h" line="19"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="../libsoup/soup-version.c"
               line="51">major version (e.g. 2 for version 2.42.0)</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="../libsoup/soup-version.c"
               line="52">minor version (e.g. 42 for version 2.42.0)</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="../libsoup/soup-version.c"
               line="53">micro version (e.g. 0 for version 2.42.0)</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTENT_DECODER"
                    c:identifier="SOUP_CONTENT_DECODER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-content-decoder.h" line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTENT_DECODER_CLASS"
                    c:identifier="SOUP_CONTENT_DECODER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-content-decoder.h" line="16"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTENT_DECODER_GET_CLASS"
                    c:identifier="SOUP_CONTENT_DECODER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-content-decoder.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTENT_SNIFFER"
                    c:identifier="SOUP_CONTENT_SNIFFER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-content-sniffer.h" line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTENT_SNIFFER_CLASS"
                    c:identifier="SOUP_CONTENT_SNIFFER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-content-sniffer.h" line="16"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTENT_SNIFFER_GET_CLASS"
                    c:identifier="SOUP_CONTENT_SNIFFER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-content-sniffer.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="COOKIE_JAR"
                    c:identifier="SOUP_COOKIE_JAR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="COOKIE_JAR_ACCEPT_POLICY"
              value="accept-policy"
              c:type="SOUP_COOKIE_JAR_ACCEPT_POLICY"
              version="2.30">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie-jar.c"
           line="199">Alias for the #SoupCookieJar:accept-policy property.</doc>
      <source-position filename="../libsoup/soup-cookie-jar.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="COOKIE_JAR_CLASS"
                    c:identifier="SOUP_COOKIE_JAR_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="COOKIE_JAR_DB"
                    c:identifier="SOUP_COOKIE_JAR_DB"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar-db.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="COOKIE_JAR_DB_CLASS"
                    c:identifier="SOUP_COOKIE_JAR_DB_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar-db.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="COOKIE_JAR_DB_FILENAME"
              value="filename"
              c:type="SOUP_COOKIE_JAR_DB_FILENAME">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie-jar-db.c"
           line="330">Alias for the #SoupCookieJarDB:filename property. (The
cookie-storage filename.)</doc>
      <source-position filename="../libsoup/soup-cookie-jar-db.h" line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="COOKIE_JAR_DB_GET_CLASS"
                    c:identifier="SOUP_COOKIE_JAR_DB_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar-db.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="COOKIE_JAR_GET_CLASS"
                    c:identifier="SOUP_COOKIE_JAR_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="COOKIE_JAR_READ_ONLY"
              value="read-only"
              c:type="SOUP_COOKIE_JAR_READ_ONLY">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie-jar.c"
           line="184">Alias for the #SoupCookieJar:read-only property. (Whether
or not the cookie jar is read-only.)</doc>
      <source-position filename="../libsoup/soup-cookie-jar.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="COOKIE_JAR_TEXT"
                    c:identifier="SOUP_COOKIE_JAR_TEXT"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar-text.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="COOKIE_JAR_TEXT_CLASS"
                    c:identifier="SOUP_COOKIE_JAR_TEXT_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar-text.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="COOKIE_JAR_TEXT_FILENAME"
              value="filename"
              c:type="SOUP_COOKIE_JAR_TEXT_FILENAME">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie-jar-text.c"
           line="384">Alias for the #SoupCookieJarText:filename property. (The
cookie-storage filename.)</doc>
      <source-position filename="../libsoup/soup-cookie-jar-text.h" line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="COOKIE_JAR_TEXT_GET_CLASS"
                    c:identifier="SOUP_COOKIE_JAR_TEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar-text.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="COOKIE_MAX_AGE_ONE_DAY"
              value="0"
              c:type="SOUP_COOKIE_MAX_AGE_ONE_DAY"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="587">A constant corresponding to 1 day, for use with soup_cookie_new()
and soup_cookie_set_max_age().</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="42"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="COOKIE_MAX_AGE_ONE_HOUR"
              value="3600"
              c:type="SOUP_COOKIE_MAX_AGE_ONE_HOUR"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="579">A constant corresponding to 1 hour, for use with soup_cookie_new()
and soup_cookie_set_max_age().</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="41"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="COOKIE_MAX_AGE_ONE_WEEK"
              value="0"
              c:type="SOUP_COOKIE_MAX_AGE_ONE_WEEK"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="595">A constant corresponding to 1 week, for use with soup_cookie_new()
and soup_cookie_set_max_age().</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="43"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="COOKIE_MAX_AGE_ONE_YEAR"
              value="0"
              c:type="SOUP_COOKIE_MAX_AGE_ONE_YEAR"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="603">A constant corresponding to 1 year, for use with soup_cookie_new()
and soup_cookie_set_max_age().</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="44"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Cache"
           c:symbol-prefix="cache"
           c:type="SoupCache"
           parent="GObject.Object"
           glib:type-name="SoupCache"
           glib:get-type="soup_cache_get_type"
           glib:type-struct="CacheClass">
      <source-position filename="../libsoup/soup-cache.h" line="76"/>
      <implements name="SessionFeature"/>
      <constructor name="new" c:identifier="soup_cache_new" version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cache.c"
             line="1035">Creates a new #SoupCache.</doc>
        <source-position filename="../libsoup/soup-cache.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cache.c"
               line="1045">a new #SoupCache</doc>
          <type name="Cache" c:type="SoupCache*"/>
        </return-value>
        <parameters>
          <parameter name="cache_dir"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cache.c"
                 line="1037">the directory to store the cached data, or %NULL
  to use the default one. Note that since the cache isn't safe to access for
  multiple processes at once, and the default directory isn't namespaced by
  process, clients are strongly discouraged from passing %NULL.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cache_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cache.c"
                 line="1041">the #SoupCacheType of the cache</doc>
            <type name="CacheType" c:type="SoupCacheType"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="get_cacheability">
        <source-position filename="../libsoup/soup-cache.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="Cacheability" c:type="SoupCacheability"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <type name="Cache" c:type="SoupCache*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clear" c:identifier="soup_cache_clear" version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cache.c"
             line="1327">Will remove all entries in the @cache plus all the cache files.</doc>
        <source-position filename="../libsoup/soup-cache.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cache.c"
                 line="1329">a #SoupCache</doc>
            <type name="Cache" c:type="SoupCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="soup_cache_dump" version="2.34.">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cache.c"
             line="1469">Synchronously writes the cache index out to disk. Contrast with
soup_cache_flush(), which writes pending cache
&lt;emphasis&gt;entries&lt;/emphasis&gt; to disk.

You must call this before exiting if you want your cache data to
persist between sessions.</doc>
        <source-position filename="../libsoup/soup-cache.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cache.c"
                 line="1471">a #SoupCache</doc>
            <type name="Cache" c:type="SoupCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="flush" c:identifier="soup_cache_flush" version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cache.c"
             line="1246">This function will force all pending writes in the @cache to be
committed to disk. For doing so it will iterate the #GMainContext
associated with @cache's session as long as needed.

Contrast with soup_cache_dump(), which writes out the cache index
file.</doc>
        <source-position filename="../libsoup/soup-cache.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cache.c"
                 line="1248">a #SoupCache</doc>
            <type name="Cache" c:type="SoupCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_size"
              c:identifier="soup_cache_get_max_size"
              version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cache.c"
             line="1652">Gets the maximum size of the cache.</doc>
        <source-position filename="../libsoup/soup-cache.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cache.c"
               line="1658">the maximum size of the cache, in bytes.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cache.c"
                 line="1654">a #SoupCache</doc>
            <type name="Cache" c:type="SoupCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="soup_cache_load" version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cache.c"
             line="1536">Loads the contents of @cache's index into memory.</doc>
        <source-position filename="../libsoup/soup-cache.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cache.c"
                 line="1538">a #SoupCache</doc>
            <type name="Cache" c:type="SoupCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_max_size"
              c:identifier="soup_cache_set_max_size"
              version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cache.c"
             line="1635">Sets the maximum size of the cache.</doc>
        <source-position filename="../libsoup/soup-cache.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cache.c"
                 line="1637">a #SoupCache</doc>
            <type name="Cache" c:type="SoupCache*"/>
          </instance-parameter>
          <parameter name="max_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cache.c"
                 line="1638">the maximum size of the cache, in bytes</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="cache-dir"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="cache-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="CacheType"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CachePrivate" c:type="SoupCachePrivate*"/>
      </field>
    </class>
    <record name="CacheClass"
            c:type="SoupCacheClass"
            glib:is-gtype-struct-for="Cache">
      <source-position filename="../libsoup/soup-cache.h" line="76"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_cacheability">
        <callback name="get_cacheability">
          <source-position filename="../libsoup/soup-cache.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="Cacheability" c:type="SoupCacheability"/>
          </return-value>
          <parameters>
            <parameter name="cache" transfer-ownership="none">
              <type name="Cache" c:type="SoupCache*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-cache.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-cache.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-cache.h" line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="CachePrivate" c:type="SoupCachePrivate" disguised="1">
      <source-position filename="../libsoup/soup-cache.h" line="39"/>
    </record>
    <enumeration name="CacheResponse"
                 glib:type-name="SoupCacheResponse"
                 glib:get-type="soup_cache_response_get_type"
                 c:type="SoupCacheResponse">
      <member name="fresh"
              value="0"
              c:identifier="SOUP_CACHE_RESPONSE_FRESH"
              glib:nick="fresh">
      </member>
      <member name="needs_validation"
              value="1"
              c:identifier="SOUP_CACHE_RESPONSE_NEEDS_VALIDATION"
              glib:nick="needs-validation">
      </member>
      <member name="stale"
              value="2"
              c:identifier="SOUP_CACHE_RESPONSE_STALE"
              glib:nick="stale">
      </member>
    </enumeration>
    <enumeration name="CacheType"
                 version="2.34"
                 glib:type-name="SoupCacheType"
                 glib:get-type="soup_cache_type_get_type"
                 c:type="SoupCacheType">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cache.c"
           line="1024">The type of cache; this affects what kinds of responses will be
saved.</doc>
      <member name="single_user"
              value="0"
              c:identifier="SOUP_CACHE_SINGLE_USER"
              glib:nick="single-user">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cache.c"
             line="1026">a single-user cache</doc>
      </member>
      <member name="shared"
              value="1"
              c:identifier="SOUP_CACHE_SHARED"
              glib:nick="shared">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cache.c"
             line="1027">a shared cache</doc>
      </member>
    </enumeration>
    <bitfield name="Cacheability"
              glib:type-name="SoupCacheability"
              glib:get-type="soup_cacheability_get_type"
              c:type="SoupCacheability">
      <member name="cacheable"
              value="1"
              c:identifier="SOUP_CACHE_CACHEABLE"
              glib:nick="cacheable">
      </member>
      <member name="uncacheable"
              value="2"
              c:identifier="SOUP_CACHE_UNCACHEABLE"
              glib:nick="uncacheable">
      </member>
      <member name="invalidates"
              value="4"
              c:identifier="SOUP_CACHE_INVALIDATES"
              glib:nick="invalidates">
      </member>
      <member name="validates"
              value="8"
              c:identifier="SOUP_CACHE_VALIDATES"
              glib:nick="validates">
      </member>
    </bitfield>
    <callback name="ChunkAllocator" c:type="SoupChunkAllocator" deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="1786">The prototype for a chunk allocation callback. This should allocate
a new #SoupBuffer and return it for the I/O layer to read message
body data off the network into.

If @max_len is non-0, it indicates the maximum number of bytes that
could be read, based on what is known about the message size. Note
that this might be a very large number, and you should not simply
try to allocate that many bytes blindly. If @max_len is 0, that
means that libsoup does not know how many bytes remain to be read,
and the allocator should return a buffer of a size that it finds
convenient.

If the allocator returns %NULL, the message will be paused. It is
up to the application to make sure that it gets unpaused when it
becomes possible to allocate a new buffer.</doc>
      <doc-deprecated xml:space="preserve">Use #SoupRequest if you want to read into your
own buffers.</doc-deprecated>
      <source-position filename="../libsoup/soup-message.h" line="204"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1808">the new buffer (or %NULL)</doc>
        <type name="Buffer" c:type="SoupBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1788">the #SoupMessage the chunk is being allocated for</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="max_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1789">the maximum length that will be read, or 0.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1790">the data passed to soup_message_set_chunk_allocator()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ClientContext"
            c:type="SoupClientContext"
            glib:type-name="SoupClientContext"
            glib:get-type="soup_client_context_get_type"
            c:symbol-prefix="client_context">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="2263">A #SoupClientContext provides additional information about the
client making a particular request. In particular, you can use
soup_client_context_get_auth_domain() and
soup_client_context_get_auth_user() to determine if HTTP
authentication was used successfully.

soup_client_context_get_remote_address() and/or
soup_client_context_get_host() can be used to get information for
logging or debugging purposes. soup_client_context_get_gsocket() may
also be of use in some situations (eg, tracking when multiple
requests are made on the same connection).</doc>
      <source-position filename="../libsoup/soup-server.h" line="22"/>
      <method name="get_address"
              c:identifier="soup_client_context_get_address"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2334">Retrieves the #SoupAddress associated with the remote end
of a connection.</doc>
        <doc-deprecated xml:space="preserve">Use soup_client_context_get_remote_address(), which returns
a #GSocketAddress.</doc-deprecated>
        <source-position filename="../libsoup/soup-server.h" line="233"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2341">the #SoupAddress
associated with the remote end of a connection, it may be
%NULL if you used soup_server_accept_iostream().</doc>
          <type name="Address" c:type="SoupAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2336">a #SoupClientContext</doc>
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_auth_domain"
              c:identifier="soup_client_context_get_auth_domain">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2451">Checks whether the request associated with @client has been
authenticated, and if so returns the #SoupAuthDomain that
authenticated it.</doc>
        <source-position filename="../libsoup/soup-server.h" line="194"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2459">a #SoupAuthDomain, or
%NULL if the request was not authenticated.</doc>
          <type name="AuthDomain" c:type="SoupAuthDomain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2453">a #SoupClientContext</doc>
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_auth_user"
              c:identifier="soup_client_context_get_auth_user">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2470">Checks whether the request associated with @client has been
authenticated, and if so returns the username that the client
authenticated as.</doc>
        <source-position filename="../libsoup/soup-server.h" line="196"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2478">the authenticated-as user, or %NULL if
the request was not authenticated.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2472">a #SoupClientContext</doc>
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gsocket"
              c:identifier="soup_client_context_get_gsocket"
              version="2.48">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2308">Retrieves the #GSocket that @client is associated with.

If you are using this method to observe when multiple requests are
made on the same persistent HTTP connection (eg, as the ntlm-test
test program does), you will need to pay attention to socket
destruction as well (eg, by using weak references), so that you do
not get fooled when the allocator reuses the memory address of a
previously-destroyed socket to represent a new socket.</doc>
        <source-position filename="../libsoup/soup-server.h" line="186"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2321">the #GSocket that @client is
associated with, %NULL if you used soup_server_accept_iostream().</doc>
          <type name="Gio.Socket" c:type="GSocket*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2310">a #SoupClientContext</doc>
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host" c:identifier="soup_client_context_get_host">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2412">Retrieves the IP address associated with the remote end of a
connection.</doc>
        <source-position filename="../libsoup/soup-server.h" line="192"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2419">the IP address associated with the remote
end of a connection, it may be %NULL if you used
soup_server_accept_iostream().</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2414">a #SoupClientContext</doc>
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local_address"
              c:identifier="soup_client_context_get_local_address"
              version="2.48">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2384">Retrieves the #GSocketAddress associated with the local end
of a connection.</doc>
        <source-position filename="../libsoup/soup-server.h" line="188"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2391">the #GSocketAddress
associated with the local end of a connection, it may be
%NULL if you used soup_server_accept_iostream().</doc>
          <type name="Gio.SocketAddress" c:type="GSocketAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2386">a #SoupClientContext</doc>
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote_address"
              c:identifier="soup_client_context_get_remote_address"
              version="2.48">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2356">Retrieves the #GSocketAddress associated with the remote end
of a connection.</doc>
        <source-position filename="../libsoup/soup-server.h" line="190"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2363">the #GSocketAddress
associated with the remote end of a connection, it may be
%NULL if you used soup_server_accept_iostream().</doc>
          <type name="Gio.SocketAddress" c:type="GSocketAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2358">a #SoupClientContext</doc>
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_socket"
              c:identifier="soup_client_context_get_socket"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2280">Retrieves the #SoupSocket that @client is associated with.

If you are using this method to observe when multiple requests are
made on the same persistent HTTP connection (eg, as the ntlm-test
test program does), you will need to pay attention to socket
destruction as well (either by using weak references, or by
connecting to the #SoupSocket::disconnected signal), so that you do
not get fooled when the allocator reuses the memory address of a
previously-destroyed socket to represent a new socket.</doc>
        <doc-deprecated xml:space="preserve">use soup_client_context_get_gsocket(), which returns
a #GSocket.</doc-deprecated>
        <source-position filename="../libsoup/soup-server.h" line="236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2294">the #SoupSocket that @client is
associated with.</doc>
          <type name="Socket" c:type="SoupSocket*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2282">a #SoupClientContext</doc>
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="steal_connection"
              c:identifier="soup_client_context_steal_connection"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2489">"Steals" the HTTP connection associated with @client from its
#SoupServer. This happens immediately, regardless of the current
state of the connection; if the response to the current
#SoupMessage has not yet finished being sent, then it will be
discarded; you can steal the connection from a
#SoupMessage:wrote-informational or #SoupMessage:wrote-body signal
handler if you need to wait for part or all of the response to be
sent.

Note that when calling this function from C, @client will most
likely be freed as a side effect.</doc>
        <source-position filename="../libsoup/soup-server.h" line="199"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2505">the #GIOStream formerly associated
  with @client (or %NULL if @client was no longer associated with a
  connection). No guarantees are made about what kind of #GIOStream
  is returned.</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2491">a #SoupClientContext</doc>
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="Connection" c:type="SoupConnection" disguised="1">
      <source-position filename="../libsoup/soup-types.h" line="38"/>
    </record>
    <enumeration name="ConnectionState"
                 glib:type-name="SoupConnectionState"
                 glib:get-type="soup_connection_state_get_type"
                 c:type="SoupConnectionState">
      <member name="new"
              value="0"
              c:identifier="SOUP_CONNECTION_NEW"
              glib:nick="new">
      </member>
      <member name="connecting"
              value="1"
              c:identifier="SOUP_CONNECTION_CONNECTING"
              glib:nick="connecting">
      </member>
      <member name="idle"
              value="2"
              c:identifier="SOUP_CONNECTION_IDLE"
              glib:nick="idle">
      </member>
      <member name="in_use"
              value="3"
              c:identifier="SOUP_CONNECTION_IN_USE"
              glib:nick="in-use">
      </member>
      <member name="remote_disconnected"
              value="4"
              c:identifier="SOUP_CONNECTION_REMOTE_DISCONNECTED"
              glib:nick="remote-disconnected">
      </member>
      <member name="disconnected"
              value="5"
              c:identifier="SOUP_CONNECTION_DISCONNECTED"
              glib:nick="disconnected">
      </member>
    </enumeration>
    <class name="ContentDecoder"
           c:symbol-prefix="content_decoder"
           c:type="SoupContentDecoder"
           parent="GObject.Object"
           glib:type-name="SoupContentDecoder"
           glib:get-type="soup_content_decoder_get_type"
           glib:type-struct="ContentDecoderClass">
      <source-position filename="../libsoup/soup-content-decoder.h" line="38"/>
      <implements name="SessionFeature"/>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ContentDecoderPrivate"
              c:type="SoupContentDecoderPrivate*"/>
      </field>
    </class>
    <record name="ContentDecoderClass"
            c:type="SoupContentDecoderClass"
            glib:is-gtype-struct-for="ContentDecoder">
      <source-position filename="../libsoup/soup-content-decoder.h" line="38"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-content-decoder.h"
                           line="33"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-content-decoder.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-content-decoder.h"
                           line="35"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-content-decoder.h"
                           line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved5" introspectable="0">
        <callback name="_libsoup_reserved5">
          <source-position filename="../libsoup/soup-content-decoder.h"
                           line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ContentDecoderPrivate"
            c:type="SoupContentDecoderPrivate"
            disguised="1">
      <source-position filename="../libsoup/soup-content-decoder.h" line="21"/>
    </record>
    <class name="ContentSniffer"
           c:symbol-prefix="content_sniffer"
           c:type="SoupContentSniffer"
           parent="GObject.Object"
           glib:type-name="SoupContentSniffer"
           glib:get-type="soup_content_sniffer_get_type"
           glib:type-struct="ContentSnifferClass">
      <source-position filename="../libsoup/soup-content-sniffer.h" line="44"/>
      <implements name="SessionFeature"/>
      <constructor name="new"
                   c:identifier="soup_content_sniffer_new"
                   version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-content-sniffer.c"
             line="884">Creates a new #SoupContentSniffer.</doc>
        <source-position filename="../libsoup/soup-content-sniffer.h"
                         line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-content-sniffer.c"
               line="889">a new #SoupContentSniffer</doc>
          <type name="ContentSniffer" c:type="SoupContentSniffer*"/>
        </return-value>
      </constructor>
      <virtual-method name="get_buffer_size"
                      invoker="get_buffer_size"
                      version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-content-sniffer.c"
             line="928">Gets the number of bytes @sniffer needs in order to properly sniff
a buffer.</doc>
        <source-position filename="../libsoup/soup-content-sniffer.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-content-sniffer.c"
               line="935">the number of bytes to sniff</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="sniffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="930">a #SoupContentSniffer</doc>
            <type name="ContentSniffer" c:type="SoupContentSniffer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sniff" invoker="sniff" version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-content-sniffer.c"
             line="899">Sniffs @buffer to determine its Content-Type. The result may also
be influenced by the Content-Type declared in @msg's response
headers.</doc>
        <source-position filename="../libsoup/soup-content-sniffer.h"
                         line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-content-sniffer.c"
               line="911">the sniffed Content-Type of @buffer; this will never be %NULL,
  but may be "application/octet-stream".</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sniffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="901">a #SoupContentSniffer</doc>
            <type name="ContentSniffer" c:type="SoupContentSniffer*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="902">the message to sniff</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="903">a buffer containing the start of @msg's response body</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </parameter>
          <parameter name="params"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="904">return
  location for Content-Type parameters (eg, "charset"), or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_buffer_size"
              c:identifier="soup_content_sniffer_get_buffer_size"
              version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-content-sniffer.c"
             line="928">Gets the number of bytes @sniffer needs in order to properly sniff
a buffer.</doc>
        <source-position filename="../libsoup/soup-content-sniffer.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-content-sniffer.c"
               line="935">the number of bytes to sniff</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="sniffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="930">a #SoupContentSniffer</doc>
            <type name="ContentSniffer" c:type="SoupContentSniffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sniff"
              c:identifier="soup_content_sniffer_sniff"
              version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-content-sniffer.c"
             line="899">Sniffs @buffer to determine its Content-Type. The result may also
be influenced by the Content-Type declared in @msg's response
headers.</doc>
        <source-position filename="../libsoup/soup-content-sniffer.h"
                         line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-content-sniffer.c"
               line="911">the sniffed Content-Type of @buffer; this will never be %NULL,
  but may be "application/octet-stream".</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sniffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="901">a #SoupContentSniffer</doc>
            <type name="ContentSniffer" c:type="SoupContentSniffer*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="902">the message to sniff</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="903">a buffer containing the start of @msg's response body</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </parameter>
          <parameter name="params"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="904">return
  location for Content-Type parameters (eg, "charset"), or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ContentSnifferPrivate"
              c:type="SoupContentSnifferPrivate*"/>
      </field>
    </class>
    <record name="ContentSnifferClass"
            c:type="SoupContentSnifferClass"
            glib:is-gtype-struct-for="ContentSniffer">
      <source-position filename="../libsoup/soup-content-sniffer.h" line="44"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="sniff">
        <callback name="sniff">
          <source-position filename="../libsoup/soup-content-sniffer.h"
                           line="32"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="911">the sniffed Content-Type of @buffer; this will never be %NULL,
  but may be "application/octet-stream".</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="sniffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-content-sniffer.c"
                   line="901">a #SoupContentSniffer</doc>
              <type name="ContentSniffer" c:type="SoupContentSniffer*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-content-sniffer.c"
                   line="902">the message to sniff</doc>
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-content-sniffer.c"
                   line="903">a buffer containing the start of @msg's response body</doc>
              <type name="Buffer" c:type="SoupBuffer*"/>
            </parameter>
            <parameter name="params"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-content-sniffer.c"
                   line="904">return
  location for Content-Type parameters (eg, "charset"), or %NULL</doc>
              <type name="GLib.HashTable" c:type="GHashTable**">
                <type name="utf8"/>
                <type name="utf8"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_buffer_size">
        <callback name="get_buffer_size">
          <source-position filename="../libsoup/soup-content-sniffer.h"
                           line="36"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-content-sniffer.c"
                 line="935">the number of bytes to sniff</doc>
            <type name="gsize" c:type="gsize"/>
          </return-value>
          <parameters>
            <parameter name="sniffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-content-sniffer.c"
                   line="930">a #SoupContentSniffer</doc>
              <type name="ContentSniffer" c:type="SoupContentSniffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-content-sniffer.h"
                           line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-content-sniffer.h"
                           line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-content-sniffer.h"
                           line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-content-sniffer.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved5" introspectable="0">
        <callback name="_libsoup_reserved5">
          <source-position filename="../libsoup/soup-content-sniffer.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ContentSnifferPrivate"
            c:type="SoupContentSnifferPrivate"
            disguised="1">
      <source-position filename="../libsoup/soup-content-sniffer.h" line="21"/>
    </record>
    <record name="Cookie"
            c:type="SoupCookie"
            version="2.24"
            glib:type-name="SoupCookie"
            glib:get-type="soup_cookie_get_type"
            c:symbol-prefix="cookie">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="31">An HTTP cookie.

@name and @value will be set for all cookies. If the cookie is
generated from a string that appears to have no name, then @name
will be the empty string.

@domain and @path give the host or domain, and path within that
host/domain, to restrict this cookie to. If @domain starts with
".", that indicates a domain (which matches the string after the
".", or any hostname that has @domain as a suffix). Otherwise, it
is a hostname and must match exactly.

@expires will be non-%NULL if the cookie uses either the original
"expires" attribute, or the newer "max-age" attribute. If @expires
is %NULL, it indicates that neither "expires" nor "max-age" was
specified, and the cookie expires at the end of the session.

If @http_only is set, the cookie should not be exposed to untrusted
code (eg, javascript), so as to minimize the danger posed by
cross-site scripting attacks.</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="35"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="33">the cookie name</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="34">the cookie value</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="domain" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="35">the "domain" attribute, or else the hostname that the
cookie came from.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="path" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="37">the "path" attribute, or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="expires" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="38">the cookie expiration time, or %NULL for a session cookie</doc>
        <type name="Date" c:type="SoupDate*"/>
      </field>
      <field name="secure" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="39">%TRUE if the cookie should only be tranferred over SSL</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="http_only" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="40">%TRUE if the cookie should not be exposed to scripts</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <constructor name="new" c:identifier="soup_cookie_new" version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="339">Creates a new #SoupCookie with the given attributes. (Use
soup_cookie_set_secure() and soup_cookie_set_http_only() if you
need to set those attributes on the returned cookie.)

If @domain starts with ".", that indicates a domain (which matches
the string after the ".", or any hostname that has @domain as a
suffix). Otherwise, it is a hostname and must match exactly.

@max_age is used to set the "expires" attribute on the cookie; pass
-1 to not include the attribute (indicating that the cookie expires
with the current session), 0 for an already-expired cookie, or a
lifetime in seconds. You can use the constants
%SOUP_COOKIE_MAX_AGE_ONE_HOUR, %SOUP_COOKIE_MAX_AGE_ONE_DAY,
%SOUP_COOKIE_MAX_AGE_ONE_WEEK and %SOUP_COOKIE_MAX_AGE_ONE_YEAR (or
multiples thereof) to calculate this value. (If you really care
about setting the exact time that the cookie will expire, use
soup_cookie_set_expires().)</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="365">a new #SoupCookie.</doc>
          <type name="Cookie" c:type="SoupCookie*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="341">cookie name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="342">cookie value</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="343">cookie domain or hostname</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="344">cookie path, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="max_age" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="345">max age of the cookie, or -1 for a session cookie</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="applies_to_uri"
              c:identifier="soup_cookie_applies_to_uri"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="1064">Tests if @cookie should be sent to @uri.

(At the moment, this does not check that @cookie's domain matches
@uri, because it assumes that the caller has already done that.
But don't rely on that; it may change in the future.)</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="1075">%TRUE if @cookie should be sent to @uri, %FALSE if
not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="1066">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="1067">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="soup_cookie_copy" version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="68">Copies @cookie.</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="74">a copy of @cookie</doc>
          <type name="Cookie" c:type="SoupCookie*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="70">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="domain_matches"
              c:identifier="soup_cookie_domain_matches"
              version="2.30">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="96">Checks if the @cookie's domain and @host match in the sense that
@cookie should be sent when making a request to @host, or that
@cookie should be accepted when receiving a response from @host.</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="105">%TRUE if the domains match, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="98">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="99">a URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="soup_cookie_equal" version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="1106">Tests if @cookie1 and @cookie2 are equal.

Note that currently, this does not check that the cookie domains
match. This may change in the future.</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="1116">whether the cookies are equal.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="1108">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="cookie2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="1109">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="soup_cookie_free" version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="858">Frees @cookie</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="860">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_domain"
              c:identifier="soup_cookie_get_domain"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="480">Gets @cookie's domain</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="486">@cookie's domain</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="482">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expires"
              c:identifier="soup_cookie_get_expires"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="612">Gets @cookie's expiration time.</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="82"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="618">@cookie's expiration
time, which is owned by @cookie and should not be modified or
freed.</doc>
          <type name="Date" c:type="SoupDate*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="614">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_http_only"
              c:identifier="soup_cookie_get_http_only"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="688">Gets @cookie's HttpOnly attribute</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="694">@cookie's HttpOnly attribute</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="690">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="soup_cookie_get_name"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="416">Gets @cookie's name</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="422">@cookie's name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="418">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path"
              c:identifier="soup_cookie_get_path"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="512">Gets @cookie's path</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="518">@cookie's path</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="514">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_same_site_policy"
              c:identifier="soup_cookie_get_same_site_policy"
              version="2.70">
        <source-position filename="../libsoup/soup-cookie.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="808">a #SoupSameSitePolicy</doc>
          <type name="SameSitePolicy" c:type="SoupSameSitePolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="806">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secure"
              c:identifier="soup_cookie_get_secure"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="655">Gets @cookie's secure attribute</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="661">@cookie's secure attribute</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="657">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="soup_cookie_get_value"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="448">Gets @cookie's value</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="454">@cookie's value</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="450">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_domain"
              c:identifier="soup_cookie_set_domain"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="496">Sets @cookie's domain to @domain</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="498">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="499">the new domain</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expires"
              c:identifier="soup_cookie_set_expires"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="630">Sets @cookie's expiration time to @expires. If @expires is %NULL,
@cookie will be a session cookie and will expire at the end of the
client's session.

(This sets the same property as soup_cookie_set_max_age().)</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="632">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="expires" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="633">the new expiration time, or %NULL</doc>
            <type name="Date" c:type="SoupDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_http_only"
              c:identifier="soup_cookie_set_http_only"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="704">Sets @cookie's HttpOnly attribute to @http_only. If %TRUE, @cookie
will be marked as "http only", meaning it should not be exposed to
web page scripts or other untrusted code.</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="706">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="http_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="707">the new value for the HttpOnly attribute</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_age"
              c:identifier="soup_cookie_set_max_age"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="544">Sets @cookie's max age to @max_age. If @max_age is -1, the cookie
is a session cookie, and will expire at the end of the client's
session. Otherwise, it is the number of seconds until the cookie
expires. You can use the constants %SOUP_COOKIE_MAX_AGE_ONE_HOUR,
%SOUP_COOKIE_MAX_AGE_ONE_DAY, %SOUP_COOKIE_MAX_AGE_ONE_WEEK and
%SOUP_COOKIE_MAX_AGE_ONE_YEAR (or multiples thereof) to calculate
this value. (A value of 0 indicates that the cookie should be
considered already-expired.)

(This sets the same property as soup_cookie_set_expires().)</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="546">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="max_age" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="547">the new max age</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="soup_cookie_set_name"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="432">Sets @cookie's name to @name</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="434">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="435">the new name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path"
              c:identifier="soup_cookie_set_path"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="528">Sets @cookie's path to @path</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="530">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="531">the new path</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_same_site_policy"
              c:identifier="soup_cookie_set_same_site_policy"
              version="2.70">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="779">When used in conjunction with soup_cookie_jar_get_cookie_list_with_same_site_info() this
sets the policy of when this cookie should be exposed.</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="781">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="782">a #SoupSameSitePolicy</doc>
            <type name="SameSitePolicy" c:type="SoupSameSitePolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secure"
              c:identifier="soup_cookie_set_secure"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="671">Sets @cookie's secure attribute to @secure. If %TRUE, @cookie will
only be transmitted from the client to the server over secure
(https) connections.</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="673">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="secure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="674">the new value for the secure attribute</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="soup_cookie_set_value"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="464">Sets @cookie's value to @value</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="466">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="467">the new value</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_cookie_header"
              c:identifier="soup_cookie_to_cookie_header"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="838">Serializes @cookie in the format used by the Cookie header (ie, for
returning a cookie from a #SoupSession to a server).</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="845">the header</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="840">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_set_cookie_header"
              c:identifier="soup_cookie_to_set_cookie_header"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="818">Serializes @cookie in the format used by the Set-Cookie header
(ie, for sending a cookie from a #SoupServer to a client).</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="104"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="825">the header</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="820">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="parse" c:identifier="soup_cookie_parse" version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="389">Parses @header and returns a #SoupCookie. (If @header contains
multiple cookies, only the first one will be parsed.)

If @header does not have "path" or "domain" attributes, they will
be defaulted from @origin. If @origin is %NULL, path will default
to "/", but domain will be left as %NULL. Note that this is not a
valid state for a #SoupCookie, and you will need to fill in some
appropriate string for the domain if you want to actually make use
of the cookie.</doc>
        <source-position filename="../libsoup/soup-cookie.h" line="53"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="404">a new #SoupCookie, or %NULL if it could
not be parsed, or contained an illegal "domain" attribute for a
cookie originating from @origin.</doc>
          <type name="Cookie" c:type="SoupCookie*"/>
        </return-value>
        <parameters>
          <parameter name="header" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="391">a cookie string (eg, the value of a Set-Cookie header)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="origin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie.c"
                 line="392">origin of the cookie, or %NULL</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="CookieJar"
           c:symbol-prefix="cookie_jar"
           c:type="SoupCookieJar"
           parent="GObject.Object"
           glib:type-name="SoupCookieJar"
           glib:get-type="soup_cookie_jar_get_type"
           glib:type-struct="CookieJarClass">
      <source-position filename="../libsoup/soup-cookie-jar.h" line="39"/>
      <implements name="SessionFeature"/>
      <constructor name="new"
                   c:identifier="soup_cookie_jar_new"
                   version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="224">Creates a new #SoupCookieJar. The base #SoupCookieJar class does
not support persistent storage of cookies; use a subclass for that.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie-jar.c"
               line="230">a new #SoupCookieJar</doc>
          <type name="CookieJar" c:type="SoupCookieJar*"/>
        </return-value>
      </constructor>
      <virtual-method name="changed">
        <source-position filename="../libsoup/soup-cookie-jar.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
          <parameter name="old_cookie" transfer-ownership="none">
            <type name="Cookie" c:type="SoupCookie*"/>
          </parameter>
          <parameter name="new_cookie" transfer-ownership="none">
            <type name="Cookie" c:type="SoupCookie*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_persistent"
                      invoker="is_persistent"
                      version="2.40">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="998">Gets whether @jar stores cookies persistenly.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie-jar.c"
               line="1004">%TRUE if @jar storage is persistent or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="1000">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save" invoker="save" version="2.24" deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="240">This function exists for backward compatibility, but does not do
anything any more; cookie jars are saved automatically when they
are changed.</doc>
        <doc-deprecated xml:space="preserve">This is a no-op.</doc-deprecated>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="242">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_cookie"
              c:identifier="soup_cookie_jar_add_cookie"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="651">Adds @cookie to @jar, emitting the 'changed' signal if we are modifying
an existing cookie or adding a valid new cookie ('valid' means
that the cookie's expire date is not in the past).

@cookie will be 'stolen' by the jar, so don't free it afterwards.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="653">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
          <parameter name="cookie" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="654">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_cookie_full"
              c:identifier="soup_cookie_jar_add_cookie_full"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="545">Adds @cookie to @jar, emitting the 'changed' signal if we are modifying
an existing cookie or adding a valid new cookie ('valid' means
that the cookie's expire date is not in the past).

@first_party will be used to reject cookies coming from third party
resources in case such a security policy is set in the @jar.

@uri will be used to reject setting or overwriting secure cookies
from insecure origins. %NULL is treated as secure.

@cookie will be 'stolen' by the jar, so don't free it afterwards.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="547">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
          <parameter name="cookie" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="548">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="549">the URI setting the cookie</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="first_party"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="550">the URI for the main document</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_cookie_with_first_party"
              c:identifier="soup_cookie_jar_add_cookie_with_first_party"
              version="2.40">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="670">Adds @cookie to @jar, emitting the 'changed' signal if we are modifying
an existing cookie or adding a valid new cookie ('valid' means
that the cookie's expire date is not in the past).

@first_party will be used to reject cookies coming from third party
resources in case such a security policy is set in the @jar.

@cookie will be 'stolen' by the jar, so don't free it afterwards.

For secure cookies to work properly you may want to use
soup_cookie_jar_add_cookie_full().</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="672">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
          <parameter name="first_party" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="673">the URI for the main document</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="cookie" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="674">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </parameter>
        </parameters>
      </method>
      <method name="all_cookies"
              c:identifier="soup_cookie_jar_all_cookies"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="855">Constructs a #GSList with every cookie inside the @jar.
The cookies in the list are a copy of the original, so
you have to free them when you are done with them.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie-jar.c"
               line="863">a #GSList
with all the cookies in the @jar.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Cookie"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="857">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_cookie"
              c:identifier="soup_cookie_jar_delete_cookie"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="891">Deletes @cookie from @jar, emitting the 'changed' signal.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="893">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
          <parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="894">a #SoupCookie</doc>
            <type name="Cookie" c:type="SoupCookie*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_accept_policy"
              c:identifier="soup_cookie_jar_get_accept_policy"
              version="2.30">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="952">Gets @jar's #SoupCookieJarAcceptPolicy</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie-jar.c"
               line="958">the #SoupCookieJarAcceptPolicy set in the @jar</doc>
          <type name="CookieJarAcceptPolicy"
                c:type="SoupCookieJarAcceptPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="954">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cookie_list"
              c:identifier="soup_cookie_jar_get_cookie_list"
              version="2.40">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="444">Retrieves the list of cookies that would be sent with a request to @uri
as a #GSList of #SoupCookie objects.

If @for_http is %TRUE, the return value will include cookies marked
"HttpOnly" (that is, cookies that the server wishes to keep hidden
from client-side scripting operations such as the JavaScript
document.cookies property). Since #SoupCookieJar sets the Cookie
header itself when making the actual HTTP request, you should
almost certainly be setting @for_http to %FALSE if you are calling
this.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="59"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie-jar.c"
               line="462">a #GSList
with the cookies in the @jar that would be sent with a request to @uri.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Cookie"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="446">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="447">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="for_http" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="448">whether or not the return value is being passed directly
to an HTTP operation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cookie_list_with_same_site_info"
              c:identifier="soup_cookie_jar_get_cookie_list_with_same_site_info"
              version="2.70">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="476">This is an extended version of soup_cookie_jar_get_cookie_list() that
provides more information required to use SameSite cookies. See the
[SameSite cookies spec](https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00)
for more detailed information.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie-jar.c"
               line="493">a #GSList
with the cookies in the @jar that would be sent with a request to @uri.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Cookie"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="478">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="479">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="top_level"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="480">a #SoupURI for the top level document</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="site_for_cookies"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="481">a #SoupURI indicating the origin to get cookies for</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="for_http" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="482">whether or not the return value is being passed directly
to an HTTP operation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="is_safe_method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="484">if the HTTP method is safe, as defined by RFC 7231, ignored when @for_http is %FALSE</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="is_top_level_navigation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="485">whether or not the HTTP request is part of
top level navigation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cookies"
              c:identifier="soup_cookie_jar_get_cookies"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="397">Retrieves (in Cookie-header form) the list of cookies that would
be sent with a request to @uri.

If @for_http is %TRUE, the return value will include cookies marked
"HttpOnly" (that is, cookies that the server wishes to keep hidden
from client-side scripting operations such as the JavaScript
document.cookies property). Since #SoupCookieJar sets the Cookie
header itself when making the actual HTTP request, you should
almost certainly be setting @for_http to %FALSE if you are calling
this.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="55"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie-jar.c"
               line="415">the cookies, in string form, or %NULL if
there are no cookies for @uri.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="399">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="400">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="for_http" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="401">whether or not the return value is being passed directly
to an HTTP operation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_persistent"
              c:identifier="soup_cookie_jar_is_persistent"
              version="2.40">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="998">Gets whether @jar stores cookies persistenly.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie-jar.c"
               line="1004">%TRUE if @jar storage is persistent or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="1000">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save"
              c:identifier="soup_cookie_jar_save"
              version="2.24"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="240">This function exists for backward compatibility, but does not do
anything any more; cookie jars are saved automatically when they
are changed.</doc>
        <doc-deprecated xml:space="preserve">This is a no-op.</doc-deprecated>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="242">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_accept_policy"
              c:identifier="soup_cookie_jar_set_accept_policy"
              version="2.30">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="973">Sets @policy as the cookie acceptance policy for @jar.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="975">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="976">a #SoupCookieJarAcceptPolicy</doc>
            <type name="CookieJarAcceptPolicy"
                  c:type="SoupCookieJarAcceptPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cookie"
              c:identifier="soup_cookie_jar_set_cookie"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="698">Adds @cookie to @jar, exactly as though it had appeared in a
Set-Cookie header returned from a request to @uri.

Keep in mind that if the #SoupCookieJarAcceptPolicy
%SOUP_COOKIE_JAR_ACCEPT_NO_THIRD_PARTY is set you'll need to use
soup_cookie_jar_set_cookie_with_first_party(), otherwise the jar
will have no way of knowing if the cookie is being set by a third
party or not.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="700">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="701">the URI setting the cookie</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="702">the stringified cookie to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cookie_with_first_party"
              c:identifier="soup_cookie_jar_set_cookie_with_first_party"
              version="2.30">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="742">Adds @cookie to @jar, exactly as though it had appeared in a
Set-Cookie header returned from a request to @uri. @first_party
will be used to reject cookies coming from third party resources in
case such a security policy is set in the @jar.</doc>
        <source-position filename="../libsoup/soup-cookie-jar.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="jar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="744">a #SoupCookieJar</doc>
            <type name="CookieJar" c:type="SoupCookieJar*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="745">the URI setting the cookie</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="first_party" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="746">the URI for the main document</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="747">the stringified cookie to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="accept-policy"
                version="2.30"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="206">The policy the jar should follow to accept or reject cookies</doc>
        <type name="CookieJarAcceptPolicy"/>
      </property>
      <property name="read-only"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="changed" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="159">Emitted when @jar changes. If a cookie has been added,
@new_cookie will contain the newly-added cookie and
@old_cookie will be %NULL. If a cookie has been deleted,
@old_cookie will contain the to-be-deleted cookie and
@new_cookie will be %NULL. If a cookie has been changed,
@old_cookie will contain its old value, and @new_cookie its
new value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="old_cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="162">the old #SoupCookie value</doc>
            <type name="Cookie"/>
          </parameter>
          <parameter name="new_cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="163">the new #SoupCookie value</doc>
            <type name="Cookie"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <enumeration name="CookieJarAcceptPolicy"
                 version="2.30"
                 glib:type-name="SoupCookieJarAcceptPolicy"
                 glib:get-type="soup_cookie_jar_accept_policy_get_type"
                 c:type="SoupCookieJarAcceptPolicy">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie-jar.c"
           line="930">The policy for accepting or rejecting cookies returned in
responses.</doc>
      <member name="always"
              value="0"
              c:identifier="SOUP_COOKIE_JAR_ACCEPT_ALWAYS"
              glib:nick="always">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="932">accept all cookies unconditionally.</doc>
      </member>
      <member name="never"
              value="1"
              c:identifier="SOUP_COOKIE_JAR_ACCEPT_NEVER"
              glib:nick="never">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="933">reject all cookies unconditionally.</doc>
      </member>
      <member name="no_third_party"
              value="2"
              c:identifier="SOUP_COOKIE_JAR_ACCEPT_NO_THIRD_PARTY"
              glib:nick="no-third-party">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar.c"
             line="934">accept all cookies set by
the main document loaded in the application using libsoup. An
example of the most common case, web browsers, would be: If
http://www.example.com is the page loaded, accept all cookies set
by example.com, but if a resource from http://www.third-party.com
is loaded from that page reject any cookie that it could try to
set. For libsoup to be able to tell apart first party cookies from
the rest, the application must call soup_message_set_first_party()
on each outgoing #SoupMessage, setting the #SoupURI of the main
document. If no first party is set in a message when this policy is
in effect, cookies will be assumed to be third party by default.</doc>
      </member>
    </enumeration>
    <record name="CookieJarClass"
            c:type="SoupCookieJarClass"
            glib:is-gtype-struct-for="CookieJar">
      <source-position filename="../libsoup/soup-cookie-jar.h" line="39"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="save">
        <callback name="save">
          <source-position filename="../libsoup/soup-cookie-jar.h" line="28"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="jar" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-cookie-jar.c"
                   line="242">a #SoupCookieJar</doc>
              <type name="CookieJar" c:type="SoupCookieJar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_persistent">
        <callback name="is_persistent">
          <source-position filename="../libsoup/soup-cookie-jar.h" line="29"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar.c"
                 line="1004">%TRUE if @jar storage is persistent or %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="jar" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-cookie-jar.c"
                   line="1000">a #SoupCookieJar</doc>
              <type name="CookieJar" c:type="SoupCookieJar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="../libsoup/soup-cookie-jar.h" line="32"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="jar" transfer-ownership="none">
              <type name="CookieJar" c:type="SoupCookieJar*"/>
            </parameter>
            <parameter name="old_cookie" transfer-ownership="none">
              <type name="Cookie" c:type="SoupCookie*"/>
            </parameter>
            <parameter name="new_cookie" transfer-ownership="none">
              <type name="Cookie" c:type="SoupCookie*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-cookie-jar.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-cookie-jar.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="CookieJarDB"
           c:symbol-prefix="cookie_jar_db"
           c:type="SoupCookieJarDB"
           parent="CookieJar"
           glib:type-name="SoupCookieJarDB"
           glib:get-type="soup_cookie_jar_db_get_type"
           glib:type-struct="CookieJarDBClass">
      <source-position filename="../libsoup/soup-cookie-jar-db.h" line="33"/>
      <implements name="SessionFeature"/>
      <constructor name="new"
                   c:identifier="soup_cookie_jar_db_new"
                   version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar-db.c"
             line="102">Creates a #SoupCookieJarDB.

@filename will be read in at startup to create an initial set of
cookies. If @read_only is %FALSE, then the non-session cookies will
be written to @filename when the 'changed' signal is emitted from
the jar. (If @read_only is %TRUE, then the cookie jar will only be
used for this session, and changes made to it will be lost when the
jar is destroyed.)</doc>
        <source-position filename="../libsoup/soup-cookie-jar-db.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie-jar-db.c"
               line="116">the new #SoupCookieJar</doc>
          <type name="CookieJar" c:type="SoupCookieJar*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar-db.c"
                 line="104">the filename to read to/write from, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="read_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar-db.c"
                 line="105">%TRUE if @filename is read-only</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="filename"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="CookieJar" c:type="SoupCookieJar"/>
      </field>
    </class>
    <record name="CookieJarDBClass"
            c:type="SoupCookieJarDBClass"
            glib:is-gtype-struct-for="CookieJarDB">
      <source-position filename="../libsoup/soup-cookie-jar-db.h" line="33"/>
      <field name="parent_class">
        <type name="CookieJarClass" c:type="SoupCookieJarClass"/>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-cookie-jar-db.h"
                           line="29"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-cookie-jar-db.h"
                           line="30"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-cookie-jar-db.h"
                           line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-cookie-jar-db.h"
                           line="32"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="CookieJarText"
           c:symbol-prefix="cookie_jar_text"
           c:type="SoupCookieJarText"
           parent="CookieJar"
           glib:type-name="SoupCookieJarText"
           glib:get-type="soup_cookie_jar_text_get_type"
           glib:type-struct="CookieJarTextClass">
      <source-position filename="../libsoup/soup-cookie-jar-text.h" line="33"/>
      <implements name="SessionFeature"/>
      <constructor name="new"
                   c:identifier="soup_cookie_jar_text_new"
                   version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie-jar-text.c"
             line="95">Creates a #SoupCookieJarText.

@filename will be read in at startup to create an initial set of
cookies. If @read_only is %FALSE, then the non-session cookies will
be written to @filename when the 'changed' signal is emitted from
the jar. (If @read_only is %TRUE, then the cookie jar will only be
used for this session, and changes made to it will be lost when the
jar is destroyed.)</doc>
        <source-position filename="../libsoup/soup-cookie-jar-text.h"
                         line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie-jar-text.c"
               line="109">the new #SoupCookieJar</doc>
          <type name="CookieJar" c:type="SoupCookieJar*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar-text.c"
                 line="97">the filename to read to/write from</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="read_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-cookie-jar-text.c"
                 line="98">%TRUE if @filename is read-only</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="filename"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="CookieJar" c:type="SoupCookieJar"/>
      </field>
    </class>
    <record name="CookieJarTextClass"
            c:type="SoupCookieJarTextClass"
            glib:is-gtype-struct-for="CookieJarText">
      <source-position filename="../libsoup/soup-cookie-jar-text.h" line="33"/>
      <field name="parent_class">
        <type name="CookieJarClass" c:type="SoupCookieJarClass"/>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-cookie-jar-text.h"
                           line="29"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-cookie-jar-text.h"
                           line="30"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-cookie-jar-text.h"
                           line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-cookie-jar-text.h"
                           line="32"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <function-macro name="DEPRECATED_IN_2_24_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_24_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="116"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_26_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_26_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="130"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_28_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_28_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="144"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_30_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_30_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="158"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_32_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_32_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="172"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_34_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_34_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="186"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_36_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_36_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="200"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_38_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_38_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="214"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_40_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_40_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="228"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_42_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_42_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="242"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_44_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_44_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="256"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_46_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_46_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="270"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_48_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_48_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="284"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_50_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_50_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="298"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_52_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_52_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="312"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_54_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_54_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="326"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_56_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_56_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="340"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_58_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_58_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="354"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_62_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_62_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="368"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_66_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_66_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="382"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_70_FOR"
                    c:identifier="SOUP_DEPRECATED_IN_2_70_FOR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-version.h" line="402"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <record name="Date"
            c:type="SoupDate"
            glib:type-name="SoupDate"
            glib:get-type="soup_date_get_type"
            c:symbol-prefix="date">
      <doc xml:space="preserve"
           filename="../libsoup/soup-date.c"
           line="19">A date and time. The date is assumed to be in the (proleptic)
Gregorian calendar. The time is in UTC if @utc is %TRUE. Otherwise,
the time is a local time, and @offset gives the offset from UTC in
minutes (such that adding @offset to the time would give the
correct UTC time). If @utc is %FALSE and @offset is 0, then the
%SoupDate represents a "floating" time with no associated timezone
information.</doc>
      <source-position filename="../libsoup/soup-date.h" line="26"/>
      <field name="year" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="21">the year, 1 to 9999</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="month" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="22">the month, 1 to 12</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="day" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="23">day of the month, 1 to 31</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="hour" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="24">hour of the day, 0 to 23</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="minute" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="25">minute, 0 to 59</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="second" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="26">second, 0 to 59 (or up to 61 in the case of leap seconds)</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="utc" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="27">%TRUE if the date is in UTC</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="offset" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="28">offset from UTC</doc>
        <type name="gint" c:type="int"/>
      </field>
      <constructor name="new" c:identifier="soup_date_new">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="151">Creates a #SoupDate representing the indicated time, UTC.</doc>
        <source-position filename="../libsoup/soup-date.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="162">a new #SoupDate</doc>
          <type name="Date" c:type="SoupDate*"/>
        </return-value>
        <parameters>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="153">the year (1-9999)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="month" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="154">the month (1-12)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="day" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="155">the day of the month (1-31, as appropriate for @month)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="hour" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="156">the hour (0-23)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="minute" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="157">the minute (0-59)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="second" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="158">the second (0-59, or up to 61 for leap seconds)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_now" c:identifier="soup_date_new_from_now">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="182">Creates a #SoupDate representing a time @offset_seconds after the
current time (or before it, if @offset_seconds is negative). If
offset_seconds is 0, returns the current time.

If @offset_seconds would indicate a time not expressible as a
&lt;type&gt;time_t&lt;/type&gt;, the return value will be clamped into range.</doc>
        <source-position filename="../libsoup/soup-date.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="193">a new #SoupDate</doc>
          <type name="Date" c:type="SoupDate*"/>
        </return-value>
        <parameters>
          <parameter name="offset_seconds" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="184">offset from current time</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="soup_date_new_from_string">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="459">Parses @date_string and tries to extract a date from it. This
recognizes all of the "HTTP-date" formats from RFC 2616, all ISO
8601 formats containing both a time and a date, RFC 2822 dates,
and reasonable approximations thereof. (Eg, it is lenient about
whitespace, leading "0"s, etc.)</doc>
        <source-position filename="../libsoup/soup-date.h" line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="469">a new #SoupDate, or %NULL if @date_string
could not be parsed.</doc>
          <type name="Date" c:type="SoupDate*"/>
        </return-value>
        <parameters>
          <parameter name="date_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="461">the date in some plausible format</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_time_t"
                   c:identifier="soup_date_new_from_time_t">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="526">Creates a #SoupDate corresponding to @when</doc>
        <source-position filename="../libsoup/soup-date.h" line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="532">a new #SoupDate</doc>
          <type name="Date" c:type="SoupDate*"/>
        </return-value>
        <parameters>
          <parameter name="when" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="528">a &lt;type&gt;time_t&lt;/type&gt;</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="soup_date_copy" version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="903">Copies @date.</doc>
        <source-position filename="../libsoup/soup-date.h" line="92"/>
        <return-value transfer-ownership="full">
          <type name="Date" c:type="SoupDate*"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="905">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="soup_date_free" version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="923">Frees @date.</doc>
        <source-position filename="../libsoup/soup-date.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="925">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_day" c:identifier="soup_date_get_day" version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="805">Gets @date's day.</doc>
        <source-position filename="../libsoup/soup-date.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="811">@date's day</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="807">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hour" c:identifier="soup_date_get_hour" version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="821">Gets @date's hour.</doc>
        <source-position filename="../libsoup/soup-date.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="827">@date's hour</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="823">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_minute"
              c:identifier="soup_date_get_minute"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="837">Gets @date's minute.</doc>
        <source-position filename="../libsoup/soup-date.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="843">@date's minute</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="839">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_month"
              c:identifier="soup_date_get_month"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="789">Gets @date's month.</doc>
        <source-position filename="../libsoup/soup-date.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="795">@date's month</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="791">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offset"
              c:identifier="soup_date_get_offset"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="885">Gets @date's offset from UTC.</doc>
        <source-position filename="../libsoup/soup-date.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="891">@date's offset from UTC. If soup_date_get_utc()
returns %FALSE but soup_date_get_offset() returns 0, that means the
date is a "floating" time with no associated offset information.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="887">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_second"
              c:identifier="soup_date_get_second"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="853">Gets @date's second.</doc>
        <source-position filename="../libsoup/soup-date.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="859">@date's second</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="855">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_utc" c:identifier="soup_date_get_utc" version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="869">Gets @date's UTC flag</doc>
        <source-position filename="../libsoup/soup-date.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="875">%TRUE if @date is UTC.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="871">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_year" c:identifier="soup_date_get_year" version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="773">Gets @date's year.</doc>
        <source-position filename="../libsoup/soup-date.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="779">@date's year</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="775">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_past" c:identifier="soup_date_is_past" version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="751">Determines if @date is in the past.</doc>
        <source-position filename="../libsoup/soup-date.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="757">%TRUE if @date is in the past</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="753">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="soup_date_to_string">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="558">Converts @date to a string in the format described by @format.</doc>
        <source-position filename="../libsoup/soup-date.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="565">@date as a string</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="560">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="561">the format to generate the date in</doc>
            <type name="DateFormat" c:type="SoupDateFormat"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_time_t" c:identifier="soup_date_to_time_t">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="679">Converts @date to a &lt;type&gt;time_t&lt;/type&gt;, assumming it to be in
UTC.

If @date is not representable as a &lt;type&gt;time_t&lt;/type&gt;, it will be
clamped into range. (In particular, some HTTP cookies have
expiration dates after "Y2.038k" (2038-01-19T03:14:07Z).)</doc>
        <source-position filename="../libsoup/soup-date.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-date.c"
               line="690">@date as a &lt;type&gt;time_t&lt;/type&gt;</doc>
          <type name="glong" c:type="time_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="681">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_timeval"
              c:identifier="soup_date_to_timeval"
              version="2.24"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="726">Converts @date to a #GTimeVal.</doc>
        <doc-deprecated xml:space="preserve">Do not use #GTimeVal, as it's not Y2038-safe.</doc-deprecated>
        <source-position filename="../libsoup/soup-date.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="728">a #SoupDate</doc>
            <type name="Date" c:type="SoupDate*"/>
          </instance-parameter>
          <parameter name="time"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-date.c"
                 line="729">a #GTimeVal structure in which to store the converted time.</doc>
            <type name="GLib.TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="DateFormat"
                 glib:type-name="SoupDateFormat"
                 glib:get-type="soup_date_format_get_type"
                 c:type="SoupDateFormat">
      <doc xml:space="preserve"
           filename="../libsoup/soup-date.c"
           line="433">Date formats that soup_date_to_string() can use.

@SOUP_DATE_HTTP and @SOUP_DATE_COOKIE always coerce the time to
UTC. @SOUP_DATE_ISO8601_XMLRPC uses the time as given, ignoring the
offset completely. @SOUP_DATE_RFC2822 and the other ISO 8601
variants use the local time, appending the offset information if
available.

This enum may be extended with more values in future releases.</doc>
      <member name="http"
              value="1"
              c:identifier="SOUP_DATE_HTTP"
              glib:nick="http">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="435">RFC 1123 format, used by the HTTP "Date" header. Eg
"Sun, 06 Nov 1994 08:49:37 GMT"</doc>
      </member>
      <member name="cookie"
              value="2"
              c:identifier="SOUP_DATE_COOKIE"
              glib:nick="cookie">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="437">The format for the "Expires" timestamp in the
Netscape cookie specification. Eg, "Sun, 06-Nov-1994 08:49:37 GMT".</doc>
      </member>
      <member name="rfc2822"
              value="3"
              c:identifier="SOUP_DATE_RFC2822"
              glib:nick="rfc2822">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="439">RFC 2822 format, eg "Sun, 6 Nov 1994 09:49:37 -0100"</doc>
      </member>
      <member name="iso8601_compact"
              value="4"
              c:identifier="SOUP_DATE_ISO8601_COMPACT"
              glib:nick="iso8601-compact">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="440">ISO 8601 date/time with no optional
punctuation. Eg, "19941106T094937-0100".</doc>
      </member>
      <member name="iso8601_full"
              value="5"
              c:identifier="SOUP_DATE_ISO8601_FULL"
              glib:nick="iso8601-full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="442">ISO 8601 date/time with all optional
punctuation. Eg, "1994-11-06T09:49:37-01:00".</doc>
      </member>
      <member name="iso8601"
              value="5"
              c:identifier="SOUP_DATE_ISO8601"
              glib:nick="iso8601">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="446">An alias for @SOUP_DATE_ISO8601_FULL.</doc>
      </member>
      <member name="iso8601_xmlrpc"
              value="6"
              c:identifier="SOUP_DATE_ISO8601_XMLRPC"
              glib:nick="iso8601-xmlrpc">
        <doc xml:space="preserve"
             filename="../libsoup/soup-date.c"
             line="444">ISO 8601 date/time as used by XML-RPC.
Eg, "19941106T09:49:37".</doc>
      </member>
    </enumeration>
    <enumeration name="Encoding"
                 glib:type-name="SoupEncoding"
                 glib:get-type="soup_encoding_get_type"
                 c:type="SoupEncoding">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message-headers.c"
           line="700">How a message body is encoded for transport</doc>
      <member name="unrecognized"
              value="0"
              c:identifier="SOUP_ENCODING_UNRECOGNIZED"
              glib:nick="unrecognized">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="702">unknown / error</doc>
      </member>
      <member name="none"
              value="1"
              c:identifier="SOUP_ENCODING_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="703">no body is present (which is not the same as a
0-length body, and only occurs in certain places)</doc>
      </member>
      <member name="content_length"
              value="2"
              c:identifier="SOUP_ENCODING_CONTENT_LENGTH"
              glib:nick="content-length">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="705">Content-Length encoding</doc>
      </member>
      <member name="eof"
              value="3"
              c:identifier="SOUP_ENCODING_EOF"
              glib:nick="eof">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="706">Response body ends when the connection is closed</doc>
      </member>
      <member name="chunked"
              value="4"
              c:identifier="SOUP_ENCODING_CHUNKED"
              glib:nick="chunked">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="707">chunked encoding (currently only supported
for response)</doc>
      </member>
      <member name="byteranges"
              value="5"
              c:identifier="SOUP_ENCODING_BYTERANGES"
              glib:nick="byteranges">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="709">multipart/byteranges (Reserved for future
use: NOT CURRENTLY IMPLEMENTED)</doc>
      </member>
    </enumeration>
    <bitfield name="Expectation"
              glib:type-name="SoupExpectation"
              glib:get-type="soup_expectation_get_type"
              c:type="SoupExpectation">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message-headers.c"
           line="858">Represents the parsed value of the "Expect" header.</doc>
      <member name="unrecognized"
              value="1"
              c:identifier="SOUP_EXPECTATION_UNRECOGNIZED"
              glib:nick="unrecognized">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="861">any unrecognized expectation</doc>
      </member>
      <member name="continue"
              value="2"
              c:identifier="SOUP_EXPECTATION_CONTINUE"
              glib:nick="continue">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="860">"100-continue"</doc>
      </member>
    </bitfield>
    <constant name="FORM_MIME_TYPE_MULTIPART"
              value="multipart/form-data"
              c:type="SOUP_FORM_MIME_TYPE_MULTIPART"
              version="2.26">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="38">A macro containing the value
&lt;literal&gt;"multipart/form-data"&lt;/literal&gt;; the MIME type used for
posting form data that contains files to be uploaded.</doc>
      <source-position filename="../libsoup/soup-form.h" line="15"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="FORM_MIME_TYPE_URLENCODED"
              value="application/x-www-form-urlencoded"
              c:type="SOUP_FORM_MIME_TYPE_URLENCODED"
              version="2.26">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="28">A macro containing the value
&lt;literal&gt;"application/x-www-form-urlencoded"&lt;/literal&gt;; the default
MIME type for POSTing HTML form data.</doc>
      <source-position filename="../libsoup/soup-form.h" line="14"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="HSTSEnforcer"
           c:symbol-prefix="hsts_enforcer"
           c:type="SoupHSTSEnforcer"
           parent="GObject.Object"
           glib:type-name="SoupHSTSEnforcer"
           glib:get-type="soup_hsts_enforcer_get_type"
           glib:type-struct="HSTSEnforcerClass">
      <source-position filename="../libsoup/soup-hsts-enforcer.h" line="60"/>
      <implements name="SessionFeature"/>
      <constructor name="new"
                   c:identifier="soup_hsts_enforcer_new"
                   version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.c"
             line="194">Creates a new #SoupHSTSEnforcer. The base #SoupHSTSEnforcer class
does not support persistent storage of HSTS policies, see
#SoupHSTSEnforcerDB for that.</doc>
        <source-position filename="../libsoup/soup-hsts-enforcer.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-enforcer.c"
               line="201">a new #SoupHSTSEnforcer</doc>
          <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
        </return-value>
      </constructor>
      <virtual-method name="changed">
        <source-position filename="../libsoup/soup-hsts-enforcer.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="enforcer" transfer-ownership="none">
            <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
          </instance-parameter>
          <parameter name="old_policy" transfer-ownership="none">
            <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
          </parameter>
          <parameter name="new_policy" transfer-ownership="none">
            <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="has_valid_policy"
                      invoker="has_valid_policy"
                      version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.c"
             line="618">Gets whether @hsts_enforcer has a currently valid policy for @domain.</doc>
        <source-position filename="../libsoup/soup-hsts-enforcer.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-enforcer.c"
               line="625">%TRUE if access to @domain should happen over HTTPS, false
otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hsts_enforcer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="620">a #SoupHSTSEnforcer</doc>
            <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="621">a domain.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="hsts_enforced">
        <source-position filename="../libsoup/soup-hsts-enforcer.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="enforcer" transfer-ownership="none">
            <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_persistent"
                      invoker="is_persistent"
                      version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.c"
             line="600">Gets whether @hsts_enforcer stores policies persistenly.</doc>
        <source-position filename="../libsoup/soup-hsts-enforcer.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-enforcer.c"
               line="606">%TRUE if @hsts_enforcer storage is persistent or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hsts_enforcer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="602">a #SoupHSTSEnforcer</doc>
            <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_domains"
              c:identifier="soup_hsts_enforcer_get_domains"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.c"
             line="662">Gets a list of domains for which there are policies in @enforcer.</doc>
        <source-position filename="../libsoup/soup-hsts-enforcer.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-enforcer.c"
               line="671">a newly allocated
list of domains. Use g_list_free_full() and g_free() to free the
list.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="hsts_enforcer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="664">a #SoupHSTSEnforcer</doc>
            <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
          </instance-parameter>
          <parameter name="session_policies" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="665">whether to include session policies</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_policies"
              c:identifier="soup_hsts_enforcer_get_policies"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.c"
             line="699">Gets a list with the policies in @enforcer.</doc>
        <source-position filename="../libsoup/soup-hsts-enforcer.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-enforcer.c"
               line="706">a newly
allocated list of policies. Use g_list_free_full() and
soup_hsts_policy_free() to free the list.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="HSTSPolicy"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="hsts_enforcer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="701">a #SoupHSTSEnforcer</doc>
            <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
          </instance-parameter>
          <parameter name="session_policies" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="702">whether to include session policies</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_valid_policy"
              c:identifier="soup_hsts_enforcer_has_valid_policy"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.c"
             line="618">Gets whether @hsts_enforcer has a currently valid policy for @domain.</doc>
        <source-position filename="../libsoup/soup-hsts-enforcer.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-enforcer.c"
               line="625">%TRUE if access to @domain should happen over HTTPS, false
otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hsts_enforcer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="620">a #SoupHSTSEnforcer</doc>
            <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="621">a domain.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_persistent"
              c:identifier="soup_hsts_enforcer_is_persistent"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.c"
             line="600">Gets whether @hsts_enforcer stores policies persistenly.</doc>
        <source-position filename="../libsoup/soup-hsts-enforcer.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-enforcer.c"
               line="606">%TRUE if @hsts_enforcer storage is persistent or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hsts_enforcer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="602">a #SoupHSTSEnforcer</doc>
            <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_policy"
              c:identifier="soup_hsts_enforcer_set_policy"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.c"
             line="320">Sets @policy to @hsts_enforcer. If @policy is expired, any
existing HSTS policy for its host will be removed instead. If a
policy existed for this host, it will be replaced. Otherwise, the
new policy will be inserted. If the policy is a session policy, that
is, one created with soup_hsts_policy_new_session_policy(), the policy
will not expire and will be enforced during the lifetime of
@hsts_enforcer's #SoupSession.</doc>
        <source-position filename="../libsoup/soup-hsts-enforcer.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hsts_enforcer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="322">a #SoupHSTSEnforcer</doc>
            <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="323">the policy of the HSTS host</doc>
            <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_session_policy"
              c:identifier="soup_hsts_enforcer_set_session_policy"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.c"
             line="367">Sets a session policy for @domain. A session policy is a policy
that is permanent to the lifetime of @hsts_enforcer's #SoupSession
and doesn't expire.</doc>
        <source-position filename="../libsoup/soup-hsts-enforcer.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hsts_enforcer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="369">a #SoupHSTSEnforcer</doc>
            <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="370">policy domain or hostname</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="include_subdomains" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="371">%TRUE if the policy applies on sub domains</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="HSTSEnforcerPrivate" c:type="SoupHSTSEnforcerPrivate*"/>
      </field>
      <glib:signal name="changed" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.c"
             line="146">Emitted when @hsts_enforcer changes. If a policy has been added,
@new_policy will contain the newly-added policy and
@old_policy will be %NULL. If a policy has been deleted,
@old_policy will contain the to-be-deleted policy and
@new_policy will be %NULL. If a policy has been changed,
@old_policy will contain its old value, and @new_policy its
new value.

Note that you shouldn't modify the policies from a callback to
this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="old_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="149">the old #SoupHSTSPolicy value</doc>
            <type name="HSTSPolicy"/>
          </parameter>
          <parameter name="new_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="150">the new #SoupHSTSPolicy value</doc>
            <type name="HSTSPolicy"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="hsts-enforced" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.c"
             line="174">Emitted when @hsts_enforcer has upgraded the protocol
for @message to HTTPS as a result of matching its domain with
a HSTS policy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="177">the message for which HSTS is being enforced</doc>
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="HSTSEnforcerClass"
            c:type="SoupHSTSEnforcerClass"
            glib:is-gtype-struct-for="HSTSEnforcer">
      <source-position filename="../libsoup/soup-hsts-enforcer.h" line="60"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer.h"
             line="31">The parent class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="is_persistent">
        <callback name="is_persistent">
          <source-position filename="../libsoup/soup-hsts-enforcer.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="606">%TRUE if @hsts_enforcer storage is persistent or %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="hsts_enforcer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-hsts-enforcer.c"
                   line="602">a #SoupHSTSEnforcer</doc>
              <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="has_valid_policy">
        <callback name="has_valid_policy">
          <source-position filename="../libsoup/soup-hsts-enforcer.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer.c"
                 line="625">%TRUE if access to @domain should happen over HTTPS, false
otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="hsts_enforcer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-hsts-enforcer.c"
                   line="620">a #SoupHSTSEnforcer</doc>
              <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-hsts-enforcer.c"
                   line="621">a domain.</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="../libsoup/soup-hsts-enforcer.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="enforcer" transfer-ownership="none">
              <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
            </parameter>
            <parameter name="old_policy" transfer-ownership="none">
              <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
            </parameter>
            <parameter name="new_policy" transfer-ownership="none">
              <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hsts_enforced">
        <callback name="hsts_enforced">
          <source-position filename="../libsoup/soup-hsts-enforcer.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="enforcer" transfer-ownership="none">
              <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-hsts-enforcer.h"
                           line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-hsts-enforcer.h"
                           line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-hsts-enforcer.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-hsts-enforcer.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="HSTSEnforcerDB"
           c:symbol-prefix="hsts_enforcer_db"
           c:type="SoupHSTSEnforcerDB"
           parent="HSTSEnforcer"
           glib:type-name="SoupHSTSEnforcerDB"
           glib:get-type="soup_hsts_enforcer_db_get_type"
           glib:type-struct="HSTSEnforcerDBClass">
      <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                       line="38"/>
      <implements name="SessionFeature"/>
      <constructor name="new"
                   c:identifier="soup_hsts_enforcer_db_new"
                   version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer-db.c"
             line="97">Creates a #SoupHSTSEnforcerDB.

@filename will be read in during the initialization of a
#SoupHSTSEnforcerDB, in order to create an initial set of HSTS
policies. If the file doesn't exist, a new database will be created
and initialized. Changes to the policies during the lifetime of a
#SoupHSTSEnforcerDB will be written to @filename when
#SoupHSTSEnforcer::changed is emitted.</doc>
        <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                         line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-enforcer-db.c"
               line="110">the new #SoupHSTSEnforcer</doc>
          <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-enforcer-db.c"
                 line="99">the filename of the database to read/write from.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="filename"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-enforcer-db.c"
             line="325">The filename of the SQLite database where HSTS policies are stored.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="HSTSEnforcer" c:type="SoupHSTSEnforcer"/>
      </field>
      <field name="priv">
        <type name="HSTSEnforcerDBPrivate"
              c:type="SoupHSTSEnforcerDBPrivate*"/>
      </field>
    </class>
    <record name="HSTSEnforcerDBClass"
            c:type="SoupHSTSEnforcerDBClass"
            glib:is-gtype-struct-for="HSTSEnforcerDB">
      <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                       line="38"/>
      <field name="parent_class">
        <type name="HSTSEnforcerClass" c:type="SoupHSTSEnforcerClass"/>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                           line="35"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                           line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                           line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="HSTSEnforcerDBPrivate"
            c:type="SoupHSTSEnforcerDBPrivate"
            disguised="1">
      <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                       line="21"/>
    </record>
    <record name="HSTSEnforcerPrivate"
            c:type="SoupHSTSEnforcerPrivate"
            disguised="1">
      <source-position filename="../libsoup/soup-hsts-enforcer.h" line="21"/>
    </record>
    <record name="HSTSPolicy"
            c:type="SoupHSTSPolicy"
            version="2.68"
            glib:type-name="SoupHSTSPolicy"
            glib:get-type="soup_hsts_policy_get_type"
            c:symbol-prefix="hsts_policy">
      <doc xml:space="preserve"
           filename="../libsoup/soup-hsts-policy.c"
           line="32">An HTTP Strict Transport Security policy.

@domain represents the host that this policy applies to. The domain
must be IDNA-canonicalized. soup_hsts_policy_new() and related methods
will do this for you.

@max_age contains the 'max-age' value from the Strict Transport
Security header and indicates the time to live of this policy,
in seconds.

@expires will be non-%NULL if the policy has been set by the host and
hence has an expiry time. If @expires is %NULL, it indicates that the
policy is a permanent session policy set by the user agent.

If @include_subdomains is %TRUE, the Strict Transport Security policy
must also be enforced on subdomains of @domain.</doc>
      <source-position filename="../libsoup/soup-hsts-policy.h" line="19"/>
      <field name="domain" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="34">The domain or hostname that the policy applies to</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="max_age" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="35">The maximum age, in seconds, that the policy is valid</doc>
        <type name="gulong" c:type="unsigned long"/>
      </field>
      <field name="expires" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="36">the policy expiration time, or %NULL for a permanent session policy</doc>
        <type name="Date" c:type="SoupDate*"/>
      </field>
      <field name="include_subdomains" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="37">%TRUE if the policy applies on subdomains</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <constructor name="new"
                   c:identifier="soup_hsts_policy_new"
                   version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="134">Creates a new #SoupHSTSPolicy with the given attributes.

@domain is a domain on which the strict transport security policy
represented by this object must be enforced.

@max_age is used to set the "expires" attribute on the policy; pass
SOUP_HSTS_POLICY_MAX_AGE_PAST for an already-expired policy, or a
lifetime in seconds.

If @include_subdomains is %TRUE, the strict transport security policy
must also be enforced on all subdomains of @domain.</doc>
        <source-position filename="../libsoup/soup-hsts-policy.h" line="28"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-policy.c"
               line="152">a new #SoupHSTSPolicy.</doc>
          <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="136">policy domain or hostname</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="max_age" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="137">max age of the policy</doc>
            <type name="gulong" c:type="unsigned long"/>
          </parameter>
          <parameter name="include_subdomains" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="138">%TRUE if the policy applies on subdomains</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_response"
                   c:identifier="soup_hsts_policy_new_from_response"
                   version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="250">Parses @msg's first "Strict-Transport-Security" response header and
returns a #SoupHSTSPolicy.</doc>
        <source-position filename="../libsoup/soup-hsts-policy.h" line="40"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-policy.c"
               line="257">a new #SoupHSTSPolicy, or %NULL if no valid
"Strict-Transport-Security" response header was found.</doc>
          <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
        </return-value>
        <parameters>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="252">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full"
                   c:identifier="soup_hsts_policy_new_full"
                   version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="174">Full version of #soup_hsts_policy_new(), to use with an existing
expiration date. See #soup_hsts_policy_new() for details.</doc>
        <source-position filename="../libsoup/soup-hsts-policy.h" line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-policy.c"
               line="184">a new #SoupHSTSPolicy.</doc>
          <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="176">policy domain or hostname</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="max_age" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="177">max age of the policy</doc>
            <type name="gulong" c:type="unsigned long"/>
          </parameter>
          <parameter name="expires" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="178">the date of expiration of the policy or %NULL for a permanent policy</doc>
            <type name="Date" c:type="SoupDate*"/>
          </parameter>
          <parameter name="include_subdomains" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="179">%TRUE if the policy applies on subdomains</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_session_policy"
                   c:identifier="soup_hsts_policy_new_session_policy"
                   version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="217">Creates a new session #SoupHSTSPolicy with the given attributes.
A session policy is a policy that is valid during the lifetime of
the #SoupHSTSEnforcer it is added to. Contrary to regular policies,
it has no expiration date and is not stored in persistent
enforcers. These policies are useful for user-agent to load their
own or user-defined rules.

@domain is a domain on which the strict transport security policy
represented by this object must be enforced.

If @include_subdomains is %TRUE, the strict transport security policy
must also be enforced on all subdomains of @domain.</doc>
        <source-position filename="../libsoup/soup-hsts-policy.h" line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-policy.c"
               line="235">a new #SoupHSTSPolicy.</doc>
          <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="219">policy domain or hostname</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="include_subdomains" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="220">%TRUE if the policy applies on sub domains</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="soup_hsts_policy_copy" version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="61">Copies @policy.</doc>
        <source-position filename="../libsoup/soup-hsts-policy.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-policy.c"
               line="67">a copy of @policy</doc>
          <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="63">a #SoupHSTSPolicy</doc>
            <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal"
              c:identifier="soup_hsts_policy_equal"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="85">Tests if @policy1 and @policy2 are equal.</doc>
        <source-position filename="../libsoup/soup-hsts-policy.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-policy.c"
               line="92">whether the policies are equal.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="policy1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="87">a #SoupHSTSPolicy</doc>
            <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
          </instance-parameter>
          <parameter name="policy2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="88">a #SoupHSTSPolicy</doc>
            <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="soup_hsts_policy_free" version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="388">Frees @policy.</doc>
        <source-position filename="../libsoup/soup-hsts-policy.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="policy" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="390">a #SoupHSTSPolicy</doc>
            <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_domain"
              c:identifier="soup_hsts_policy_get_domain"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="314">Gets @policy's domain.</doc>
        <source-position filename="../libsoup/soup-hsts-policy.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-policy.c"
               line="320">@policy's domain.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="316">a #SoupHSTSPolicy</doc>
            <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="includes_subdomains"
              c:identifier="soup_hsts_policy_includes_subdomains"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="351">Gets whether @policy include its subdomains.</doc>
        <source-position filename="../libsoup/soup-hsts-policy.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-policy.c"
               line="357">%TRUE if @policy includes subdomains, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="353">a #SoupHSTSPolicy</doc>
            <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_expired"
              c:identifier="soup_hsts_policy_is_expired"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="332">Gets whether @policy is expired. Permanent policies never
expire.</doc>
        <source-position filename="../libsoup/soup-hsts-policy.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-policy.c"
               line="339">%TRUE if @policy is expired, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="334">a #SoupHSTSPolicy</doc>
            <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_session_policy"
              c:identifier="soup_hsts_policy_is_session_policy"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-hsts-policy.c"
             line="369">Gets whether @policy is a non-permanent, non-expirable session policy.
see soup_hsts_policy_new_session_policy() for details.</doc>
        <source-position filename="../libsoup/soup-hsts-policy.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-hsts-policy.c"
               line="376">%TRUE if @policy is permanent, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-hsts-policy.c"
                 line="371">a #SoupHSTSPolicy</doc>
            <type name="HSTSPolicy" c:type="SoupHSTSPolicy*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="HSTS_ENFORCER"
                    c:identifier="SOUP_HSTS_ENFORCER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-hsts-enforcer.h" line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HSTS_ENFORCER_CLASS"
                    c:identifier="SOUP_HSTS_ENFORCER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-hsts-enforcer.h" line="16"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HSTS_ENFORCER_DB"
                    c:identifier="SOUP_HSTS_ENFORCER_DB"
                    introspectable="0">
      <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                       line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HSTS_ENFORCER_DB_CLASS"
                    c:identifier="SOUP_HSTS_ENFORCER_DB_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                       line="16"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="HSTS_ENFORCER_DB_FILENAME"
              value="filename"
              c:type="SOUP_HSTS_ENFORCER_DB_FILENAME">
      <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                       line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="HSTS_ENFORCER_DB_GET_CLASS"
                    c:identifier="SOUP_HSTS_ENFORCER_DB_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                       line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HSTS_ENFORCER_GET_CLASS"
                    c:identifier="SOUP_HSTS_ENFORCER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-hsts-enforcer.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="HSTS_POLICY_MAX_AGE_PAST"
              value="0"
              c:type="SOUP_HSTS_POLICY_MAX_AGE_PAST">
      <source-position filename="../libsoup/soup-hsts-policy.h" line="25"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="HTTPVersion"
                 glib:type-name="SoupHTTPVersion"
                 glib:get-type="soup_http_version_get_type"
                 c:type="SoupHTTPVersion">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="1565">Indicates the HTTP protocol version being used.</doc>
      <member name="http_1_0"
              value="0"
              c:identifier="SOUP_HTTP_1_0"
              glib:nick="http-1-0">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1567">HTTP 1.0 (RFC 1945)</doc>
      </member>
      <member name="http_1_1"
              value="1"
              c:identifier="SOUP_HTTP_1_1"
              glib:nick="http-1-1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1568">HTTP 1.1 (RFC 2616)</doc>
      </member>
    </enumeration>
    <function-macro name="IS_ADDRESS"
                    c:identifier="SOUP_IS_ADDRESS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-address.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ADDRESS_CLASS"
                    c:identifier="SOUP_IS_ADDRESS_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-address.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTH"
                    c:identifier="SOUP_IS_AUTH"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth.h" line="17"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTH_CLASS"
                    c:identifier="SOUP_IS_AUTH_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth.h" line="18"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTH_DOMAIN"
                    c:identifier="SOUP_IS_AUTH_DOMAIN"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain.h" line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTH_DOMAIN_BASIC"
                    c:identifier="SOUP_IS_AUTH_DOMAIN_BASIC"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain-basic.h"
                       line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTH_DOMAIN_BASIC_CLASS"
                    c:identifier="SOUP_IS_AUTH_DOMAIN_BASIC_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain-basic.h"
                       line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTH_DOMAIN_CLASS"
                    c:identifier="SOUP_IS_AUTH_DOMAIN_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTH_DOMAIN_DIGEST"
                    c:identifier="SOUP_IS_AUTH_DOMAIN_DIGEST"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain-digest.h"
                       line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTH_DOMAIN_DIGEST_CLASS"
                    c:identifier="SOUP_IS_AUTH_DOMAIN_DIGEST_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-domain-digest.h"
                       line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTH_MANAGER"
                    c:identifier="SOUP_IS_AUTH_MANAGER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-manager.h" line="17"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTH_MANAGER_CLASS"
                    c:identifier="SOUP_IS_AUTH_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-auth-manager.h" line="18"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CACHE"
                    c:identifier="SOUP_IS_CACHE"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cache.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CACHE_CLASS"
                    c:identifier="SOUP_IS_CACHE_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cache.h" line="35"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTENT_DECODER"
                    c:identifier="SOUP_IS_CONTENT_DECODER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-content-decoder.h" line="17"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTENT_DECODER_CLASS"
                    c:identifier="SOUP_IS_CONTENT_DECODER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-content-decoder.h" line="18"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTENT_SNIFFER"
                    c:identifier="SOUP_IS_CONTENT_SNIFFER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-content-sniffer.h" line="17"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTENT_SNIFFER_CLASS"
                    c:identifier="SOUP_IS_CONTENT_SNIFFER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-content-sniffer.h" line="18"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_COOKIE_JAR"
                    c:identifier="SOUP_IS_COOKIE_JAR"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar.h" line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_COOKIE_JAR_CLASS"
                    c:identifier="SOUP_IS_COOKIE_JAR_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_COOKIE_JAR_DB"
                    c:identifier="SOUP_IS_COOKIE_JAR_DB"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar-db.h" line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_COOKIE_JAR_DB_CLASS"
                    c:identifier="SOUP_IS_COOKIE_JAR_DB_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar-db.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_COOKIE_JAR_TEXT"
                    c:identifier="SOUP_IS_COOKIE_JAR_TEXT"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar-text.h" line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_COOKIE_JAR_TEXT_CLASS"
                    c:identifier="SOUP_IS_COOKIE_JAR_TEXT_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-cookie-jar-text.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_HSTS_ENFORCER"
                    c:identifier="SOUP_IS_HSTS_ENFORCER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-hsts-enforcer.h" line="17"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_HSTS_ENFORCER_CLASS"
                    c:identifier="SOUP_IS_HSTS_ENFORCER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-hsts-enforcer.h" line="18"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_HSTS_ENFORCER_DB"
                    c:identifier="SOUP_IS_HSTS_ENFORCER_DB"
                    introspectable="0">
      <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                       line="17"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_HSTS_ENFORCER_DB_CLASS"
                    c:identifier="SOUP_IS_HSTS_ENFORCER_DB_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-hsts-enforcer-db.h"
                       line="18"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGGER"
                    c:identifier="SOUP_IS_LOGGER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-logger.h" line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGGER_CLASS"
                    c:identifier="SOUP_IS_LOGGER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-logger.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MESSAGE"
                    c:identifier="SOUP_IS_MESSAGE"
                    introspectable="0">
      <source-position filename="../libsoup/soup-message.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MESSAGE_CLASS"
                    c:identifier="SOUP_IS_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-message.h" line="20"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MULTIPART_INPUT_STREAM"
                    c:identifier="SOUP_IS_MULTIPART_INPUT_STREAM"
                    introspectable="0">
      <source-position filename="../libsoup/soup-multipart-input-stream.h"
                       line="17"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MULTIPART_INPUT_STREAM_CLASS"
                    c:identifier="SOUP_IS_MULTIPART_INPUT_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-multipart-input-stream.h"
                       line="18"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PASSWORD_MANAGER"
                    c:identifier="SOUP_IS_PASSWORD_MANAGER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-password-manager.h"
                       line="14"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PASSWORD_MANAGER_CLASS"
                    c:identifier="SOUP_IS_PASSWORD_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-password-manager.h"
                       line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROXY_RESOLVER"
                    c:identifier="SOUP_IS_PROXY_RESOLVER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-resolver.h" line="18"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROXY_RESOLVER_CLASS"
                    c:identifier="SOUP_IS_PROXY_RESOLVER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-resolver.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROXY_RESOLVER_DEFAULT"
                    c:identifier="SOUP_IS_PROXY_RESOLVER_DEFAULT"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-resolver-default.h"
                       line="13"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROXY_RESOLVER_DEFAULT_CLASS"
                    c:identifier="SOUP_IS_PROXY_RESOLVER_DEFAULT_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-resolver-default.h"
                       line="14"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROXY_URI_RESOLVER"
                    c:identifier="SOUP_IS_PROXY_URI_RESOLVER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                       line="16"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROXY_URI_RESOLVER_CLASS"
                    c:identifier="SOUP_IS_PROXY_URI_RESOLVER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                       line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUEST"
                    c:identifier="SOUP_IS_REQUEST"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUESTER"
                    c:identifier="SOUP_IS_REQUESTER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-requester.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUESTER_CLASS"
                    c:identifier="SOUP_IS_REQUESTER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-requester.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUEST_CLASS"
                    c:identifier="SOUP_IS_REQUEST_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request.h" line="35"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUEST_DATA"
                    c:identifier="SOUP_IS_REQUEST_DATA"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-data.h" line="32"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUEST_DATA_CLASS"
                    c:identifier="SOUP_IS_REQUEST_DATA_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-data.h" line="33"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUEST_FILE"
                    c:identifier="SOUP_IS_REQUEST_FILE"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-file.h" line="32"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUEST_FILE_CLASS"
                    c:identifier="SOUP_IS_REQUEST_FILE_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-file.h" line="33"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUEST_HTTP"
                    c:identifier="SOUP_IS_REQUEST_HTTP"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-http.h" line="32"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REQUEST_HTTP_CLASS"
                    c:identifier="SOUP_IS_REQUEST_HTTP_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-http.h" line="33"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SERVER"
                    c:identifier="SOUP_IS_SERVER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-server.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SERVER_CLASS"
                    c:identifier="SOUP_IS_SERVER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-server.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION"
                    c:identifier="SOUP_IS_SESSION"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION_ASYNC"
                    c:identifier="SOUP_IS_SESSION_ASYNC"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-async.h" line="17"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION_ASYNC_CLASS"
                    c:identifier="SOUP_IS_SESSION_ASYNC_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-async.h" line="18"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION_CLASS"
                    c:identifier="SOUP_IS_SESSION_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session.h" line="20"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION_FEATURE"
                    c:identifier="SOUP_IS_SESSION_FEATURE"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-feature.h" line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION_FEATURE_CLASS"
                    c:identifier="SOUP_IS_SESSION_FEATURE_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-feature.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION_SYNC"
                    c:identifier="SOUP_IS_SESSION_SYNC"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-sync.h" line="17"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION_SYNC_CLASS"
                    c:identifier="SOUP_IS_SESSION_SYNC_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-sync.h" line="18"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOCKET"
                    c:identifier="SOUP_IS_SOCKET"
                    introspectable="0">
      <source-position filename="../libsoup/soup-socket.h" line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOCKET_CLASS"
                    c:identifier="SOUP_IS_SOCKET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-socket.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WEBSOCKET_CONNECTION"
                    c:identifier="SOUP_IS_WEBSOCKET_CONNECTION"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-connection.h"
                       line="31"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WEBSOCKET_CONNECTION_CLASS"
                    c:identifier="SOUP_IS_WEBSOCKET_CONNECTION_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-connection.h"
                       line="34"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WEBSOCKET_EXTENSION"
                    c:identifier="SOUP_IS_WEBSOCKET_EXTENSION"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WEBSOCKET_EXTENSION_CLASS"
                    c:identifier="SOUP_IS_WEBSOCKET_EXTENSION_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension.h"
                       line="35"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WEBSOCKET_EXTENSION_DEFLATE"
                    c:identifier="SOUP_IS_WEBSOCKET_EXTENSION_DEFLATE"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension-deflate.h"
                       line="30"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WEBSOCKET_EXTENSION_DEFLATE_CLASS"
                    c:identifier="SOUP_IS_WEBSOCKET_EXTENSION_DEFLATE_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension-deflate.h"
                       line="32"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WEBSOCKET_EXTENSION_MANAGER"
                    c:identifier="SOUP_IS_WEBSOCKET_EXTENSION_MANAGER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension-manager.h"
                       line="32"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WEBSOCKET_EXTENSION_MANAGER_CLASS"
                    c:identifier="SOUP_IS_WEBSOCKET_EXTENSION_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension-manager.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="KnownStatusCode"
                 glib:type-name="SoupKnownStatusCode"
                 glib:get-type="soup_known_status_code_get_type"
                 c:type="SoupKnownStatusCode">
      <member name="none"
              value="0"
              c:identifier="SOUP_KNOWN_STATUS_CODE_NONE"
              glib:nick="none">
      </member>
      <member name="cancelled"
              value="1"
              c:identifier="SOUP_KNOWN_STATUS_CODE_CANCELLED"
              glib:nick="cancelled">
      </member>
      <member name="cant_resolve"
              value="2"
              c:identifier="SOUP_KNOWN_STATUS_CODE_CANT_RESOLVE"
              glib:nick="cant-resolve">
      </member>
      <member name="cant_resolve_proxy"
              value="3"
              c:identifier="SOUP_KNOWN_STATUS_CODE_CANT_RESOLVE_PROXY"
              glib:nick="cant-resolve-proxy">
      </member>
      <member name="cant_connect"
              value="4"
              c:identifier="SOUP_KNOWN_STATUS_CODE_CANT_CONNECT"
              glib:nick="cant-connect">
      </member>
      <member name="cant_connect_proxy"
              value="5"
              c:identifier="SOUP_KNOWN_STATUS_CODE_CANT_CONNECT_PROXY"
              glib:nick="cant-connect-proxy">
      </member>
      <member name="ssl_failed"
              value="6"
              c:identifier="SOUP_KNOWN_STATUS_CODE_SSL_FAILED"
              glib:nick="ssl-failed">
      </member>
      <member name="io_error"
              value="7"
              c:identifier="SOUP_KNOWN_STATUS_CODE_IO_ERROR"
              glib:nick="io-error">
      </member>
      <member name="malformed"
              value="8"
              c:identifier="SOUP_KNOWN_STATUS_CODE_MALFORMED"
              glib:nick="malformed">
      </member>
      <member name="try_again"
              value="9"
              c:identifier="SOUP_KNOWN_STATUS_CODE_TRY_AGAIN"
              glib:nick="try-again">
      </member>
      <member name="too_many_redirects"
              value="10"
              c:identifier="SOUP_KNOWN_STATUS_CODE_TOO_MANY_REDIRECTS"
              glib:nick="too-many-redirects">
      </member>
      <member name="tls_failed"
              value="11"
              c:identifier="SOUP_KNOWN_STATUS_CODE_TLS_FAILED"
              glib:nick="tls-failed">
      </member>
      <member name="continue"
              value="100"
              c:identifier="SOUP_KNOWN_STATUS_CODE_CONTINUE"
              glib:nick="continue">
      </member>
      <member name="switching_protocols"
              value="101"
              c:identifier="SOUP_KNOWN_STATUS_CODE_SWITCHING_PROTOCOLS"
              glib:nick="switching-protocols">
      </member>
      <member name="processing"
              value="102"
              c:identifier="SOUP_KNOWN_STATUS_CODE_PROCESSING"
              glib:nick="processing">
      </member>
      <member name="ok"
              value="200"
              c:identifier="SOUP_KNOWN_STATUS_CODE_OK"
              glib:nick="ok">
      </member>
      <member name="created"
              value="201"
              c:identifier="SOUP_KNOWN_STATUS_CODE_CREATED"
              glib:nick="created">
      </member>
      <member name="accepted"
              value="202"
              c:identifier="SOUP_KNOWN_STATUS_CODE_ACCEPTED"
              glib:nick="accepted">
      </member>
      <member name="non_authoritative"
              value="203"
              c:identifier="SOUP_KNOWN_STATUS_CODE_NON_AUTHORITATIVE"
              glib:nick="non-authoritative">
      </member>
      <member name="no_content"
              value="204"
              c:identifier="SOUP_KNOWN_STATUS_CODE_NO_CONTENT"
              glib:nick="no-content">
      </member>
      <member name="reset_content"
              value="205"
              c:identifier="SOUP_KNOWN_STATUS_CODE_RESET_CONTENT"
              glib:nick="reset-content">
      </member>
      <member name="partial_content"
              value="206"
              c:identifier="SOUP_KNOWN_STATUS_CODE_PARTIAL_CONTENT"
              glib:nick="partial-content">
      </member>
      <member name="multi_status"
              value="207"
              c:identifier="SOUP_KNOWN_STATUS_CODE_MULTI_STATUS"
              glib:nick="multi-status">
      </member>
      <member name="multiple_choices"
              value="300"
              c:identifier="SOUP_KNOWN_STATUS_CODE_MULTIPLE_CHOICES"
              glib:nick="multiple-choices">
      </member>
      <member name="moved_permanently"
              value="301"
              c:identifier="SOUP_KNOWN_STATUS_CODE_MOVED_PERMANENTLY"
              glib:nick="moved-permanently">
      </member>
      <member name="found"
              value="302"
              c:identifier="SOUP_KNOWN_STATUS_CODE_FOUND"
              glib:nick="found">
      </member>
      <member name="moved_temporarily"
              value="302"
              c:identifier="SOUP_KNOWN_STATUS_CODE_MOVED_TEMPORARILY"
              glib:nick="moved-temporarily">
      </member>
      <member name="see_other"
              value="303"
              c:identifier="SOUP_KNOWN_STATUS_CODE_SEE_OTHER"
              glib:nick="see-other">
      </member>
      <member name="not_modified"
              value="304"
              c:identifier="SOUP_KNOWN_STATUS_CODE_NOT_MODIFIED"
              glib:nick="not-modified">
      </member>
      <member name="use_proxy"
              value="305"
              c:identifier="SOUP_KNOWN_STATUS_CODE_USE_PROXY"
              glib:nick="use-proxy">
      </member>
      <member name="not_appearing_in_this_protocol"
              value="306"
              c:identifier="SOUP_KNOWN_STATUS_CODE_NOT_APPEARING_IN_THIS_PROTOCOL"
              glib:nick="not-appearing-in-this-protocol">
      </member>
      <member name="temporary_redirect"
              value="307"
              c:identifier="SOUP_KNOWN_STATUS_CODE_TEMPORARY_REDIRECT"
              glib:nick="temporary-redirect">
      </member>
      <member name="bad_request"
              value="400"
              c:identifier="SOUP_KNOWN_STATUS_CODE_BAD_REQUEST"
              glib:nick="bad-request">
      </member>
      <member name="unauthorized"
              value="401"
              c:identifier="SOUP_KNOWN_STATUS_CODE_UNAUTHORIZED"
              glib:nick="unauthorized">
      </member>
      <member name="payment_required"
              value="402"
              c:identifier="SOUP_KNOWN_STATUS_CODE_PAYMENT_REQUIRED"
              glib:nick="payment-required">
      </member>
      <member name="forbidden"
              value="403"
              c:identifier="SOUP_KNOWN_STATUS_CODE_FORBIDDEN"
              glib:nick="forbidden">
      </member>
      <member name="not_found"
              value="404"
              c:identifier="SOUP_KNOWN_STATUS_CODE_NOT_FOUND"
              glib:nick="not-found">
      </member>
      <member name="method_not_allowed"
              value="405"
              c:identifier="SOUP_KNOWN_STATUS_CODE_METHOD_NOT_ALLOWED"
              glib:nick="method-not-allowed">
      </member>
      <member name="not_acceptable"
              value="406"
              c:identifier="SOUP_KNOWN_STATUS_CODE_NOT_ACCEPTABLE"
              glib:nick="not-acceptable">
      </member>
      <member name="proxy_authentication_required"
              value="407"
              c:identifier="SOUP_KNOWN_STATUS_CODE_PROXY_AUTHENTICATION_REQUIRED"
              glib:nick="proxy-authentication-required">
      </member>
      <member name="proxy_unauthorized"
              value="407"
              c:identifier="SOUP_KNOWN_STATUS_CODE_PROXY_UNAUTHORIZED"
              glib:nick="proxy-unauthorized">
      </member>
      <member name="request_timeout"
              value="408"
              c:identifier="SOUP_KNOWN_STATUS_CODE_REQUEST_TIMEOUT"
              glib:nick="request-timeout">
      </member>
      <member name="conflict"
              value="409"
              c:identifier="SOUP_KNOWN_STATUS_CODE_CONFLICT"
              glib:nick="conflict">
      </member>
      <member name="gone"
              value="410"
              c:identifier="SOUP_KNOWN_STATUS_CODE_GONE"
              glib:nick="gone">
      </member>
      <member name="length_required"
              value="411"
              c:identifier="SOUP_KNOWN_STATUS_CODE_LENGTH_REQUIRED"
              glib:nick="length-required">
      </member>
      <member name="precondition_failed"
              value="412"
              c:identifier="SOUP_KNOWN_STATUS_CODE_PRECONDITION_FAILED"
              glib:nick="precondition-failed">
      </member>
      <member name="request_entity_too_large"
              value="413"
              c:identifier="SOUP_KNOWN_STATUS_CODE_REQUEST_ENTITY_TOO_LARGE"
              glib:nick="request-entity-too-large">
      </member>
      <member name="request_uri_too_long"
              value="414"
              c:identifier="SOUP_KNOWN_STATUS_CODE_REQUEST_URI_TOO_LONG"
              glib:nick="request-uri-too-long">
      </member>
      <member name="unsupported_media_type"
              value="415"
              c:identifier="SOUP_KNOWN_STATUS_CODE_UNSUPPORTED_MEDIA_TYPE"
              glib:nick="unsupported-media-type">
      </member>
      <member name="requested_range_not_satisfiable"
              value="416"
              c:identifier="SOUP_KNOWN_STATUS_CODE_REQUESTED_RANGE_NOT_SATISFIABLE"
              glib:nick="requested-range-not-satisfiable">
      </member>
      <member name="invalid_range"
              value="416"
              c:identifier="SOUP_KNOWN_STATUS_CODE_INVALID_RANGE"
              glib:nick="invalid-range">
      </member>
      <member name="expectation_failed"
              value="417"
              c:identifier="SOUP_KNOWN_STATUS_CODE_EXPECTATION_FAILED"
              glib:nick="expectation-failed">
      </member>
      <member name="unprocessable_entity"
              value="422"
              c:identifier="SOUP_KNOWN_STATUS_CODE_UNPROCESSABLE_ENTITY"
              glib:nick="unprocessable-entity">
      </member>
      <member name="locked"
              value="423"
              c:identifier="SOUP_KNOWN_STATUS_CODE_LOCKED"
              glib:nick="locked">
      </member>
      <member name="failed_dependency"
              value="424"
              c:identifier="SOUP_KNOWN_STATUS_CODE_FAILED_DEPENDENCY"
              glib:nick="failed-dependency">
      </member>
      <member name="internal_server_error"
              value="500"
              c:identifier="SOUP_KNOWN_STATUS_CODE_INTERNAL_SERVER_ERROR"
              glib:nick="internal-server-error">
      </member>
      <member name="not_implemented"
              value="501"
              c:identifier="SOUP_KNOWN_STATUS_CODE_NOT_IMPLEMENTED"
              glib:nick="not-implemented">
      </member>
      <member name="bad_gateway"
              value="502"
              c:identifier="SOUP_KNOWN_STATUS_CODE_BAD_GATEWAY"
              glib:nick="bad-gateway">
      </member>
      <member name="service_unavailable"
              value="503"
              c:identifier="SOUP_KNOWN_STATUS_CODE_SERVICE_UNAVAILABLE"
              glib:nick="service-unavailable">
      </member>
      <member name="gateway_timeout"
              value="504"
              c:identifier="SOUP_KNOWN_STATUS_CODE_GATEWAY_TIMEOUT"
              glib:nick="gateway-timeout">
      </member>
      <member name="http_version_not_supported"
              value="505"
              c:identifier="SOUP_KNOWN_STATUS_CODE_HTTP_VERSION_NOT_SUPPORTED"
              glib:nick="http-version-not-supported">
      </member>
      <member name="insufficient_storage"
              value="507"
              c:identifier="SOUP_KNOWN_STATUS_CODE_INSUFFICIENT_STORAGE"
              glib:nick="insufficient-storage">
      </member>
      <member name="not_extended"
              value="510"
              c:identifier="SOUP_KNOWN_STATUS_CODE_NOT_EXTENDED"
              glib:nick="not-extended">
      </member>
    </enumeration>
    <function-macro name="LOGGER"
                    c:identifier="SOUP_LOGGER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-logger.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGGER_CLASS"
                    c:identifier="SOUP_LOGGER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-logger.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGGER_GET_CLASS"
                    c:identifier="SOUP_LOGGER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-logger.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="LOGGER_LEVEL"
              value="level"
              c:type="SOUP_LOGGER_LEVEL"
              version="2.56">
      <doc xml:space="preserve"
           filename="../libsoup/soup-logger.c"
           line="221">Alias for the #SoupLogger:level property, qv.</doc>
      <source-position filename="../libsoup/soup-logger.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LOGGER_MAX_BODY_SIZE"
              value="max-body-size"
              c:type="SOUP_LOGGER_MAX_BODY_SIZE"
              version="2.56">
      <doc xml:space="preserve"
           filename="../libsoup/soup-logger.c"
           line="247">Alias for the #SoupLogger:max-body-size property, qv.</doc>
      <source-position filename="../libsoup/soup-logger.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Logger"
           c:symbol-prefix="logger"
           c:type="SoupLogger"
           parent="GObject.Object"
           glib:type-name="SoupLogger"
           glib:get-type="soup_logger_get_type"
           glib:type-struct="LoggerClass">
      <source-position filename="../libsoup/soup-logger.h" line="40"/>
      <implements name="SessionFeature"/>
      <constructor name="new" c:identifier="soup_logger_new">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="278">Creates a new #SoupLogger with the given debug level. If @level is
%SOUP_LOGGER_LOG_BODY, @max_body_size gives the maximum number of
bytes of the body that will be logged. (-1 means "no limit".)

If you need finer control over what message parts are and aren't
logged, use soup_logger_set_request_filter() and
soup_logger_set_response_filter().</doc>
        <source-position filename="../libsoup/soup-logger.h" line="59"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-logger.c"
               line="291">a new #SoupLogger</doc>
          <type name="Logger" c:type="SoupLogger*"/>
        </return-value>
        <parameters>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="280">the debug level</doc>
            <type name="LoggerLogLevel" c:type="SoupLoggerLogLevel"/>
          </parameter>
          <parameter name="max_body_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="281">the maximum body size to output, or -1</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="attach" c:identifier="soup_logger_attach" deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="440">Sets @logger to watch @session and print debug information for
its messages.

(The session will take a reference on @logger, which will be
removed when you call soup_logger_detach(), or when the session is
destroyed.)</doc>
        <doc-deprecated xml:space="preserve">Use soup_session_add_feature() instead.</doc-deprecated>
        <source-position filename="../libsoup/soup-logger.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="442">a #SoupLogger</doc>
            <type name="Logger" c:type="SoupLogger*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="443">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach" c:identifier="soup_logger_detach" deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="461">Stops @logger from watching @session.</doc>
        <doc-deprecated xml:space="preserve">Use soup_session_remove_feature() instead.</doc-deprecated>
        <source-position filename="../libsoup/soup-logger.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="463">a #SoupLogger</doc>
            <type name="Logger" c:type="SoupLogger*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="464">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_printer" c:identifier="soup_logger_set_printer">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="394">Sets up an alternate log printing routine, if you don't want
the log to go to &lt;literal&gt;stdout&lt;/literal&gt;.</doc>
        <source-position filename="../libsoup/soup-logger.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="396">a #SoupLogger</doc>
            <type name="Logger" c:type="SoupLogger*"/>
          </instance-parameter>
          <parameter name="printer"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="397">the callback for printing logging output</doc>
            <type name="LoggerPrinter" c:type="SoupLoggerPrinter"/>
          </parameter>
          <parameter name="printer_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="398">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="399">a #GDestroyNotify to free @printer_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_request_filter"
              c:identifier="soup_logger_set_request_filter">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="319">Sets up a filter to determine the log level for a given request.
For each HTTP request @logger will invoke @request_filter to
determine how much (if any) of that request to log. (If you do not
set a request filter, @logger will just always log requests at the
level passed to soup_logger_new().)</doc>
        <source-position filename="../libsoup/soup-logger.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="321">a #SoupLogger</doc>
            <type name="Logger" c:type="SoupLogger*"/>
          </instance-parameter>
          <parameter name="request_filter"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="322">the callback for request debugging</doc>
            <type name="LoggerFilter" c:type="SoupLoggerFilter"/>
          </parameter>
          <parameter name="filter_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="323">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="324">a #GDestroyNotify to free @filter_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_response_filter"
              c:identifier="soup_logger_set_response_filter">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="345">Sets up a filter to determine the log level for a given response.
For each HTTP response @logger will invoke @response_filter to
determine how much (if any) of that response to log. (If you do not
set a response filter, @logger will just always log responses at
the level passed to soup_logger_new().)</doc>
        <source-position filename="../libsoup/soup-logger.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="logger" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="347">a #SoupLogger</doc>
            <type name="Logger" c:type="SoupLogger*"/>
          </instance-parameter>
          <parameter name="response_filter"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="348">the callback for response debugging</doc>
            <type name="LoggerFilter" c:type="SoupLoggerFilter"/>
          </parameter>
          <parameter name="filter_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="349">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-logger.c"
                 line="350">a #GDestroyNotify to free @filter_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="level"
                version="2.56"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="214">The level of logging output</doc>
        <type name="LoggerLogLevel"/>
      </property>
      <property name="max-body-size"
                version="2.56"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="238">If #SoupLogger:level is %SOUP_LOGGER_LOG_BODY, this gives
the maximum number of bytes of the body that will be logged.
(-1 means "no limit".)</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="LoggerClass"
            c:type="SoupLoggerClass"
            glib:is-gtype-struct-for="Logger">
      <source-position filename="../libsoup/soup-logger.h" line="40"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-logger.h" line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-logger.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-logger.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-logger.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="LoggerFilter" c:type="SoupLoggerFilter">
      <doc xml:space="preserve"
           filename="../libsoup/soup-logger.c"
           line="302">The prototype for a logging filter. The filter callback will be
invoked for each request or response, and should analyze it and
return a #SoupLoggerLogLevel value indicating how much of the
message to log. Eg, it might choose between %SOUP_LOGGER_LOG_BODY
and %SOUP_LOGGER_LOG_HEADERS depending on the Content-Type.</doc>
      <source-position filename="../libsoup/soup-logger.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="315">a #SoupLoggerLogLevel value indicating how much of
the message to log</doc>
        <type name="LoggerLogLevel" c:type="SoupLoggerLogLevel"/>
      </return-value>
      <parameters>
        <parameter name="logger" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-logger.c"
               line="304">the #SoupLogger</doc>
          <type name="Logger" c:type="SoupLogger*"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-logger.c"
               line="305">the message being logged</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="../libsoup/soup-logger.c"
               line="306">the data passed to soup_logger_set_request_filter()
or soup_logger_set_response_filter()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="LoggerLogLevel"
                 glib:type-name="SoupLoggerLogLevel"
                 glib:get-type="soup_logger_log_level_get_type"
                 c:type="SoupLoggerLogLevel">
      <doc xml:space="preserve"
           filename="../libsoup/soup-logger.c"
           line="266">Describes the level of logging output to provide.</doc>
      <member name="none"
              value="0"
              c:identifier="SOUP_LOGGER_LOG_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="268">No logging</doc>
      </member>
      <member name="minimal"
              value="1"
              c:identifier="SOUP_LOGGER_LOG_MINIMAL"
              glib:nick="minimal">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="269">Log the Request-Line or Status-Line and
the Soup-Debug pseudo-headers</doc>
      </member>
      <member name="headers"
              value="2"
              c:identifier="SOUP_LOGGER_LOG_HEADERS"
              glib:nick="headers">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="271">Log the full request/response headers</doc>
      </member>
      <member name="body"
              value="3"
              c:identifier="SOUP_LOGGER_LOG_BODY"
              glib:nick="body">
        <doc xml:space="preserve"
             filename="../libsoup/soup-logger.c"
             line="272">Log the full headers and request/response
bodies.</doc>
      </member>
    </enumeration>
    <callback name="LoggerPrinter" c:type="SoupLoggerPrinter">
      <doc xml:space="preserve"
           filename="../libsoup/soup-logger.c"
           line="371">The prototype for a custom printing callback.

@level indicates what kind of information is being printed. Eg, it
will be %SOUP_LOGGER_LOG_HEADERS if @data is header data.

@direction is either '&lt;', '&gt;', or ' ', and @data is the single line
to print; the printer is expected to add a terminating newline.

To get the effect of the default printer, you would do:

&lt;informalexample&gt;&lt;programlisting&gt;
printf ("%c %s\n", direction, data);
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <source-position filename="../libsoup/soup-logger.h" line="46"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="logger" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-logger.c"
               line="373">the #SoupLogger</doc>
          <type name="Logger" c:type="SoupLogger*"/>
        </parameter>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-logger.c"
               line="374">the level of the information being printed.</doc>
          <type name="LoggerLogLevel" c:type="SoupLoggerLogLevel"/>
        </parameter>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-logger.c"
               line="375">a single-character prefix to @data</doc>
          <type name="gchar" c:type="char"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-logger.c"
               line="376">data to print</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <doc xml:space="preserve"
               filename="../libsoup/soup-logger.c"
               line="377">the data passed to soup_logger_set_printer()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="MAJOR_VERSION"
              value="2"
              c:type="SOUP_MAJOR_VERSION"
              version="2.42">
      <doc xml:space="preserve"
           filename="../libsoup/soup-version.c"
           line="19">Like soup_get_major_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.</doc>
      <source-position filename="../libsoup/soup-version.h" line="15"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MESSAGE"
                    c:identifier="SOUP_MESSAGE"
                    introspectable="0">
      <source-position filename="../libsoup/soup-message.h" line="17"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MESSAGE_CLASS"
                    c:identifier="SOUP_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-message.h" line="18"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MESSAGE_FIRST_PARTY"
              value="first-party"
              c:type="SOUP_MESSAGE_FIRST_PARTY"
              version="2.30">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="804">Alias for the #SoupMessage:first-party property. (The
#SoupURI loaded in the application when the message was
queued.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="71"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_FLAGS" value="flags" c:type="SOUP_MESSAGE_FLAGS">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="747">Alias for the #SoupMessage:flags property. (The message's
#SoupMessageFlags.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="MESSAGE_GET_CLASS"
                    c:identifier="SOUP_MESSAGE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-message.h" line="21"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MESSAGE_HTTP_VERSION"
              value="http-version"
              c:type="SOUP_MESSAGE_HTTP_VERSION">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="732">Alias for the #SoupMessage:http-version property. (The
message's #SoupHTTPVersion.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_IS_TOP_LEVEL_NAVIGATION"
              value="is-top-level-navigation"
              c:type="SOUP_MESSAGE_IS_TOP_LEVEL_NAVIGATION">
      <source-position filename="../libsoup/soup-message.h" line="82"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_METHOD"
              value="method"
              c:type="SOUP_MESSAGE_METHOD">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="704">Alias for the #SoupMessage:method property. (The message's
HTTP method.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_PRIORITY"
              value="priority"
              c:type="SOUP_MESSAGE_PRIORITY"
              version="2.44">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="1005">Sets the priority of the #SoupMessage. See
soup_message_set_priority() for further details.</doc>
      <source-position filename="../libsoup/soup-message.h" line="81"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_REASON_PHRASE"
              value="reason-phrase"
              c:type="SOUP_MESSAGE_REASON_PHRASE">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="790">Alias for the #SoupMessage:reason-phrase property. (The
message's HTTP response reason phrase.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="70"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_REQUEST_BODY"
              value="request-body"
              c:type="SOUP_MESSAGE_REQUEST_BODY">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="857">Alias for the #SoupMessage:request-body property. (The
message's HTTP request body.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="73"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_REQUEST_BODY_DATA"
              value="request-body-data"
              c:type="SOUP_MESSAGE_REQUEST_BODY_DATA"
              version="2.46">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="871">Alias for the #SoupMessage:request-body-data property. (The
message's HTTP request body, as a #GBytes.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="74"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_REQUEST_HEADERS"
              value="request-headers"
              c:type="SOUP_MESSAGE_REQUEST_HEADERS">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="894">Alias for the #SoupMessage:request-headers property. (The
message's HTTP request headers.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="75"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_RESPONSE_BODY"
              value="response-body"
              c:type="SOUP_MESSAGE_RESPONSE_BODY">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="908">Alias for the #SoupMessage:response-body property. (The
message's HTTP response body.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="76"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_RESPONSE_BODY_DATA"
              value="response-body-data"
              c:type="SOUP_MESSAGE_RESPONSE_BODY_DATA"
              version="2.46">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="922">Alias for the #SoupMessage:response-body-data property. (The
message's HTTP response body, as a #GBytes.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="77"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_RESPONSE_HEADERS"
              value="response-headers"
              c:type="SOUP_MESSAGE_RESPONSE_HEADERS">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="945">Alias for the #SoupMessage:response-headers property. (The
message's HTTP response headers.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="78"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_SERVER_SIDE"
              value="server-side"
              c:type="SOUP_MESSAGE_SERVER_SIDE">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="762">Alias for the #SoupMessage:server-side property. (%TRUE if
the message was created by #SoupServer.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_SITE_FOR_COOKIES"
              value="site-for-cookies"
              c:type="SOUP_MESSAGE_SITE_FOR_COOKIES">
      <source-position filename="../libsoup/soup-message.h" line="72"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_STATUS_CODE"
              value="status-code"
              c:type="SOUP_MESSAGE_STATUS_CODE">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="776">Alias for the #SoupMessage:status-code property. (The
message's HTTP response status code.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_TLS_CERTIFICATE"
              value="tls-certificate"
              c:type="SOUP_MESSAGE_TLS_CERTIFICATE"
              version="2.34">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="959">Alias for the #SoupMessage:tls-certificate property. (The
TLS certificate associated with the message, if any.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="79"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_TLS_ERRORS"
              value="tls-errors"
              c:type="SOUP_MESSAGE_TLS_ERRORS"
              version="2.34">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="982">Alias for the #SoupMessage:tls-errors property. (The
verification errors on #SoupMessage:tls-certificate.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="80"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MESSAGE_URI" value="uri" c:type="SOUP_MESSAGE_URI">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="718">Alias for the #SoupMessage:uri property. (The message's
#SoupURI.)</doc>
      <source-position filename="../libsoup/soup-message.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MICRO_VERSION"
              value="0"
              c:type="SOUP_MICRO_VERSION"
              version="2.42">
      <doc xml:space="preserve"
           filename="../libsoup/soup-version.c"
           line="39">Like soup_get_micro_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.</doc>
      <source-position filename="../libsoup/soup-version.h" line="17"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION"
              value="70"
              c:type="SOUP_MINOR_VERSION"
              version="2.42">
      <doc xml:space="preserve"
           filename="../libsoup/soup-version.c"
           line="29">Like soup_get_minor_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.</doc>
      <source-position filename="../libsoup/soup-version.h" line="16"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MULTIPART_INPUT_STREAM"
                    c:identifier="SOUP_MULTIPART_INPUT_STREAM"
                    introspectable="0">
      <source-position filename="../libsoup/soup-multipart-input-stream.h"
                       line="15"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MULTIPART_INPUT_STREAM_CLASS"
                    c:identifier="SOUP_MULTIPART_INPUT_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-multipart-input-stream.h"
                       line="16"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MULTIPART_INPUT_STREAM_GET_CLASS"
                    c:identifier="SOUP_MULTIPART_INPUT_STREAM_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-multipart-input-stream.h"
                       line="19"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="MemoryUse"
                 glib:type-name="SoupMemoryUse"
                 glib:get-type="soup_memory_use_get_type"
                 c:type="SoupMemoryUse">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message-body.c"
           line="32">Describes how #SoupBuffer should use the data passed in by the
caller.

See also soup_buffer_new_with_owner(), which allows to you create a
buffer containing data which is owned by another object.</doc>
      <member name="static"
              value="0"
              c:identifier="SOUP_MEMORY_STATIC"
              glib:nick="static">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="34">The memory is statically allocated and
constant; libsoup can use the passed-in buffer directly and not
need to worry about it being modified or freed.</doc>
      </member>
      <member name="take"
              value="1"
              c:identifier="SOUP_MEMORY_TAKE"
              glib:nick="take">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="37">The caller has allocated the memory for the
#SoupBuffer's use; libsoup will assume ownership of it and free it
(with g_free()) when it is done with it.</doc>
      </member>
      <member name="copy"
              value="2"
              c:identifier="SOUP_MEMORY_COPY"
              glib:nick="copy">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="40">The passed-in data belongs to the caller; the
#SoupBuffer will copy it into new memory, leaving the caller free
to reuse the original memory.</doc>
      </member>
      <member name="temporary"
              value="3"
              c:identifier="SOUP_MEMORY_TEMPORARY"
              glib:nick="temporary">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="43">The passed-in data belongs to the caller,
but will remain valid for the lifetime of the #SoupBuffer. The
difference between this and @SOUP_MEMORY_STATIC is that if you copy
a @SOUP_MEMORY_TEMPORARY buffer, it will make a copy of the memory
as well, rather than reusing the original memory.</doc>
      </member>
    </enumeration>
    <class name="Message"
           c:symbol-prefix="message"
           c:type="SoupMessage"
           parent="GObject.Object"
           glib:type-name="SoupMessage"
           glib:get-type="soup_message_get_type"
           glib:type-struct="MessageClass">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="49">Represents an HTTP message being sent or received.

@status_code will normally be a #SoupStatus value, eg,
%SOUP_STATUS_OK, though of course it might actually be an unknown
status code. @reason_phrase is the actual text returned from the
server, which may or may not correspond to the "standard"
description of @status_code. At any rate, it is almost certainly
not localized, and not very descriptive even if it is in the user's
language; you should not use @reason_phrase in user-visible
messages. Rather, you should look at @status_code, and determine an
end-user-appropriate message based on that and on what you were
trying to do.

As described in the #SoupMessageBody documentation, the
@request_body and @response_body &lt;literal&gt;data&lt;/literal&gt; fields
will not necessarily be filled in at all times. When the body
fields are filled in, they will be terminated with a '\0' byte
(which is not included in the &lt;literal&gt;length&lt;/literal&gt;), so you
can use them as ordinary C strings (assuming that you know that the
body doesn't have any other '\0' bytes).

For a client-side #SoupMessage, @request_body's
&lt;literal&gt;data&lt;/literal&gt; is usually filled in right before libsoup
writes the request to the network, but you should not count on
this; use soup_message_body_flatten() if you want to ensure that
&lt;literal&gt;data&lt;/literal&gt; is filled in. If you are not using
#SoupRequest to read the response, then @response_body's
&lt;literal&gt;data&lt;/literal&gt; will be filled in before
#SoupMessage::finished is emitted. (If you are using #SoupRequest,
then the message body is not accumulated by default, so
@response_body's &lt;literal&gt;data&lt;/literal&gt; will always be %NULL.)

For a server-side #SoupMessage, @request_body's %data will be
filled in before #SoupMessage::got_body is emitted.

To prevent the %data field from being filled in at all (eg, if you
are handling the data from a #SoupMessage::got_chunk, and so don't
need to see it all at the end), call
soup_message_body_set_accumulate() on @response_body or
@request_body as appropriate, passing %FALSE.</doc>
      <source-position filename="../libsoup/soup-message.h" line="59"/>
      <constructor name="new" c:identifier="soup_message_new">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1025">Creates a new empty #SoupMessage, which will connect to @uri</doc>
        <source-position filename="../libsoup/soup-message.h" line="85"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1032">the new #SoupMessage (or %NULL if @uri
could not be parsed).</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </return-value>
        <parameters>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1027">the HTTP method for the created request</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="uri_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1028">the destination endpoint (as a string)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_uri"
                   c:identifier="soup_message_new_from_uri">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1057">Creates a new empty #SoupMessage, which will connect to @uri</doc>
        <source-position filename="../libsoup/soup-message.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1064">the new #SoupMessage</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </return-value>
        <parameters>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1059">the HTTP method for the created request</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1060">the destination endpoint (as a #SoupURI)</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="finished" invoker="finished">
        <source-position filename="../libsoup/soup-message.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="got_body" invoker="got_body">
        <source-position filename="../libsoup/soup-message.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="got_chunk" invoker="got_chunk">
        <source-position filename="../libsoup/soup-message.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="chunk" transfer-ownership="none">
            <type name="Buffer" c:type="SoupBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="got_headers" invoker="got_headers">
        <source-position filename="../libsoup/soup-message.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="got_informational" invoker="got_informational">
        <source-position filename="../libsoup/soup-message.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="restarted" invoker="restarted">
        <source-position filename="../libsoup/soup-message.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="starting" invoker="starting">
        <source-position filename="../libsoup/soup-message.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="wrote_body" invoker="wrote_body">
        <source-position filename="../libsoup/soup-message.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="wrote_chunk" invoker="wrote_chunk">
        <source-position filename="../libsoup/soup-message.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="wrote_headers" invoker="wrote_headers">
        <source-position filename="../libsoup/soup-message.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="wrote_informational" invoker="wrote_informational">
        <source-position filename="../libsoup/soup-message.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_header_handler"
              c:identifier="soup_message_add_header_handler"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1263">Adds a signal handler to @msg for @signal, as with
g_signal_connect(), but the @callback will only be run if @msg's
incoming messages headers (that is, the
&lt;literal&gt;request_headers&lt;/literal&gt; for a client #SoupMessage, or
the &lt;literal&gt;response_headers&lt;/literal&gt; for a server #SoupMessage)
contain a header named @header.</doc>
        <source-position filename="../libsoup/soup-message.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1278">the handler ID from g_signal_connect()</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1265">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="signal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1266">signal to connect the handler to.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="header" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1267">HTTP response header to match against</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" closure="3">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1268">the header handler</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1269">data to pass to @handler_cb</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_status_code_handler"
              c:identifier="soup_message_add_status_code_handler"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1321">Adds a signal handler to @msg for @signal, as with
g_signal_connect(), but the @callback will only be run if @msg has
the status @status_code.

@signal must be a signal that will be emitted after @msg's status
is set. For a client #SoupMessage, this means it can't be a "wrote"
signal. For a server #SoupMessage, this means it can't be a "got"
signal.</doc>
        <source-position filename="../libsoup/soup-message.h" line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1338">the handler ID from g_signal_connect()</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1323">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="signal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1324">signal to connect the handler to.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="status_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1325">status code to match against</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" closure="3">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1326">the header handler</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1327">data to pass to @handler_cb</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="content_sniffed"
              c:identifier="soup_message_content_sniffed">
        <source-position filename="../libsoup/soup-message.h" line="259"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="content_type" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="disable_feature"
              c:identifier="soup_message_disable_feature"
              version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1875">This disables the actions of #SoupSessionFeature&lt;!-- --&gt;s with the
given @feature_type (or a subclass of that type) on @msg, so that
@msg is processed as though the feature(s) hadn't been added to the
session. Eg, passing #SOUP_TYPE_CONTENT_SNIFFER for @feature_type
will disable Content-Type sniffing on the message.

You must call this before queueing @msg on a session; calling it on
a message that has already been queued is undefined. In particular,
you cannot call this on a message that is being requeued after a
redirect or authentication.</doc>
        <source-position filename="../libsoup/soup-message.h" line="217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1877">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="feature_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1878">the #GType of a #SoupSessionFeature</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="finished" c:identifier="soup_message_finished">
        <source-position filename="../libsoup/soup-message.h" line="267"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_address"
              c:identifier="soup_message_get_address"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1712">Gets the address @msg's URI points to. After first setting the
URI on a message, this will be unresolved, although the message's
session will resolve it before sending the message.</doc>
        <source-position filename="../libsoup/soup-message.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1720">the address @msg's URI points to</doc>
          <type name="Address" c:type="SoupAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1714">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_first_party"
              c:identifier="soup_message_get_first_party"
              version="2.30">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1948">Gets @msg's first-party #SoupURI</doc>
        <source-position filename="../libsoup/soup-message.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1954">the @msg's first party #SoupURI</doc>
          <type name="URI" c:type="SoupURI*"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1950">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="soup_message_get_flags">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1545">Gets the flags on @msg</doc>
        <source-position filename="../libsoup/soup-message.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1551">the flags</doc>
          <type name="MessageFlags" c:type="SoupMessageFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1547">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_http_version"
              c:identifier="soup_message_get_http_version">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1596">Gets the HTTP version of @msg. This is the minimum of the
version from the request and the version from the response.</doc>
        <source-position filename="../libsoup/soup-message.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1603">the HTTP version</doc>
          <type name="HTTPVersion" c:type="SoupHTTPVersion"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1598">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_https_status"
              c:identifier="soup_message_get_https_status"
              version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2135">If @msg is using https (or attempted to use https but got
%SOUP_STATUS_SSL_FAILED), this retrieves the #GTlsCertificate
associated with its connection, and the #GTlsCertificateFlags
showing what problems, if any, have been found with that
certificate.

&lt;note&gt;&lt;para&gt;This is only meaningful with messages processed by a #SoupSession and is
not useful for messages received by a #SoupServer&lt;/para&gt;&lt;/note&gt;</doc>
        <source-position filename="../libsoup/soup-message.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="2150">%TRUE if @msg used/attempted https, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2137">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="certificate"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2138">@msg's TLS certificate</doc>
            <type name="Gio.TlsCertificate" c:type="GTlsCertificate**"/>
          </parameter>
          <parameter name="errors"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2139">the verification status of @certificate</doc>
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_is_top_level_navigation"
              c:identifier="soup_message_get_is_top_level_navigation"
              version="2.70">
        <source-position filename="../libsoup/soup-message.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2092">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="soup_message_get_priority"
              version="2.44">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2287">Retrieves the #SoupMessagePriority. If not set this value defaults
to #SOUP_MESSAGE_PRIORITY_NORMAL.</doc>
        <source-position filename="../libsoup/soup-message.h" line="238"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="2294">the priority of the message.</doc>
          <type name="MessagePriority" c:type="SoupMessagePriority"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2289">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_site_for_cookies"
              c:identifier="soup_message_get_site_for_cookies"
              version="2.70">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2002">Gets @msg's site for cookies #SoupURI</doc>
        <source-position filename="../libsoup/soup-message.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="2008">the @msg's site for cookies #SoupURI</doc>
          <type name="URI" c:type="SoupURI*"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2004">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_soup_request"
              c:identifier="soup_message_get_soup_request"
              version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2216">If @msg is associated with a #SoupRequest, this returns that
request. Otherwise it returns %NULL.</doc>
        <source-position filename="../libsoup/soup-message.h" line="221"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="2223">@msg's associated #SoupRequest</doc>
          <type name="Request" c:type="SoupRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2218">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri" c:identifier="soup_message_get_uri">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1692">Gets @msg's URI</doc>
        <source-position filename="../libsoup/soup-message.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1698">the URI @msg is targeted for.</doc>
          <type name="URI" c:type="SoupURI*"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1694">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="got_body" c:identifier="soup_message_got_body">
        <source-position filename="../libsoup/soup-message.h" line="257"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="got_chunk" c:identifier="soup_message_got_chunk">
        <source-position filename="../libsoup/soup-message.h" line="255"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="chunk" transfer-ownership="none">
            <type name="Buffer" c:type="SoupBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="got_headers" c:identifier="soup_message_got_headers">
        <source-position filename="../libsoup/soup-message.h" line="253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="got_informational"
              c:identifier="soup_message_got_informational">
        <source-position filename="../libsoup/soup-message.h" line="251"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_keepalive" c:identifier="soup_message_is_keepalive">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1617">Determines whether or not @msg's connection can be kept alive for
further requests after processing @msg, based on the HTTP version,
Connection header, etc.</doc>
        <source-position filename="../libsoup/soup-message.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message.c"
               line="1625">%TRUE or %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1619">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="restarted" c:identifier="soup_message_restarted">
        <source-position filename="../libsoup/soup-message.h" line="265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_chunk_allocator"
              c:identifier="soup_message_set_chunk_allocator"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1814">Sets an alternate chunk-allocation function to use when reading
@msg's body when using the traditional (ie,
non-#SoupRequest&lt;!-- --&gt;-based) API. Every time data is available
to read, libsoup will call @allocator, which should return a
#SoupBuffer. (See #SoupChunkAllocator for additional details.)
Libsoup will then read data from the network into that buffer, and
update the buffer's &lt;literal&gt;length&lt;/literal&gt; to indicate how much
data it read.

Generally, a custom chunk allocator would be used in conjunction
with soup_message_body_set_accumulate() %FALSE and
#SoupMessage::got_chunk, as part of a strategy to avoid unnecessary
copying of data. However, you cannot assume that every call to the
allocator will be followed by a call to your
#SoupMessage::got_chunk handler; if an I/O error occurs, then the
buffer will be unreffed without ever having been used. If your
buffer-allocation strategy requires special cleanup, use
soup_buffer_new_with_owner() rather than doing the cleanup from the
#SoupMessage::got_chunk handler.

The other thing to remember when using non-accumulating message
bodies is that the buffer passed to the #SoupMessage::got_chunk
handler will be unreffed after the handler returns, just as it
would be in the non-custom-allocated case. If you want to hand the
chunk data off to some other part of your program to use later,
you'll need to ref the #SoupBuffer (or its owner, in the
soup_buffer_new_with_owner() case) to ensure that the data remains
valid.</doc>
        <doc-deprecated xml:space="preserve">#SoupRequest provides a much simpler API that lets you
read the response directly into your own buffers without needing to
mess with callbacks, pausing/unpausing, etc.</doc-deprecated>
        <source-position filename="../libsoup/soup-message.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1816">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="allocator"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1817">the chunk allocator callback</doc>
            <type name="ChunkAllocator" c:type="SoupChunkAllocator"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1818">data to pass to @allocator</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy_notify"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1819">destroy notifier to free @user_data when @msg is
destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_first_party"
              c:identifier="soup_message_set_first_party"
              version="2.30">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1969">Sets @first_party as the main document #SoupURI for @msg. For
details of when and how this is used refer to the documentation for
#SoupCookieJarAcceptPolicy.</doc>
        <source-position filename="../libsoup/soup-message.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1971">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="first_party" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1972">the #SoupURI for the @msg's first party</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags" c:identifier="soup_message_set_flags">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1520">Sets the specified flags on @msg.</doc>
        <source-position filename="../libsoup/soup-message.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1522">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1523">a set of #SoupMessageFlags values</doc>
            <type name="MessageFlags" c:type="SoupMessageFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_http_version"
              c:identifier="soup_message_set_http_version">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1573">Sets the HTTP version on @msg. The default version is
%SOUP_HTTP_1_1. Setting it to %SOUP_HTTP_1_0 will prevent certain
functionality from being used.</doc>
        <source-position filename="../libsoup/soup-message.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1575">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1576">the HTTP version</doc>
            <type name="HTTPVersion" c:type="SoupHTTPVersion"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_top_level_navigation"
              c:identifier="soup_message_set_is_top_level_navigation"
              version="2.70">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2063">See the [same-site spec](https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00)
for more information.</doc>
        <source-position filename="../libsoup/soup-message.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2065">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="is_top_level_navigation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2066">if %TRUE indicate the current request is a top-level navigation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority"
              c:identifier="soup_message_set_priority"
              version="2.44">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2258">Sets the priority of a message. Note that this won't have any
effect unless used before the message is added to the session's
message processing queue.

The message will be placed just before any other previously added
message with lower priority (messages with the same priority are
processed on a FIFO basis).

Setting priorities does not currently work with #SoupSessionSync
(or with synchronous messages on a plain #SoupSession) because in
the synchronous/blocking case, priority ends up being determined
semi-randomly by thread scheduling.</doc>
        <source-position filename="../libsoup/soup-message.h" line="233"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2260">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2261">the #SoupMessagePriority</doc>
            <type name="MessagePriority" c:type="SoupMessagePriority"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_redirect"
              c:identifier="soup_message_set_redirect"
              version="2.38">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2172">Sets @msg's status_code to @status_code and adds a Location header
pointing to @redirect_uri. Use this from a #SoupServer when you
want to redirect the client to another URI.

@redirect_uri can be a relative URI, in which case it is
interpreted relative to @msg's current URI. In particular, if
@redirect_uri is just a path, it will replace the path
&lt;emphasis&gt;and query&lt;/emphasis&gt; of @msg's URI.</doc>
        <source-position filename="../libsoup/soup-message.h" line="198"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2174">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="status_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2175">a 3xx status code</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="redirect_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2176">the URI to redirect @msg to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_request" c:identifier="soup_message_set_request">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1075">Convenience function to set the request body of a #SoupMessage. If
@content_type is %NULL, the request body must be empty as well.</doc>
        <source-position filename="../libsoup/soup-message.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1077">the message</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="content_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1078">MIME Content-Type of the body</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="req_use" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1079">a #SoupMemoryUse describing how to handle @req_body</doc>
            <type name="MemoryUse" c:type="SoupMemoryUse"/>
          </parameter>
          <parameter name="req_body"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1080">
  a data buffer containing the body of the message request.</doc>
            <array length="3" zero-terminated="0" c:type="const char*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="req_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1082">the byte length of @req_body.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_response" c:identifier="soup_message_set_response">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1111">Convenience function to set the response body of a #SoupMessage. If
@content_type is %NULL, the response body must be empty as well.</doc>
        <source-position filename="../libsoup/soup-message.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1113">the message</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="content_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1114">MIME Content-Type of the body</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="resp_use" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1115">a #SoupMemoryUse describing how to handle @resp_body</doc>
            <type name="MemoryUse" c:type="SoupMemoryUse"/>
          </parameter>
          <parameter name="resp_body"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1116">
  a data buffer containing the body of the message response.</doc>
            <array length="3" zero-terminated="0" c:type="const char*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="resp_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1118">the byte length of @resp_body.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_site_for_cookies"
              c:identifier="soup_message_set_site_for_cookies"
              version="2.70">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2023">Sets @site_for_cookies as the policy URL for same-site cookies for @msg.

It is either the URL of the top-level document or %NULL depending on whether the registrable
domain of this document's URL matches the registrable domain of its parent's/opener's
URL. For the top-level document it is set to the document's URL.

See the [same-site spec](https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00)
for more information.</doc>
        <source-position filename="../libsoup/soup-message.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2025">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="site_for_cookies"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="2026">the #SoupURI for the @msg's site for cookies</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status" c:identifier="soup_message_set_status">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1739">Sets @msg's status code to @status_code. If @status_code is a
known value, it will also set @msg's reason_phrase.</doc>
        <source-position filename="../libsoup/soup-message.h" line="189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1741">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="status_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1742">an HTTP status code</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status_full"
              c:identifier="soup_message_set_status_full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1761">Sets @msg's status code and reason phrase.</doc>
        <source-position filename="../libsoup/soup-message.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1763">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="status_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1764">an HTTP status code</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reason_phrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1765">a description of the status</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uri" c:identifier="soup_message_set_uri">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1664">Sets @msg's URI to @uri. If @msg has already been sent and you want
to re-send it with the new URI, you need to call
soup_session_requeue_message().</doc>
        <source-position filename="../libsoup/soup-message.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1666">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="1667">the new #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="starting" c:identifier="soup_message_starting">
        <source-position filename="../libsoup/soup-message.h" line="262"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wrote_body" c:identifier="soup_message_wrote_body">
        <source-position filename="../libsoup/soup-message.h" line="249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wrote_body_data"
              c:identifier="soup_message_wrote_body_data">
        <source-position filename="../libsoup/soup-message.h" line="247"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
          <parameter name="chunk" transfer-ownership="none">
            <type name="Buffer" c:type="SoupBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wrote_chunk" c:identifier="soup_message_wrote_chunk">
        <source-position filename="../libsoup/soup-message.h" line="245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wrote_headers" c:identifier="soup_message_wrote_headers">
        <source-position filename="../libsoup/soup-message.h" line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wrote_informational"
              c:identifier="soup_message_wrote_informational">
        <source-position filename="../libsoup/soup-message.h" line="241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="first-party"
                version="2.30"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="813">The #SoupURI loaded in the application when the message was
queued.</doc>
        <type name="URI"/>
      </property>
      <property name="flags" writable="1" transfer-ownership="none">
        <type name="MessageFlags"/>
      </property>
      <property name="http-version" writable="1" transfer-ownership="none">
        <type name="HTTPVersion"/>
      </property>
      <property name="is-top-level-navigation"
                version="2.70"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="843">Set when the message is navigating between top level domains.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="method" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority" writable="1" transfer-ownership="none">
        <type name="MessagePriority"/>
      </property>
      <property name="reason-phrase" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="request-body" transfer-ownership="none">
        <type name="MessageBody"/>
      </property>
      <property name="request-body-data"
                version="2.46"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="879">The message's HTTP request body, as a #GBytes.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="request-headers" transfer-ownership="none">
        <type name="MessageHeaders"/>
      </property>
      <property name="response-body" transfer-ownership="none">
        <type name="MessageBody"/>
      </property>
      <property name="response-body-data"
                version="2.46"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="930">The message's HTTP response body, as a #GBytes.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="response-headers" transfer-ownership="none">
        <type name="MessageHeaders"/>
      </property>
      <property name="server-side"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="site-for-cookies" writable="1" transfer-ownership="none">
        <type name="URI"/>
      </property>
      <property name="status-code" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="tls-certificate"
                version="2.34"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="967">The #GTlsCertificate associated with the message</doc>
        <type name="Gio.TlsCertificate"/>
      </property>
      <property name="tls-errors"
                version="2.34"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="990">The verification errors on #SoupMessage:tls-certificate</doc>
        <type name="Gio.TlsCertificateFlags"/>
      </property>
      <property name="uri" writable="1" transfer-ownership="none">
        <type name="URI"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="method">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="51">the HTTP method</doc>
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="status_code">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="52">the HTTP status code</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="reason_phrase">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="53">the status phrase associated with @status_code</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="request_body">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="54">the request body</doc>
        <type name="MessageBody" c:type="SoupMessageBody*"/>
      </field>
      <field name="request_headers">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="55">the request headers</doc>
        <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
      </field>
      <field name="response_body">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="56">the response body</doc>
        <type name="MessageBody" c:type="SoupMessageBody*"/>
      </field>
      <field name="response_headers">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="57">the response headers</doc>
        <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
      </field>
      <glib:signal name="content-sniffed" when="first" version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="580">This signal is emitted after #SoupMessage::got-headers, and
before the first #SoupMessage::got-chunk. If content
sniffing is disabled, or no content sniffing will be
performed, due to the sniffer deciding to trust the
Content-Type sent by the server, this signal is emitted
immediately after #SoupMessage::got-headers, and @type is
%NULL.

If the #SoupContentSniffer feature is enabled, and the
sniffer decided to perform sniffing, the first
#SoupMessage::got-chunk emission may be delayed, so that the
sniffer has enough data to correctly sniff the content. It
notified the library user that the content has been
sniffed, and allows it to change the header contents in the
message, if desired.

After this signal is emitted, the data that was spooled so
that sniffing could be done is delivered on the first
emission of #SoupMessage::got-chunk.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="583">the content type that we got from sniffing</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="584">a #GHashTable with the parameters</doc>
            <type name="GLib.HashTable">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="finished" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="654">Emitted when all HTTP processing is finished for a message.
(After #SoupMessage::got_body for client-side messages, or
after #SoupMessage::wrote_body for server-side messages.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="got-body" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="558">Emitted after receiving the complete message body. (For a
server-side message, this means it has received the request
body. For a client-side message, this means it has received
the response body and is nearly done with the message.)

See also soup_message_add_header_handler() and
soup_message_add_status_code_handler(), which can be used
to connect to a subset of emissions of this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="got-chunk" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="528">Emitted after receiving a chunk of a message body. Note
that "chunk" in this context means any subpiece of the
body, not necessarily the specific HTTP 1.1 chunks sent by
the other side.

If you cancel or requeue @msg while processing this signal,
then the current HTTP I/O will be stopped after this signal
emission finished, and @msg's connection will be closed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="531">the just-read chunk</doc>
            <type name="Buffer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="got-headers" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="496">Emitted after receiving all message headers for a message.
(For a client-side message, this is after receiving the
Status-Line and response headers; for a server-side
message, it is after receiving the Request-Line and request
headers.)

See also soup_message_add_header_handler() and
soup_message_add_status_code_handler(), which can be used
to connect to a subset of emissions of this signal.

If you cancel or requeue @msg while processing this signal,
then the current HTTP I/O will be stopped after this signal
emission finished, and @msg's connection will be closed.
(If you need to requeue a message--eg, after handling
authentication or redirection--it is usually better to
requeue it from a #SoupMessage::got_body handler rather
than a #SoupMessage::got_headers handler, so that the
existing HTTP connection can be reused.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="got-informational" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="473">Emitted after receiving a 1xx (Informational) response for
a (client-side) message. The response_headers will be
filled in with the headers associated with the
informational response; however, those header values will
be erased after this signal is done.

If you cancel or requeue @msg while processing this signal,
then the current HTTP I/O will be stopped after this signal
emission finished, and @msg's connection will be closed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="network-event" when="first" version="2.38">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="671">Emitted to indicate that some network-related event
related to @msg has occurred. This essentially proxies the
#GSocketClient::event signal, but only for events that
occur while @msg "owns" the connection; if @msg is sent on
an existing persistent connection, then this signal will
not be emitted. (If you want to force the message to be
sent on a new connection, set the
%SOUP_MESSAGE_NEW_CONNECTION flag on it.)

See #GSocketClient::event for more information on what
the different values of @event correspond to, and what
@connection will be in each case.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="674">the network event</doc>
            <type name="Gio.SocketClientEvent"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="675">the current state of the network connection</doc>
            <type name="Gio.IOStream"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="restarted" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="636">Emitted when a request that was already sent once is now
being sent again (eg, because the first attempt received a
redirection response, or because we needed to use
authentication).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="starting" when="first" version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="619">Emitted just before a message is sent.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="wrote-body" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="453">Emitted immediately after writing the complete body for a
message. (For a client-side message, this means that
libsoup is done writing and is now waiting for the response
from the server. For a server-side message, this means that
libsoup has finished writing the response and is nearly
done with the message.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="wrote-body-data" when="first" version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="429">Emitted immediately after writing a portion of the message
body to the network.

Unlike #SoupMessage::wrote_chunk, this is emitted after
every successful write() call, not only after finishing a
complete "chunk".</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message.c"
                 line="432">the data written</doc>
            <type name="Buffer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="wrote-chunk" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="407">Emitted immediately after writing a body chunk for a message.

Note that this signal is not parallel to
#SoupMessage::got_chunk; it is emitted only when a complete
chunk (added with soup_message_body_append() or
soup_message_body_append_buffer()) has been written. To get
more useful continuous progress information, use
#SoupMessage::wrote_body_data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="wrote-headers" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="389">Emitted immediately after writing the headers for a
message. (For a client-side message, this is after writing
the request headers; for a server-side message, it is after
writing the response headers.)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="wrote-informational" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="373">Emitted immediately after writing a 1xx (Informational)
response for a (server-side) message.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="MessageBody"
            c:type="SoupMessageBody"
            glib:type-name="SoupMessageBody"
            glib:get-type="soup_message_body_get_type"
            c:symbol-prefix="message_body">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message-body.c"
           line="343">A #SoupMessage request or response body.

Note that while @length always reflects the full length of the
message body, @data is normally %NULL, and will only be filled in
after soup_message_body_flatten() is called. For client-side
messages, this automatically happens for the response body after it
has been fully read, unless you set the
%SOUP_MESSAGE_OVERWRITE_CHUNKS flags. Likewise, for server-side
messages, the request body is automatically filled in after being
read.

As an added bonus, when @data is filled in, it is always terminated
with a '\0' byte (which is not reflected in @length).</doc>
      <source-position filename="../libsoup/soup-message-body.h" line="63"/>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="345">the data</doc>
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="346">length of @data</doc>
        <type name="gint64" c:type="goffset"/>
      </field>
      <constructor name="new" c:identifier="soup_message_body_new">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="372">Creates a new #SoupMessageBody. #SoupMessage uses this internally; you
will not normally need to call it yourself.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-body.c"
               line="378">a new #SoupMessageBody.</doc>
          <type name="MessageBody" c:type="SoupMessageBody*"/>
        </return-value>
      </constructor>
      <method name="append"
              c:identifier="soup_message_body_append"
              shadowed-by="append_take">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="475">Appends @length bytes from @data to @body according to @use.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="477">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
          <parameter name="use" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="478">how to use @data</doc>
            <type name="MemoryUse" c:type="SoupMemoryUse"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="479">data to append</doc>
            <array length="2" zero-terminated="0" c:type="gconstpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="480">length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_buffer"
              c:identifier="soup_message_body_append_buffer">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="515">Appends the data from @buffer to @body. (#SoupMessageBody uses
#SoupBuffers internally, so this is normally a constant-time
operation that doesn't actually require copying the data in
@buffer.)</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="517">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="518">a #SoupBuffer</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_take"
              c:identifier="soup_message_body_append_take"
              shadows="append"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="494">Appends @length bytes from @data to @body.

This function is exactly equivalent to soup_message_body_append()
with %SOUP_MEMORY_TAKE as second argument; it exists mainly for
convenience and simplifying language bindings.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="496">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="497">data to append</doc>
            <array length="1" zero-terminated="0" c:type="guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="498">length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete" c:identifier="soup_message_body_complete">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="555">Tags @body as being complete; Call this when using chunked encoding
after you have appended the last chunk.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="557">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="flatten" c:identifier="soup_message_body_flatten">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="568">Fills in @body's data field with a buffer containing all of the
data in @body (plus an additional '\0' byte not counted by @body's
length field).</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-body.c"
               line="576">a #SoupBuffer containing the same data as @body.
(You must free this buffer if you do not want it.)</doc>
          <type name="Buffer" c:type="SoupBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="570">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="soup_message_body_free">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="733">Frees @body. You will not normally need to use this, as
#SoupMessage frees its associated message bodies automatically.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="735">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_accumulate"
              c:identifier="soup_message_body_get_accumulate"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="437">Gets the accumulate flag on @body; see
soup_message_body_set_accumulate() for details.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-body.c"
               line="444">the accumulate flag for @body.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="439">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chunk" c:identifier="soup_message_body_get_chunk">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="610">Gets a #SoupBuffer containing data from @body starting at @offset.
The size of the returned chunk is unspecified. You can iterate
through the entire body by first calling
soup_message_body_get_chunk() with an offset of 0, and then on each
successive call, increment the offset by the length of the
previously-returned chunk.

If @offset is greater than or equal to the total length of @body,
then the return value depends on whether or not
soup_message_body_complete() has been called or not; if it has,
then soup_message_body_get_chunk() will return a 0-length chunk
(indicating the end of @body). If it has not, then
soup_message_body_get_chunk() will return %NULL (indicating that
@body may still potentially have more data, but that data is not
currently available).</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="99"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-body.c"
               line="631">a #SoupBuffer, or %NULL.</doc>
          <type name="Buffer" c:type="SoupBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="612">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="613">an offset</doc>
            <type name="gint64" c:type="goffset"/>
          </parameter>
        </parameters>
      </method>
      <method name="got_chunk"
              c:identifier="soup_message_body_got_chunk"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="661">Handles the #SoupMessageBody part of receiving a chunk of data from
the network. Normally this means appending @chunk to @body, exactly
as with soup_message_body_append_buffer(), but if you have set
@body's accumulate flag to %FALSE, then that will not happen.

This is a low-level method which you should not normally need to
use.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="663">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
          <parameter name="chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="664">a #SoupBuffer received from the network</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accumulate"
              c:identifier="soup_message_body_set_accumulate"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="392">Sets or clears the accumulate flag on @body. (The default value is
%TRUE.) If set to %FALSE, @body's %data field will not be filled in
after the body is fully sent/received, and the chunks that make up
@body may be discarded when they are no longer needed.

In particular, if you set this flag to %FALSE on an "incoming"
message body (that is, the #SoupMessage:response_body of a
client-side message, or #SoupMessage:request_body of a server-side
message), this will cause each chunk of the body to be discarded
after its corresponding #SoupMessage::got_chunk signal is emitted.
(This is equivalent to setting the deprecated
%SOUP_MESSAGE_OVERWRITE_CHUNKS flag on the message.)

If you set this flag to %FALSE on the #SoupMessage:response_body of
a server-side message, it will cause each chunk of the body to be
discarded after its corresponding #SoupMessage::wrote_chunk signal
is emitted.

If you set the flag to %FALSE on the #SoupMessage:request_body of a
client-side message, it will block the accumulation of chunks into
@body's %data field, but it will not normally cause the chunks to
be discarded after being written like in the server-side
#SoupMessage:response_body case, because the request body needs to
be kept around in case the request needs to be sent a second time
due to redirection or authentication. However, if you set the
%SOUP_MESSAGE_CAN_REBUILD flag on the message, then the chunks will
be discarded, and you will be responsible for recreating the
request body after the #SoupMessage::restarted signal is emitted.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="394">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
          <parameter name="accumulate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="395">whether or not to accumulate body chunks in @body</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="truncate" c:identifier="soup_message_body_truncate">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="532">Deletes all of the data in @body.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="534">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wrote_chunk"
              c:identifier="soup_message_body_wrote_chunk"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-body.c"
             line="687">Handles the #SoupMessageBody part of writing a chunk of data to the
network. Normally this is a no-op, but if you have set @body's
accumulate flag to %FALSE, then this will cause @chunk to be
discarded to free up memory.

This is a low-level method which you should not need to use, and
there are further restrictions on its proper use which are not
documented here.</doc>
        <source-position filename="../libsoup/soup-message-body.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="689">a #SoupMessageBody</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </instance-parameter>
          <parameter name="chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-body.c"
                 line="690">a #SoupBuffer returned from soup_message_body_get_chunk()</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="MessageClass"
            c:type="SoupMessageClass"
            glib:is-gtype-struct-for="Message">
      <source-position filename="../libsoup/soup-message.h" line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="wrote_informational">
        <callback name="wrote_informational">
          <source-position filename="../libsoup/soup-message.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="wrote_headers">
        <callback name="wrote_headers">
          <source-position filename="../libsoup/soup-message.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="wrote_chunk">
        <callback name="wrote_chunk">
          <source-position filename="../libsoup/soup-message.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="wrote_body">
        <callback name="wrote_body">
          <source-position filename="../libsoup/soup-message.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="got_informational">
        <callback name="got_informational">
          <source-position filename="../libsoup/soup-message.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="got_headers">
        <callback name="got_headers">
          <source-position filename="../libsoup/soup-message.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="got_chunk">
        <callback name="got_chunk">
          <source-position filename="../libsoup/soup-message.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="chunk" transfer-ownership="none">
              <type name="Buffer" c:type="SoupBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="got_body">
        <callback name="got_body">
          <source-position filename="../libsoup/soup-message.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="restarted">
        <callback name="restarted">
          <source-position filename="../libsoup/soup-message.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="finished">
        <callback name="finished">
          <source-position filename="../libsoup/soup-message.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="starting">
        <callback name="starting">
          <source-position filename="../libsoup/soup-message.h" line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-message.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-message.h" line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-message.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="MessageFlags"
              glib:type-name="SoupMessageFlags"
              glib:get-type="soup_message_flags_get_type"
              c:type="SoupMessageFlags">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="1475">Various flags that can be set on a #SoupMessage to alter its
behavior.</doc>
      <member name="no_redirect"
              value="2"
              c:identifier="SOUP_MESSAGE_NO_REDIRECT"
              glib:nick="no-redirect">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1477">The session should not follow redirect
  (3xx) responses received by this message.</doc>
      </member>
      <member name="can_rebuild"
              value="4"
              c:identifier="SOUP_MESSAGE_CAN_REBUILD"
              glib:nick="can-rebuild">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1479">The caller will rebuild the request
  body if the message is restarted; see
  soup_message_body_set_accumulate() for more details.</doc>
      </member>
      <member name="overwrite_chunks"
              value="8"
              c:identifier="SOUP_MESSAGE_OVERWRITE_CHUNKS"
              glib:nick="overwrite-chunks">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1482">Deprecated: equivalent to calling
  soup_message_body_set_accumulate() on the incoming message body
  (ie, #SoupMessage:response_body for a client-side request),
  passing %FALSE.</doc>
      </member>
      <member name="content_decoded"
              value="16"
              c:identifier="SOUP_MESSAGE_CONTENT_DECODED"
              glib:nick="content-decoded">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1486">Set by #SoupContentDecoder to
  indicate that it has removed the Content-Encoding on a message (and
  so headers such as Content-Length may no longer accurately describe
  the body).</doc>
      </member>
      <member name="certificate_trusted"
              value="32"
              c:identifier="SOUP_MESSAGE_CERTIFICATE_TRUSTED"
              glib:nick="certificate-trusted">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1490">if set after an https response
  has been received, indicates that the server's SSL certificate is
  trusted according to the session's CA.</doc>
      </member>
      <member name="new_connection"
              value="64"
              c:identifier="SOUP_MESSAGE_NEW_CONNECTION"
              glib:nick="new-connection">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1493">Requests that the message should be
  sent on a newly-created connection, not reusing an existing
  persistent connection. Note that messages with non-idempotent
  #SoupMessage:method&lt;!-- --&gt;s behave this way by default, unless
  #SOUP_MESSAGE_IDEMPOTENT is set.</doc>
      </member>
      <member name="idempotent"
              value="128"
              c:identifier="SOUP_MESSAGE_IDEMPOTENT"
              glib:nick="idempotent">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1498">The message is considered idempotent,
  regardless its #SoupMessage:method, and allows reuse of existing
  idle connections, instead of always requiring a new one, unless
  #SOUP_MESSAGE_NEW_CONNECTION is set.</doc>
      </member>
      <member name="ignore_connection_limits"
              value="256"
              c:identifier="SOUP_MESSAGE_IGNORE_CONNECTION_LIMITS"
              glib:nick="ignore-connection-limits">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1502">Request that a new connection is
  created for the message if there aren't idle connections available
  and it's not possible to create new connections due to any of the
  connection limits has been reached. If a dedicated connection is
  eventually created for this message, it will be dropped when the
  message finishes. Since 2.50</doc>
      </member>
      <member name="do_not_use_auth_cache"
              value="512"
              c:identifier="SOUP_MESSAGE_DO_NOT_USE_AUTH_CACHE"
              glib:nick="do-not-use-auth-cache">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="1508">The #SoupAuthManager should not use
  the credentials cache for this message, neither to use cached credentials
  to automatically authenticate this message nor to cache the credentials
  after the message is successfully authenticated. This applies to both server
  and proxy authentication. Note that #SoupSession::authenticate signal will
  be emitted, if you want to disable authentication for a message use
  soup_message_disable_feature() passing #SOUP_TYPE_AUTH_MANAGER instead. Since 2.58</doc>
      </member>
    </bitfield>
    <record name="MessageHeaders"
            c:type="SoupMessageHeaders"
            glib:type-name="SoupMessageHeaders"
            glib:get-type="soup_message_headers_get_type"
            c:symbol-prefix="message_headers">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message-headers.c"
           line="27">The HTTP message headers associated with a request or response.</doc>
      <source-position filename="../libsoup/soup-message-headers.h" line="13"/>
      <constructor name="new" c:identifier="soup_message_headers_new">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="65">Creates a #SoupMessageHeaders. (#SoupMessage does this
automatically for its own headers. You would only need to use this
method if you are manually parsing or generating message headers.)</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="25"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="73">a new #SoupMessageHeaders</doc>
          <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="67">the type of headers</doc>
            <type name="MessageHeadersType" c:type="SoupMessageHeadersType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append" c:identifier="soup_message_headers_append">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="180">Appends a new header with name @name and value @value to @hdrs. (If
there is an existing header with name @name, then this creates a
second one, which is only allowed for list-valued headers; see also
soup_message_headers_replace().)

The caller is expected to make sure that @name and @value are
syntactically correct.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="182">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="183">the header name to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="184">the new value of @name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clean_connection_headers"
              c:identifier="soup_message_headers_clean_connection_headers"
              version="2.36">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="155">Removes all the headers listed in the Connection header.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="157">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="soup_message_headers_clear">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="133">Clears @hdrs.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="135">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="soup_message_headers_foreach">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="558">Calls @func once for each header value in @hdrs.

Beware that unlike soup_message_headers_get(), this processes the
headers in exactly the way they were added, rather than
concatenating multiple same-named headers into a single value.
(This is intentional; it ensures that if you call
soup_message_headers_append() multiple times with the same name,
then the I/O code will output multiple copies of the header when
sending the message to the remote implementation, which may be
required for interoperability in some cases.)

You may not modify the headers from @func.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="560">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="561">callback function to run for each header</doc>
            <type name="MessageHeadersForeachFunc"
                  c:type="SoupMessageHeadersForeachFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="562">data to pass to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="soup_message_headers_free">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="97">Frees @hdrs.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="99">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free_ranges"
              c:identifier="soup_message_headers_free_ranges"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="1094">Frees the array of ranges returned from soup_message_headers_get_ranges().</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1096">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="ranges" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1097">an array of #SoupRange</doc>
            <type name="Range" c:type="SoupRange*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get"
              c:identifier="soup_message_headers_get"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="455">Gets the value of header @name in @hdrs.

This method was supposed to work correctly for both single-valued
and list-valued headers, but because some HTTP clients/servers
mistakenly send multiple copies of headers that are supposed to be
single-valued, it sometimes returns incorrect results. To fix this,
the methods soup_message_headers_get_one() and
soup_message_headers_get_list() were introduced, so callers can
explicitly state which behavior they are expecting.</doc>
        <doc-deprecated xml:space="preserve">Use soup_message_headers_get_one() or
soup_message_headers_get_list() instead.</doc-deprecated>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="51"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="470">as with soup_message_headers_get_list().</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="457">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="458">header name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_content_disposition"
              c:identifier="soup_message_headers_get_content_disposition"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="1399">Looks up the "Content-Disposition" header in @hdrs, parses it, and
returns its value in *@disposition and *@params. @params can be
%NULL if you are only interested in the disposition-type.

In HTTP, the most common use of this header is to set a
disposition-type of "attachment", to suggest to the browser that a
response should be saved to disk rather than displayed in the
browser. If @params contains a "filename" parameter, this is a
suggestion of a filename to use. (If the parameter value in the
header contains an absolute or relative path, libsoup will truncate
it down to just the final path component, so you do not need to
test this yourself.)

Content-Disposition is also used in "multipart/form-data", however
this is handled automatically by #SoupMultipart and the associated
form methods.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="1424">%TRUE if @hdrs contains a "Content-Disposition"
header, %FALSE if not (in which case *@disposition and *@params
will be unchanged).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1401">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="disposition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1402">return location for the
disposition-type, or %NULL</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="params"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1404">return
location for the Content-Disposition parameters, or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_content_length"
              c:identifier="soup_message_headers_get_content_length">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="795">Gets the message body length that @hdrs declare. This will only
be non-0 if soup_message_headers_get_encoding() returns
%SOUP_ENCODING_CONTENT_LENGTH.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="803">the message body length declared by @hdrs.</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="797">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content_range"
              c:identifier="soup_message_headers_get_content_range"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="1176">Parses @hdrs's Content-Range header and returns it in @start,
@end, and @total_length. If the total length field in the header
was specified as "*", then @total_length will be set to -1.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="1188">%TRUE if @hdrs contained a "Content-Range" header
containing a byte range which could be parsed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1178">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="start"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1179">return value for the start of the range</doc>
            <type name="gint64" c:type="goffset*"/>
          </parameter>
          <parameter name="end"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1180">return value for the end of the range</doc>
            <type name="gint64" c:type="goffset*"/>
          </parameter>
          <parameter name="total_length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1181">return value for the total length of the
resource, or %NULL if you don't care.</doc>
            <type name="gint64" c:type="goffset*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_content_type"
              c:identifier="soup_message_headers_get_content_type"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="1349">Looks up the "Content-Type" header in @hdrs, parses it, and returns
its value in *@content_type and *@params. @params can be %NULL if you
are only interested in the content type itself.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="163"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="1360">a string with the value of the
"Content-Type" header or %NULL if @hdrs does not contain that
header or it cannot be parsed (in which case *@params will be
unchanged).</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1351">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="params"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1352">
  return location for the Content-Type parameters (eg, "charset"), or
  %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_encoding"
              c:identifier="soup_message_headers_get_encoding">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="715">Gets the message body encoding that @hdrs declare. This may not
always correspond to the encoding used on the wire; eg, a HEAD
response may declare a Content-Length or Transfer-Encoding, but
it will never actually include a body.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="724">the encoding declared by @hdrs.</doc>
          <type name="Encoding" c:type="SoupEncoding"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="717">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expectations"
              c:identifier="soup_message_headers_get_expectations">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="866">Gets the expectations declared by @hdrs's "Expect" header.
Currently this will either be %SOUP_EXPECTATION_CONTINUE or
%SOUP_EXPECTATION_UNRECOGNIZED.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="874">the contents of @hdrs's "Expect" header</doc>
          <type name="Expectation" c:type="SoupExpectation"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="868">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_headers_type"
              c:identifier="soup_message_headers_get_headers_type"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="117">Gets the type of headers.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="123">the header's type.</doc>
          <type name="MessageHeadersType" c:type="SoupMessageHeadersType"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="119">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_list"
              c:identifier="soup_message_headers_get_list"
              version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="396">Gets the value of header @name in @hdrs. Use this for headers whose
values are comma-delimited lists, and which are therefore allowed
to appear multiple times in the headers. For non-list-valued
headers, use soup_message_headers_get_one().

If @name appears multiple times in @hdrs,
soup_message_headers_get_list() will concatenate all of the values
together, separated by commas. This is sometimes awkward to parse
(eg, WWW-Authenticate, Set-Cookie), but you have to be able to deal
with it anyway, because the HTTP spec explicitly states that this
transformation is allowed, and so an upstream proxy could do the
same thing.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="58"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="414">the header's value or %NULL if not found.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="398">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="399">header name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_one"
              c:identifier="soup_message_headers_get_one"
              version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="308">Gets the value of header @name in @hdrs. Use this for headers whose
values are &lt;emphasis&gt;not&lt;/emphasis&gt; comma-delimited lists, and
which therefore can only appear at most once in the headers. For
list-valued headers, use soup_message_headers_get_list().

If @hdrs does erroneously contain multiple copies of the header, it
is not defined which one will be returned. (Ideally, it will return
whichever one makes libsoup most compatible with other HTTP
implementations.)</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="323">the header's value or %NULL if not found.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="310">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="311">header name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ranges"
              c:identifier="soup_message_headers_get_ranges"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="1038">Parses @hdrs's Range header and returns an array of the requested
byte ranges. The returned array must be freed with
soup_message_headers_free_ranges().

If @total_length is non-0, its value will be used to adjust the
returned ranges to have explicit start and end values, and the
returned ranges will be sorted and non-overlapping. If
@total_length is 0, then some ranges may have an end value of -1,
as described under #SoupRange, and some of the ranges may be
redundant.

Beware that even if given a @total_length, this function does not
check that the ranges are satisfiable.

&lt;note&gt;&lt;para&gt;
#SoupServer has built-in handling for range requests. If your
server handler returns a %SOUP_STATUS_OK response containing the
complete response body (rather than pausing the message and
returning some of the response body later), and there is a Range
header in the request, then libsoup will automatically convert the
response to a %SOUP_STATUS_PARTIAL_CONTENT response containing only
the range(s) requested by the client.

The only time you need to process the Range header yourself is if
either you need to stream the response body rather than returning
it all at once, or you do not already have the complete response
body available, and only want to generate the parts that were
actually requested by the client.
&lt;/para&gt;&lt;/note&gt;</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="1076">%TRUE if @hdrs contained a syntactically-valid
"Range" header, %FALSE otherwise (in which case @range and @length
will not be set).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1040">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="total_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1041">the total_length of the response body</doc>
            <type name="gint64" c:type="goffset"/>
          </parameter>
          <parameter name="ranges"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1042">return location for an array
of #SoupRange</doc>
            <array length="2" zero-terminated="0" c:type="SoupRange**">
              <type name="Range" c:type="SoupRange*"/>
            </array>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1044">the length of the returned array</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="header_contains"
              c:identifier="soup_message_headers_header_contains"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="343">Checks whether the list-valued header @name is present in @hdrs,
and contains a case-insensitive match for @token.

(If @name is present in @hdrs, then this is equivalent to calling
soup_header_contains() on its value.)</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="355">%TRUE if the header is present and contains @token,
  %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="345">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="346">header name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="347">token to look for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="header_equals"
              c:identifier="soup_message_headers_header_equals"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="371">Checks whether the header @name is present in @hdrs and is
(case-insensitively) equal to @value.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="380">%TRUE if the header is present and its value is
  @value, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="373">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="374">header name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="375">expected value</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="soup_message_headers_remove">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="280">Removes @name from @hdrs. If there are multiple values for @name,
they are all removed.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="282">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="283">the header name to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace" c:identifier="soup_message_headers_replace">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="232">Replaces the value of the header @name in @hdrs with @value. (See
also soup_message_headers_append().)

The caller is expected to make sure that @name and @value are
syntactically correct.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="234">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="235">the header name to replace</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="236">the new value of @name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_content_disposition"
              c:identifier="soup_message_headers_set_content_disposition"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="1454">Sets the "Content-Disposition" header in @hdrs to @disposition,
optionally with additional parameters specified in @params.

See soup_message_headers_get_content_disposition() for a discussion
of how Content-Disposition is used in HTTP.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1456">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="disposition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1457">the disposition-type</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1458">additional
parameters, or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_content_length"
              c:identifier="soup_message_headers_set_content_length">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="817">Sets the message body length that @hdrs will declare, and sets
@hdrs's encoding to %SOUP_ENCODING_CONTENT_LENGTH.

You do not normally need to call this; if @hdrs is set to use
Content-Length encoding, libsoup will automatically set its
Content-Length header for you immediately before sending the
headers. One situation in which this method is useful is when
generating the response to a HEAD request; Calling
soup_message_headers_set_content_length() allows you to put the
correct content length into the response without needing to waste
memory by filling in a response body which won't actually be sent.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="819">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="content_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="820">the message body length</doc>
            <type name="gint64" c:type="goffset"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_content_range"
              c:identifier="soup_message_headers_set_content_range"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="1230">Sets @hdrs's Content-Range header according to the given values.
(Note that @total_length is the total length of the entire resource
that this is a range of, not simply @end - @start + 1.)

&lt;note&gt;&lt;para&gt;
#SoupServer has built-in handling for range requests, and you do
not normally need to call this function youself. See
soup_message_headers_get_ranges() for more details.
&lt;/para&gt;&lt;/note&gt;</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="156"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1232">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1233">the start of the range</doc>
            <type name="gint64" c:type="goffset"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1234">the end of the range</doc>
            <type name="gint64" c:type="goffset"/>
          </parameter>
          <parameter name="total_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1235">the total length of the resource, or -1 if unknown</doc>
            <type name="gint64" c:type="goffset"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_content_type"
              c:identifier="soup_message_headers_set_content_type"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="1379">Sets the "Content-Type" header in @hdrs to @content_type,
optionally with additional parameters specified in @params.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="166"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1381">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="content_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1382">the MIME type</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1383">additional
parameters, or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_encoding"
              c:identifier="soup_message_headers_set_encoding">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="756">Sets the message body encoding that @hdrs will declare. In particular,
you should use this if you are going to send a request or response in
chunked encoding.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="758">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="encoding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="759">a #SoupEncoding</doc>
            <type name="Encoding" c:type="SoupEncoding"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expectations"
              c:identifier="soup_message_headers_set_expectations">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="882">Sets @hdrs's "Expect" header according to @expectations.

Currently %SOUP_EXPECTATION_CONTINUE is the only known expectation
value. You should set this value on a request if you are sending a
large message body (eg, via POST or PUT), and want to give the
server a chance to reject the request after seeing just the headers
(eg, because it will require authentication before allowing you to
post, or because you're POSTing to a URL that doesn't exist). This
saves you from having to transmit the large request body when the
server is just going to ignore it anyway.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="884">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="expectations" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="885">the expectations to set</doc>
            <type name="Expectation" c:type="SoupExpectation"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_range"
              c:identifier="soup_message_headers_set_range"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="1150">Sets @hdrs's Range header to request the indicated range.
@start and @end are interpreted as in a #SoupRange.

If you need to request multiple ranges, use
soup_message_headers_set_ranges().</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1152">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1153">the start of the range to request</doc>
            <type name="gint64" c:type="goffset"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1154">the end of the range to request</doc>
            <type name="gint64" c:type="goffset"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ranges"
              c:identifier="soup_message_headers_set_ranges"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="1110">Sets @hdrs's Range header to request the indicated ranges. (If you
only want to request a single range, you can use
soup_message_headers_set_range().)</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1112">a #SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </instance-parameter>
          <parameter name="ranges" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1113">an array of #SoupRange</doc>
            <type name="Range" c:type="SoupRange*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="1114">the length of @range</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <callback name="MessageHeadersForeachFunc"
              c:type="SoupMessageHeadersForeachFunc">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message-headers.c"
           line="549">The callback passed to soup_message_headers_foreach().</doc>
      <source-position filename="../libsoup/soup-message-headers.h" line="69"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="551">the header name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="552">the header value</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="553">the data passed to soup_message_headers_foreach()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MessageHeadersIter" c:type="SoupMessageHeadersIter">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message-headers.c"
           line="481">An opaque type used to iterate over a %SoupMessageHeaders
structure.

After intializing the iterator with
soup_message_headers_iter_init(), call
soup_message_headers_iter_next() to fetch data from it.

You may not modify the headers while iterating over them.</doc>
      <source-position filename="../libsoup/soup-message-headers.h" line="84"/>
      <field name="dummy" readable="0" private="1">
        <array zero-terminated="0" fixed-size="3">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <method name="next" c:identifier="soup_message_headers_iter_next">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="517">Yields the next name/value pair in the %SoupMessageHeaders being
iterated by @iter. If @iter has already yielded the last header,
then soup_message_headers_iter_next() will return %FALSE and @name
and @value will be unchanged.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="530">%TRUE if another name and value were returned, %FALSE
if the end of the headers has been reached.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter"
                              direction="inout"
                              caller-allocates="0"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="519">a %SoupMessageHeadersIter</doc>
            <type name="MessageHeadersIter" c:type="SoupMessageHeadersIter*"/>
          </instance-parameter>
          <parameter name="name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="520">pointer to a variable to return
the header name in</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="522">pointer to a variable to return
the header value in</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
        </parameters>
      </method>
      <function name="init" c:identifier="soup_message_headers_iter_init">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="499">Initializes @iter for iterating @hdrs.</doc>
        <source-position filename="../libsoup/soup-message-headers.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="501">a pointer to a %SoupMessageHeadersIter
structure</doc>
            <type name="MessageHeadersIter" c:type="SoupMessageHeadersIter*"/>
          </parameter>
          <parameter name="hdrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-message-headers.c"
                 line="503">a %SoupMessageHeaders</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="MessageHeadersType"
                 glib:type-name="SoupMessageHeadersType"
                 glib:get-type="soup_message_headers_type_get_type"
                 c:type="SoupMessageHeadersType">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message-headers.c"
           line="33">Value passed to soup_message_headers_new() to set certain default
behaviors.</doc>
      <member name="request"
              value="0"
              c:identifier="SOUP_MESSAGE_HEADERS_REQUEST"
              glib:nick="request">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="35">request headers</doc>
      </member>
      <member name="response"
              value="1"
              c:identifier="SOUP_MESSAGE_HEADERS_RESPONSE"
              glib:nick="response">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="36">response headers</doc>
      </member>
      <member name="multipart"
              value="2"
              c:identifier="SOUP_MESSAGE_HEADERS_MULTIPART"
              glib:nick="multipart">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="37">multipart body part headers</doc>
      </member>
    </enumeration>
    <enumeration name="MessagePriority"
                 glib:type-name="SoupMessagePriority"
                 glib:get-type="soup_message_priority_get_type"
                 c:type="SoupMessagePriority">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message.c"
           line="2238">Priorities that can be set on a #SoupMessage to instruct the
message queue to process it before any other message with lower
priority.</doc>
      <member name="very_low"
              value="0"
              c:identifier="SOUP_MESSAGE_PRIORITY_VERY_LOW"
              glib:nick="very-low">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2240">The lowest priority, the messages
  with this priority will be the last ones to be attended.</doc>
      </member>
      <member name="low"
              value="1"
              c:identifier="SOUP_MESSAGE_PRIORITY_LOW"
              glib:nick="low">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2242">Use this for low priority messages, a
  #SoupMessage with the default priority will be processed first.</doc>
      </member>
      <member name="normal"
              value="2"
              c:identifier="SOUP_MESSAGE_PRIORITY_NORMAL"
              glib:nick="normal">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2244">The default priotity, this is the
  priority assigned to the #SoupMessage by default.</doc>
      </member>
      <member name="high"
              value="3"
              c:identifier="SOUP_MESSAGE_PRIORITY_HIGH"
              glib:nick="high">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2246">High priority, a #SoupMessage with
  this priority will be processed before the ones with the default
  priority.</doc>
      </member>
      <member name="very_high"
              value="4"
              c:identifier="SOUP_MESSAGE_PRIORITY_VERY_HIGH"
              glib:nick="very-high">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message.c"
             line="2249">The highest priority, use this
  for very urgent #SoupMessage as they will be the first ones to be
  attended.</doc>
      </member>
    </enumeration>
    <record name="MessageQueue" c:type="SoupMessageQueue" disguised="1">
      <source-position filename="../libsoup/soup-types.h" line="39"/>
    </record>
    <record name="MessageQueueItem"
            c:type="SoupMessageQueueItem"
            disguised="1">
      <source-position filename="../libsoup/soup-types.h" line="40"/>
    </record>
    <record name="Multipart"
            c:type="SoupMultipart"
            version="2.26"
            glib:type-name="SoupMultipart"
            glib:get-type="soup_multipart_get_type"
            c:symbol-prefix="multipart">
      <doc xml:space="preserve"
           filename="../libsoup/soup-multipart.c"
           line="24">Represents a multipart HTTP message body, parsed according to the
syntax of RFC 2046. Of particular interest to HTTP are
&lt;literal&gt;multipart/byte-ranges&lt;/literal&gt; and
&lt;literal&gt;multipart/form-data&lt;/literal&gt;.

Although the headers of a #SoupMultipart body part will contain the
full headers from that body part, libsoup does not interpret them
according to MIME rules. For example, each body part is assumed to
have "binary" Content-Transfer-Encoding, even if its headers
explicitly state otherwise. In other words, don't try to use
#SoupMultipart for handling real MIME multiparts.</doc>
      <source-position filename="../libsoup/soup-multipart.h" line="15"/>
      <constructor name="new" c:identifier="soup_multipart_new" version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart.c"
             line="77">Creates a new empty #SoupMultipart with a randomly-generated
boundary string. Note that @mime_type must be the full MIME type,
including "multipart/".</doc>
        <source-position filename="../libsoup/soup-multipart.h" line="22"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-multipart.c"
               line="85">a new empty #SoupMultipart of the given @mime_type</doc>
          <type name="Multipart" c:type="SoupMultipart*"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="79">the MIME type of the multipart to create.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_message"
                   c:identifier="soup_multipart_new_from_message"
                   version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart.c"
             line="122">Parses @headers and @body to form a new #SoupMultipart</doc>
        <source-position filename="../libsoup/soup-multipart.h" line="24"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-multipart.c"
               line="129">a new #SoupMultipart (or %NULL if the
message couldn't be parsed or wasn't multipart).</doc>
          <type name="Multipart" c:type="SoupMultipart*"/>
        </return-value>
        <parameters>
          <parameter name="headers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="124">the headers of the HTTP message to parse</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </parameter>
          <parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="125">the body of the HTTP message to parse</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append_form_file"
              c:identifier="soup_multipart_append_form_file"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart.c"
             line="347">Adds a new MIME part containing @body to @multipart, using
"Content-Disposition: form-data", as per the HTML forms
specification. See soup_form_request_new_from_multipart() for more
details.</doc>
        <source-position filename="../libsoup/soup-multipart.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="349">a multipart (presumably of type "multipart/form-data")</doc>
            <type name="Multipart" c:type="SoupMultipart*"/>
          </instance-parameter>
          <parameter name="control_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="350">the name of the control associated with this file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="351">the name of the file, or %NULL if not known</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="352">the MIME type of the file, or %NULL if not known</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="353">the file data</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_form_string"
              c:identifier="soup_multipart_append_form_string"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart.c"
             line="322">Adds a new MIME part containing @data to @multipart, using
"Content-Disposition: form-data", as per the HTML forms
specification. See soup_form_request_new_from_multipart() for more
details.</doc>
        <source-position filename="../libsoup/soup-multipart.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="324">a multipart (presumably of type "multipart/form-data")</doc>
            <type name="Multipart" c:type="SoupMultipart*"/>
          </instance-parameter>
          <parameter name="control_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="325">the name of the control associated with @data</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="326">the body data</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_part"
              c:identifier="soup_multipart_append_part"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart.c"
             line="270">Adds a new MIME part to @multipart with the given headers and body.
(The multipart will make its own copies of @headers and @body, so
you should free your copies if you are not using them for anything
else.)</doc>
        <source-position filename="../libsoup/soup-multipart.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="272">a #SoupMultipart</doc>
            <type name="Multipart" c:type="SoupMultipart*"/>
          </instance-parameter>
          <parameter name="headers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="273">the MIME part headers</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </parameter>
          <parameter name="body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="274">the MIME part body</doc>
            <type name="Buffer" c:type="SoupBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="soup_multipart_free" version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart.c"
             line="452">Frees @multipart</doc>
        <source-position filename="../libsoup/soup-multipart.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="454">a #SoupMultipart</doc>
            <type name="Multipart" c:type="SoupMultipart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_length"
              c:identifier="soup_multipart_get_length"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart.c"
             line="227">Gets the number of body parts in @multipart</doc>
        <source-position filename="../libsoup/soup-multipart.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-multipart.c"
               line="233">the number of body parts in @multipart</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="229">a #SoupMultipart</doc>
            <type name="Multipart" c:type="SoupMultipart*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_part"
              c:identifier="soup_multipart_get_part"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart.c"
             line="243">Gets the indicated body part from @multipart.</doc>
        <source-position filename="../libsoup/soup-multipart.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-multipart.c"
               line="254">%TRUE on success, %FALSE if @part is out of range (in
which case @headers and @body won't be set)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="245">a #SoupMultipart</doc>
            <type name="Multipart" c:type="SoupMultipart*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="246">the part number to get (counting from 0)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="headers"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="247">return location for the MIME part
headers</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders**"/>
          </parameter>
          <parameter name="body"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="249">return location for the MIME part
body</doc>
            <type name="Buffer" c:type="SoupBuffer**"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_message"
              c:identifier="soup_multipart_to_message"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart.c"
             line="390">Serializes @multipart to @dest_headers and @dest_body.</doc>
        <source-position filename="../libsoup/soup-multipart.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="392">a #SoupMultipart</doc>
            <type name="Multipart" c:type="SoupMultipart*"/>
          </instance-parameter>
          <parameter name="dest_headers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="393">the headers of the HTTP message to serialize @multipart to</doc>
            <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
          </parameter>
          <parameter name="dest_body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart.c"
                 line="394">the body of the HTTP message to serialize @multipart to</doc>
            <type name="MessageBody" c:type="SoupMessageBody*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="MultipartInputStream"
           c:symbol-prefix="multipart_input_stream"
           c:type="SoupMultipartInputStream"
           parent="Gio.FilterInputStream"
           glib:type-name="SoupMultipartInputStream"
           glib:get-type="soup_multipart_input_stream_get_type"
           glib:type-struct="MultipartInputStreamClass">
      <source-position filename="../libsoup/soup-multipart-input-stream.h"
                       line="34"/>
      <implements name="Gio.PollableInputStream"/>
      <constructor name="new"
                   c:identifier="soup_multipart_input_stream_new"
                   version="2.40">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart-input-stream.c"
             line="415">Creates a new #SoupMultipartInputStream that wraps the
#GInputStream obtained by sending the #SoupRequest. Reads should
not be done directly through this object, use the input streams
returned by soup_multipart_input_stream_next_part() or its async
counterpart instead.</doc>
        <source-position filename="../libsoup/soup-multipart-input-stream.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-multipart-input-stream.c"
               line="426">a new #SoupMultipartInputStream</doc>
          <type name="MultipartInputStream"
                c:type="SoupMultipartInputStream*"/>
        </return-value>
        <parameters>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="417">the #SoupMessage the response is related to.</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="base_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="418">the #GInputStream returned by sending the request.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_headers"
              c:identifier="soup_multipart_input_stream_get_headers"
              version="2.40">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart-input-stream.c"
             line="567">Obtains the headers for the part currently being processed. Note
that the #SoupMessageHeaders that are returned are owned by the
#SoupMultipartInputStream and will be replaced when a call is made
to soup_multipart_input_stream_next_part() or its async
counterpart, so if keeping the headers is required, a copy must be
made.

Note that if a part had no headers at all an empty #SoupMessageHeaders
will be returned.</doc>
        <source-position filename="../libsoup/soup-multipart-input-stream.h"
                         line="61"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-multipart-input-stream.c"
               line="581">a #SoupMessageHeaders
containing the headers for the part currently being processed or
%NULL if the headers failed to parse.</doc>
          <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="569">a #SoupMultipartInputStream.</doc>
            <type name="MultipartInputStream"
                  c:type="SoupMultipartInputStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_part"
              c:identifier="soup_multipart_input_stream_next_part"
              version="2.40"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart-input-stream.c"
             line="440">Obtains an input stream for the next part. When dealing with a
multipart response the input stream needs to be wrapped in a
#SoupMultipartInputStream and this function or its async
counterpart need to be called to obtain the first part for
reading.

After calling this function,
soup_multipart_input_stream_get_headers() can be used to obtain the
headers for the first part. A read of 0 bytes indicates the end of
the part; a new call to this function should be done at that point,
to obtain the next part.</doc>
        <source-position filename="../libsoup/soup-multipart-input-stream.h"
                         line="44"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-multipart-input-stream.c"
               line="458">a new #GInputStream, or
%NULL if there are no more parts</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="442">the #SoupMultipartInputStream</doc>
            <type name="MultipartInputStream"
                  c:type="SoupMultipartInputStream*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="443">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_part_async"
              c:identifier="soup_multipart_input_stream_next_part_async"
              version="2.40">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart-input-stream.c"
             line="503">Obtains a #GInputStream for the next request. See
soup_multipart_input_stream_next_part() for details on the
workflow.</doc>
        <source-position filename="../libsoup/soup-multipart-input-stream.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="505">the #SoupMultipartInputStream.</doc>
            <type name="MultipartInputStream"
                  c:type="SoupMultipartInputStream*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="506">the I/O priority for the request.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="507">a #GCancellable.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="508">callback to call when request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="509">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_part_finish"
              c:identifier="soup_multipart_input_stream_next_part_finish"
              version="2.40"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-multipart-input-stream.c"
             line="543">Finishes an asynchronous request for the next part.</doc>
        <source-position filename="../libsoup/soup-multipart-input-stream.h"
                         line="56"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-multipart-input-stream.c"
               line="551">a newly created
#GInputStream for reading the next part or %NULL if there are no
more parts.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="multipart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="545">a #SoupMultipartInputStream.</doc>
            <type name="MultipartInputStream"
                  c:type="SoupMultipartInputStream*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-multipart-input-stream.c"
                 line="546">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="message"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Message"/>
      </property>
      <field name="parent_instance">
        <type name="Gio.FilterInputStream" c:type="GFilterInputStream"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MultipartInputStreamPrivate"
              c:type="SoupMultipartInputStreamPrivate*"/>
      </field>
    </class>
    <record name="MultipartInputStreamClass"
            c:type="SoupMultipartInputStreamClass"
            glib:is-gtype-struct-for="MultipartInputStream">
      <source-position filename="../libsoup/soup-multipart-input-stream.h"
                       line="34"/>
      <field name="parent_class">
        <type name="Gio.FilterInputStreamClass"
              c:type="GFilterInputStreamClass"/>
      </field>
    </record>
    <record name="MultipartInputStreamPrivate"
            c:type="SoupMultipartInputStreamPrivate"
            disguised="1">
      <source-position filename="../libsoup/soup-multipart-input-stream.h"
                       line="22"/>
    </record>
    <function-macro name="PASSWORD_MANAGER"
                    c:identifier="SOUP_PASSWORD_MANAGER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-password-manager.h"
                       line="12"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PASSWORD_MANAGER_CLASS"
                    c:identifier="SOUP_PASSWORD_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-password-manager.h"
                       line="13"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PASSWORD_MANAGER_GET_CLASS"
                    c:identifier="SOUP_PASSWORD_MANAGER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-password-manager.h"
                       line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY_RESOLVER"
                    c:identifier="SOUP_PROXY_RESOLVER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-resolver.h" line="16"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY_RESOLVER_CLASS"
                    c:identifier="SOUP_PROXY_RESOLVER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-resolver.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY_RESOLVER_DEFAULT"
                    c:identifier="SOUP_PROXY_RESOLVER_DEFAULT"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-resolver-default.h"
                       line="11"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY_RESOLVER_DEFAULT_CLASS"
                    c:identifier="SOUP_PROXY_RESOLVER_DEFAULT_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-resolver-default.h"
                       line="12"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY_RESOLVER_DEFAULT_GET_CLASS"
                    c:identifier="SOUP_PROXY_RESOLVER_DEFAULT_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-resolver-default.h"
                       line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY_RESOLVER_GET_CLASS"
                    c:identifier="SOUP_PROXY_RESOLVER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-resolver.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY_URI_RESOLVER"
                    c:identifier="SOUP_PROXY_URI_RESOLVER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                       line="14"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY_URI_RESOLVER_CLASS"
                    c:identifier="SOUP_PROXY_URI_RESOLVER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                       line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY_URI_RESOLVER_GET_CLASS"
                    c:identifier="SOUP_PROXY_URI_RESOLVER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                       line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="PasswordManager"
               c:symbol-prefix="password_manager"
               c:type="SoupPasswordManager"
               glib:type-name="SoupPasswordManager"
               glib:get-type="soup_password_manager_get_type"
               glib:type-struct="PasswordManagerInterface">
      <source-position filename="../libsoup/soup-password-manager.h"
                       line="40"/>
      <prerequisite name="SessionFeature"/>
      <virtual-method name="get_passwords_async" invoker="get_passwords_async">
        <source-position filename="../libsoup/soup-password-manager.h"
                         line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="password_manager"
                              transfer-ownership="none">
            <type name="PasswordManager" c:type="SoupPasswordManager*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <type name="Auth" c:type="SoupAuth*"/>
          </parameter>
          <parameter name="retrying" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="async_context" transfer-ownership="none">
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="PasswordManagerCallback"
                  c:type="SoupPasswordManagerCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="6">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_passwords_sync" invoker="get_passwords_sync">
        <source-position filename="../libsoup/soup-password-manager.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="password_manager"
                              transfer-ownership="none">
            <type name="PasswordManager" c:type="SoupPasswordManager*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <type name="Auth" c:type="SoupAuth*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_passwords_async"
              c:identifier="soup_password_manager_get_passwords_async">
        <source-position filename="../libsoup/soup-password-manager.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="password_manager"
                              transfer-ownership="none">
            <type name="PasswordManager" c:type="SoupPasswordManager*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <type name="Auth" c:type="SoupAuth*"/>
          </parameter>
          <parameter name="retrying" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="async_context" transfer-ownership="none">
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="PasswordManagerCallback"
                  c:type="SoupPasswordManagerCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_passwords_sync"
              c:identifier="soup_password_manager_get_passwords_sync">
        <source-position filename="../libsoup/soup-password-manager.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="password_manager"
                              transfer-ownership="none">
            <type name="PasswordManager" c:type="SoupPasswordManager*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <type name="Auth" c:type="SoupAuth*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <callback name="PasswordManagerCallback"
              c:type="SoupPasswordManagerCallback">
      <source-position filename="../libsoup/soup-password-manager.h"
                       line="20"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="password_manager" transfer-ownership="none">
          <type name="PasswordManager" c:type="SoupPasswordManager*"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="auth" transfer-ownership="none">
          <type name="Auth" c:type="SoupAuth*"/>
        </parameter>
        <parameter name="retrying" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="PasswordManagerInterface"
            c:type="SoupPasswordManagerInterface"
            glib:is-gtype-struct-for="PasswordManager">
      <source-position filename="../libsoup/soup-password-manager.h"
                       line="40"/>
      <field name="base">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_passwords_async">
        <callback name="get_passwords_async">
          <source-position filename="../libsoup/soup-password-manager.h"
                           line="29"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="password_manager" transfer-ownership="none">
              <type name="PasswordManager" c:type="SoupPasswordManager*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="auth" transfer-ownership="none">
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
            <parameter name="retrying" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="async_context" transfer-ownership="none">
              <type name="GLib.MainContext" c:type="GMainContext*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="async"
                       closure="7">
              <type name="PasswordManagerCallback"
                    c:type="SoupPasswordManagerCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="7">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_passwords_sync">
        <callback name="get_passwords_sync">
          <source-position filename="../libsoup/soup-password-manager.h"
                           line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="password_manager" transfer-ownership="none">
              <type name="PasswordManager" c:type="SoupPasswordManager*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="auth" transfer-ownership="none">
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="ProxyResolver"
               c:symbol-prefix="proxy_resolver"
               c:type="SoupProxyResolver"
               glib:type-name="SoupProxyResolver"
               glib:get-type="soup_proxy_resolver_get_type"
               glib:type-struct="ProxyResolverInterface">
      <source-position filename="../libsoup/soup-proxy-resolver.h" line="40"/>
      <prerequisite name="SessionFeature"/>
      <virtual-method name="get_proxy_async"
                      invoker="get_proxy_async"
                      deprecated="1"
                      deprecated-version="2.28">
        <doc-deprecated xml:space="preserve">Use SoupProxyURIResolver.get_proxy_uri_async instead</doc-deprecated>
        <source-position filename="../libsoup/soup-proxy-resolver.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy_resolver" transfer-ownership="none">
            <type name="ProxyResolver" c:type="SoupProxyResolver*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="async_context" transfer-ownership="none">
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="4">
            <type name="ProxyResolverCallback"
                  c:type="SoupProxyResolverCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_proxy_sync"
                      invoker="get_proxy_sync"
                      deprecated="1"
                      deprecated-version="2.28">
        <doc-deprecated xml:space="preserve">Use SoupProxyURIResolver.get_proxy_uri_sync() instead</doc-deprecated>
        <source-position filename="../libsoup/soup-proxy-resolver.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy_resolver" transfer-ownership="none">
            <type name="ProxyResolver" c:type="SoupProxyResolver*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="addr"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <type name="Address" c:type="SoupAddress**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_proxy_async"
              c:identifier="soup_proxy_resolver_get_proxy_async"
              deprecated="1"
              deprecated-version="2.28">
        <doc-deprecated xml:space="preserve">Use SoupProxyURIResolver.get_proxy_uri_async instead</doc-deprecated>
        <source-position filename="../libsoup/soup-proxy-resolver.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy_resolver" transfer-ownership="none">
            <type name="ProxyResolver" c:type="SoupProxyResolver*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="async_context" transfer-ownership="none">
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="4">
            <type name="ProxyResolverCallback"
                  c:type="SoupProxyResolverCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_proxy_sync"
              c:identifier="soup_proxy_resolver_get_proxy_sync"
              deprecated="1"
              deprecated-version="2.28">
        <doc-deprecated xml:space="preserve">Use SoupProxyURIResolver.get_proxy_uri_sync() instead</doc-deprecated>
        <source-position filename="../libsoup/soup-proxy-resolver.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy_resolver" transfer-ownership="none">
            <type name="ProxyResolver" c:type="SoupProxyResolver*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="addr"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <type name="Address" c:type="SoupAddress**"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <callback name="ProxyResolverCallback"
              c:type="SoupProxyResolverCallback"
              deprecated="1"
              deprecated-version="2.28">
      <doc-deprecated xml:space="preserve">Use SoupProxyURIResolver instead</doc-deprecated>
      <source-position filename="../libsoup/soup-proxy-resolver.h" line="24"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="proxy_resolver" transfer-ownership="none">
          <type name="ProxyResolver" c:type="SoupProxyResolver*"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="arg" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="addr" transfer-ownership="none">
          <type name="Address" c:type="SoupAddress*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="ProxyResolverDefault"
           c:symbol-prefix="proxy_resolver_default"
           c:type="SoupProxyResolverDefault"
           parent="GObject.Object"
           glib:type-name="SoupProxyResolverDefault"
           glib:get-type="soup_proxy_resolver_default_get_type"
           glib:type-struct="ProxyResolverDefaultClass">
      <source-position filename="../libsoup/soup-proxy-resolver-default.h"
                       line="25"/>
      <implements name="ProxyURIResolver"/>
      <implements name="SessionFeature"/>
      <property name="gproxy-resolver"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="Gio.ProxyResolver"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ProxyResolverDefaultClass"
            c:type="SoupProxyResolverDefaultClass"
            glib:is-gtype-struct-for="ProxyResolverDefault">
      <source-position filename="../libsoup/soup-proxy-resolver-default.h"
                       line="25"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ProxyResolverInterface"
            c:type="SoupProxyResolverInterface"
            glib:is-gtype-struct-for="ProxyResolver">
      <source-position filename="../libsoup/soup-proxy-resolver.h" line="40"/>
      <field name="base">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_proxy_async">
        <callback name="get_proxy_async">
          <source-position filename="../libsoup/soup-proxy-resolver.h"
                           line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="proxy_resolver" transfer-ownership="none">
              <type name="ProxyResolver" c:type="SoupProxyResolver*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="async_context" transfer-ownership="none">
              <type name="GLib.MainContext" c:type="GMainContext*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="async"
                       closure="5">
              <type name="ProxyResolverCallback"
                    c:type="SoupProxyResolverCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_proxy_sync">
        <callback name="get_proxy_sync">
          <source-position filename="../libsoup/soup-proxy-resolver.h"
                           line="36"/>
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="proxy_resolver" transfer-ownership="none">
              <type name="ProxyResolver" c:type="SoupProxyResolver*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="addr"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="none">
              <type name="Address" c:type="SoupAddress**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="ProxyURIResolver"
               c:symbol-prefix="proxy_uri_resolver"
               c:type="SoupProxyURIResolver"
               glib:type-name="SoupProxyURIResolver"
               glib:get-type="soup_proxy_uri_resolver_get_type"
               glib:type-struct="ProxyURIResolverInterface">
      <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                       line="44"/>
      <prerequisite name="SessionFeature"/>
      <virtual-method name="get_proxy_uri_async"
                      invoker="get_proxy_uri_async"
                      version="2.26.3"
                      deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-proxy-uri-resolver.c"
             line="53">Asynchronously determines a proxy URI to use for @msg and calls
@callback.</doc>
        <doc-deprecated xml:space="preserve">#SoupProxyURIResolver is deprecated in favor of
#GProxyResolver</doc-deprecated>
        <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                         line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy_uri_resolver"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="55">the #SoupProxyURIResolver</doc>
            <type name="ProxyURIResolver" c:type="SoupProxyURIResolver*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="56">the #SoupURI you want a proxy for</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="async_context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="57">the #GMainContext to invoke @callback in</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="58">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="59">callback to invoke with the proxy address</doc>
            <type name="ProxyURIResolverCallback"
                  c:type="SoupProxyURIResolverCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="60">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_proxy_uri_sync"
                      invoker="get_proxy_uri_sync"
                      version="2.26.3"
                      deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-proxy-uri-resolver.c"
             line="84">Synchronously determines a proxy URI to use for @uri. If @uri
should be sent via proxy, *@proxy_uri will be set to the URI of the
proxy, else it will be set to %NULL.</doc>
        <doc-deprecated xml:space="preserve">#SoupProxyURIResolver is deprecated in favor of
#GProxyResolver</doc-deprecated>
        <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-proxy-uri-resolver.c"
               line="95">%SOUP_STATUS_OK if successful, or a transport-level
error.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy_uri_resolver"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="86">the #SoupProxyURIResolver</doc>
            <type name="ProxyURIResolver" c:type="SoupProxyURIResolver*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="87">the #SoupURI you want a proxy for</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="88">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="proxy_uri"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="89">on return, will contain the proxy URI</doc>
            <type name="URI" c:type="SoupURI**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_proxy_uri_async"
              c:identifier="soup_proxy_uri_resolver_get_proxy_uri_async"
              version="2.26.3"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-proxy-uri-resolver.c"
             line="53">Asynchronously determines a proxy URI to use for @msg and calls
@callback.</doc>
        <doc-deprecated xml:space="preserve">#SoupProxyURIResolver is deprecated in favor of
#GProxyResolver</doc-deprecated>
        <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy_uri_resolver"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="55">the #SoupProxyURIResolver</doc>
            <type name="ProxyURIResolver" c:type="SoupProxyURIResolver*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="56">the #SoupURI you want a proxy for</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="async_context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="57">the #GMainContext to invoke @callback in</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="58">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="59">callback to invoke with the proxy address</doc>
            <type name="ProxyURIResolverCallback"
                  c:type="SoupProxyURIResolverCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="60">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_proxy_uri_sync"
              c:identifier="soup_proxy_uri_resolver_get_proxy_uri_sync"
              version="2.26.3"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-proxy-uri-resolver.c"
             line="84">Synchronously determines a proxy URI to use for @uri. If @uri
should be sent via proxy, *@proxy_uri will be set to the URI of the
proxy, else it will be set to %NULL.</doc>
        <doc-deprecated xml:space="preserve">#SoupProxyURIResolver is deprecated in favor of
#GProxyResolver</doc-deprecated>
        <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-proxy-uri-resolver.c"
               line="95">%SOUP_STATUS_OK if successful, or a transport-level
error.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy_uri_resolver"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="86">the #SoupProxyURIResolver</doc>
            <type name="ProxyURIResolver" c:type="SoupProxyURIResolver*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="87">the #SoupURI you want a proxy for</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="88">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="proxy_uri"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="89">on return, will contain the proxy URI</doc>
            <type name="URI" c:type="SoupURI**"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <callback name="ProxyURIResolverCallback"
              c:type="SoupProxyURIResolverCallback">
      <doc xml:space="preserve"
           filename="../libsoup/soup-proxy-uri-resolver.c"
           line="43">Callback for soup_proxy_uri_resolver_get_proxy_uri_async()</doc>
      <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                       line="22"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="resolver" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-proxy-uri-resolver.c"
               line="45">the #SoupProxyURIResolver</doc>
          <type name="ProxyURIResolver" c:type="SoupProxyURIResolver*"/>
        </parameter>
        <parameter name="status" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-proxy-uri-resolver.c"
               line="46">a #SoupStatus</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="proxy_uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-proxy-uri-resolver.c"
               line="47">the resolved proxy URI, or %NULL</doc>
          <type name="URI" c:type="SoupURI*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="../libsoup/soup-proxy-uri-resolver.c"
               line="48">data passed to soup_proxy_uri_resolver_get_proxy_uri_async()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ProxyURIResolverInterface"
            c:type="SoupProxyURIResolverInterface"
            glib:is-gtype-struct-for="ProxyURIResolver">
      <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                       line="44"/>
      <field name="base">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_proxy_uri_async">
        <callback name="get_proxy_uri_async">
          <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                           line="30"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="proxy_uri_resolver" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-proxy-uri-resolver.c"
                   line="55">the #SoupProxyURIResolver</doc>
              <type name="ProxyURIResolver" c:type="SoupProxyURIResolver*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-proxy-uri-resolver.c"
                   line="56">the #SoupURI you want a proxy for</doc>
              <type name="URI" c:type="SoupURI*"/>
            </parameter>
            <parameter name="async_context"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-proxy-uri-resolver.c"
                   line="57">the #GMainContext to invoke @callback in</doc>
              <type name="GLib.MainContext" c:type="GMainContext*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-proxy-uri-resolver.c"
                   line="58">a #GCancellable, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-proxy-uri-resolver.c"
                   line="59">callback to invoke with the proxy address</doc>
              <type name="ProxyURIResolverCallback"
                    c:type="SoupProxyURIResolverCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-proxy-uri-resolver.c"
                   line="60">data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_proxy_uri_sync">
        <callback name="get_proxy_uri_sync">
          <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                           line="35"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-proxy-uri-resolver.c"
                 line="95">%SOUP_STATUS_OK if successful, or a transport-level
error.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="proxy_uri_resolver" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-proxy-uri-resolver.c"
                   line="86">the #SoupProxyURIResolver</doc>
              <type name="ProxyURIResolver" c:type="SoupProxyURIResolver*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-proxy-uri-resolver.c"
                   line="87">the #SoupURI you want a proxy for</doc>
              <type name="URI" c:type="SoupURI*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-proxy-uri-resolver.c"
                   line="88">a #GCancellable, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="proxy_uri"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-proxy-uri-resolver.c"
                   line="89">on return, will contain the proxy URI</doc>
              <type name="URI" c:type="SoupURI**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                           line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                           line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-proxy-uri-resolver.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <function-macro name="REQUEST"
                    c:identifier="SOUP_REQUEST"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUESTER"
                    c:identifier="SOUP_REQUESTER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-requester.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUESTER_CLASS"
                    c:identifier="SOUP_REQUESTER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-requester.h" line="32"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUESTER_GET_CLASS"
                    c:identifier="SOUP_REQUESTER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-requester.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUEST_CLASS"
                    c:identifier="SOUP_REQUEST_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request.h" line="33"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUEST_DATA"
                    c:identifier="SOUP_REQUEST_DATA"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-data.h" line="30"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUEST_DATA_CLASS"
                    c:identifier="SOUP_REQUEST_DATA_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-data.h" line="31"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUEST_DATA_GET_CLASS"
                    c:identifier="SOUP_REQUEST_DATA_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-data.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUEST_FILE"
                    c:identifier="SOUP_REQUEST_FILE"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-file.h" line="30"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUEST_FILE_CLASS"
                    c:identifier="SOUP_REQUEST_FILE_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-file.h" line="31"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUEST_FILE_GET_CLASS"
                    c:identifier="SOUP_REQUEST_FILE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-file.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUEST_GET_CLASS"
                    c:identifier="SOUP_REQUEST_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUEST_HTTP"
                    c:identifier="SOUP_REQUEST_HTTP"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-http.h" line="30"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUEST_HTTP_CLASS"
                    c:identifier="SOUP_REQUEST_HTTP_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-http.h" line="31"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REQUEST_HTTP_GET_CLASS"
                    c:identifier="SOUP_REQUEST_HTTP_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-request-http.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="REQUEST_SESSION"
              value="session"
              c:type="SOUP_REQUEST_SESSION"
              version="2.42">
      <doc xml:space="preserve"
           filename="../libsoup/soup-request.c"
           line="305">Alias for the #SoupRequest:session property, qv.</doc>
      <source-position filename="../libsoup/soup-request.h" line="75"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REQUEST_URI"
              value="uri"
              c:type="SOUP_REQUEST_URI"
              version="2.42">
      <doc xml:space="preserve"
           filename="../libsoup/soup-request.c"
           line="283">Alias for the #SoupRequest:uri property, qv.</doc>
      <source-position filename="../libsoup/soup-request.h" line="74"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="Range" c:type="SoupRange" version="2.26">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message-headers.c"
           line="910">Represents a byte range as used in the Range header.

If @end is non-negative, then @start and @end represent the bounds
of of the range, counting from 0. (Eg, the first 500 bytes would be
represented as @start = 0 and @end = 499.)

If @end is -1 and @start is non-negative, then this represents a
range starting at @start and ending with the last byte of the
requested resource body. (Eg, all but the first 500 bytes would be
@start = 500, and @end = -1.)

If @end is -1 and @start is negative, then it represents a "suffix
range", referring to the last -@start bytes of the resource body.
(Eg, the last 500 bytes would be @start = -500 and @end = -1.)</doc>
      <source-position filename="../libsoup/soup-message-headers.h"
                       line="131"/>
      <field name="start" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="912">the start of the range</doc>
        <type name="gint64" c:type="goffset"/>
      </field>
      <field name="end" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-message-headers.c"
             line="913">the end of the range</doc>
        <type name="gint64" c:type="goffset"/>
      </field>
    </record>
    <class name="Request"
           c:symbol-prefix="request"
           c:type="SoupRequest"
           version="2.42"
           parent="GObject.Object"
           glib:type-name="SoupRequest"
           glib:get-type="soup_request_get_type"
           glib:type-struct="RequestClass">
      <doc xml:space="preserve"
           filename="../libsoup/soup-request.c"
           line="42">A request to retrieve a particular URI.</doc>
      <source-position filename="../libsoup/soup-request.h" line="69"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="check_uri" throws="1">
        <source-position filename="../libsoup/soup-request.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="req_base" transfer-ownership="none">
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_content_length"
                      invoker="get_content_length"
                      version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="367">Gets the length of the data represented by @request. For most
request types, this will not be known until after you call
soup_request_send() or soup_request_send_finish().</doc>
        <source-position filename="../libsoup/soup-request.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request.c"
               line="375">the length of the data represented by @request,
  or -1 if not known.</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="369">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_content_type"
                      invoker="get_content_type"
                      version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="386">Gets the type of the data represented by @request. For most request
types, this will not be known until after you call
soup_request_send() or soup_request_send_finish().

As in the HTTP Content-Type header, this may include parameters
after the MIME type.</doc>
        <source-position filename="../libsoup/soup-request.h" line="68"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request.c"
               line="397">the type of the data represented by
  @request, or %NULL if not known.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="388">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="send" invoker="send" version="2.42" throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="197">Synchronously requests the URI pointed to by @request, and returns
a #GInputStream that can be used to read its contents.

Note that you cannot use this method with #SoupRequests attached to
a #SoupSessionAsync.</doc>
        <source-position filename="../libsoup/soup-request.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request.c"
               line="209">a #GInputStream that can be used to
  read from the URI pointed to by @request.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="199">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="200">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="send_async" invoker="send_async" version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="223">Begins an asynchronously request for the URI pointed to by
@request.

Note that you cannot use this method with #SoupRequests attached to
a #SoupSessionSync.</doc>
        <source-position filename="../libsoup/soup-request.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="225">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="226">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="227">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="228">user data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="send_finish"
                      invoker="send_finish"
                      version="2.42"
                      throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="248">Gets the result of a soup_request_send_async().</doc>
        <source-position filename="../libsoup/soup-request.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request.c"
               line="256">a #GInputStream that can be used to
  read from the URI pointed to by @request.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="250">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="251">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_content_length"
              c:identifier="soup_request_get_content_length"
              version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="367">Gets the length of the data represented by @request. For most
request types, this will not be known until after you call
soup_request_send() or soup_request_send_finish().</doc>
        <source-position filename="../libsoup/soup-request.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request.c"
               line="375">the length of the data represented by @request,
  or -1 if not known.</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="369">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content_type"
              c:identifier="soup_request_get_content_type"
              version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="386">Gets the type of the data represented by @request. For most request
types, this will not be known until after you call
soup_request_send() or soup_request_send_finish().

As in the HTTP Content-Type header, this may include parameters
after the MIME type.</doc>
        <source-position filename="../libsoup/soup-request.h" line="99"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request.c"
               line="397">the type of the data represented by
  @request, or %NULL if not known.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="388">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session"
              c:identifier="soup_request_get_session"
              version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="351">Gets @request's #SoupSession</doc>
        <source-position filename="../libsoup/soup-request.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request.c"
               line="357">@request's #SoupSession</doc>
          <type name="Session" c:type="SoupSession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="353">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri"
              c:identifier="soup_request_get_uri"
              version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="335">Gets @request's URI</doc>
        <source-position filename="../libsoup/soup-request.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request.c"
               line="341">@request's URI</doc>
          <type name="URI" c:type="SoupURI*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="337">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send"
              c:identifier="soup_request_send"
              version="2.42"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="197">Synchronously requests the URI pointed to by @request, and returns
a #GInputStream that can be used to read its contents.

Note that you cannot use this method with #SoupRequests attached to
a #SoupSessionAsync.</doc>
        <source-position filename="../libsoup/soup-request.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request.c"
               line="209">a #GInputStream that can be used to
  read from the URI pointed to by @request.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="199">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="200">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_async"
              c:identifier="soup_request_send_async"
              version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="223">Begins an asynchronously request for the URI pointed to by
@request.

Note that you cannot use this method with #SoupRequests attached to
a #SoupSessionSync.</doc>
        <source-position filename="../libsoup/soup-request.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="225">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="226">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="227">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="228">user data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_finish"
              c:identifier="soup_request_send_finish"
              version="2.42"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="248">Gets the result of a soup_request_send_async().</doc>
        <source-position filename="../libsoup/soup-request.h" line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request.c"
               line="256">a #GInputStream that can be used to
  read from the URI pointed to by @request.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="250">a #SoupRequest</doc>
            <type name="Request" c:type="SoupRequest*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="251">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="session"
                version="2.42"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="312">The request's #SoupSession.</doc>
        <type name="Session"/>
      </property>
      <property name="uri"
                version="2.42"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request.c"
             line="290">The request URI.</doc>
        <type name="URI"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RequestPrivate" c:type="SoupRequestPrivate*"/>
      </field>
    </class>
    <record name="RequestClass"
            c:type="SoupRequestClass"
            glib:is-gtype-struct-for="Request">
      <source-position filename="../libsoup/soup-request.h" line="69"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="schemes">
        <type name="utf8" c:type="const char**"/>
      </field>
      <field name="check_uri">
        <callback name="check_uri" throws="1">
          <source-position filename="../libsoup/soup-request.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="req_base" transfer-ownership="none">
              <type name="Request" c:type="SoupRequest*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <type name="URI" c:type="SoupURI*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="send">
        <callback name="send" throws="1">
          <source-position filename="../libsoup/soup-request.h" line="56"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="209">a #GInputStream that can be used to
  read from the URI pointed to by @request.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </return-value>
          <parameters>
            <parameter name="request" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-request.c"
                   line="199">a #SoupRequest</doc>
              <type name="Request" c:type="SoupRequest*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-request.c"
                   line="200">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="send_async">
        <callback name="send_async">
          <source-position filename="../libsoup/soup-request.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="request" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-request.c"
                   line="225">a #SoupRequest</doc>
              <type name="Request" c:type="SoupRequest*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-request.c"
                   line="226">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-request.c"
                   line="227">a #GAsyncReadyCallback</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-request.c"
                   line="228">user data passed to @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="send_finish">
        <callback name="send_finish" throws="1">
          <source-position filename="../libsoup/soup-request.h" line="63"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="256">a #GInputStream that can be used to
  read from the URI pointed to by @request.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </return-value>
          <parameters>
            <parameter name="request" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-request.c"
                   line="250">a #SoupRequest</doc>
              <type name="Request" c:type="SoupRequest*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-request.c"
                   line="251">the #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_content_length">
        <callback name="get_content_length">
          <source-position filename="../libsoup/soup-request.h" line="67"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="375">the length of the data represented by @request,
  or -1 if not known.</doc>
            <type name="gint64" c:type="goffset"/>
          </return-value>
          <parameters>
            <parameter name="request" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-request.c"
                   line="369">a #SoupRequest</doc>
              <type name="Request" c:type="SoupRequest*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_content_type">
        <callback name="get_content_type">
          <source-position filename="../libsoup/soup-request.h" line="68"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request.c"
                 line="397">the type of the data represented by
  @request, or %NULL if not known.</doc>
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="request" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-request.c"
                   line="388">a #SoupRequest</doc>
              <type name="Request" c:type="SoupRequest*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RequestData"
           c:symbol-prefix="request_data"
           c:type="SoupRequestData"
           parent="Request"
           glib:type-name="SoupRequestData"
           glib:get-type="soup_request_data_get_type"
           glib:type-struct="RequestDataClass">
      <source-position filename="../libsoup/soup-request-data.h" line="46"/>
      <implements name="Gio.Initable"/>
      <field name="parent">
        <type name="Request" c:type="SoupRequest"/>
      </field>
      <field name="priv">
        <type name="RequestDataPrivate" c:type="SoupRequestDataPrivate*"/>
      </field>
    </class>
    <record name="RequestDataClass"
            c:type="SoupRequestDataClass"
            glib:is-gtype-struct-for="RequestData">
      <source-position filename="../libsoup/soup-request-data.h" line="46"/>
      <field name="parent">
        <type name="RequestClass" c:type="SoupRequestClass"/>
      </field>
    </record>
    <record name="RequestDataPrivate"
            c:type="SoupRequestDataPrivate"
            disguised="1">
      <source-position filename="../libsoup/soup-request-data.h" line="36"/>
    </record>
    <enumeration name="RequestError"
                 version="2.42"
                 glib:type-name="SoupRequestError"
                 glib:get-type="soup_request_error_get_type"
                 c:type="SoupRequestError"
                 glib:error-domain="soup_request_error_quark">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="4712">A #SoupRequest error.</doc>
      <member name="bad_uri"
              value="0"
              c:identifier="SOUP_REQUEST_ERROR_BAD_URI"
              glib:nick="bad-uri">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4714">the URI could not be parsed</doc>
      </member>
      <member name="unsupported_uri_scheme"
              value="1"
              c:identifier="SOUP_REQUEST_ERROR_UNSUPPORTED_URI_SCHEME"
              glib:nick="unsupported-uri-scheme">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4715">the URI scheme is not
  supported by this #SoupSession</doc>
      </member>
      <member name="parsing"
              value="2"
              c:identifier="SOUP_REQUEST_ERROR_PARSING"
              glib:nick="parsing">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4717">the server's response could not
  be parsed</doc>
      </member>
      <member name="encoding"
              value="3"
              c:identifier="SOUP_REQUEST_ERROR_ENCODING"
              glib:nick="encoding">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4719">the server's response was in an
  unsupported format</doc>
      </member>
      <function name="quark" c:identifier="soup_request_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="RequestFile"
           c:symbol-prefix="request_file"
           c:type="SoupRequestFile"
           parent="Request"
           glib:type-name="SoupRequestFile"
           glib:get-type="soup_request_file_get_type"
           glib:type-struct="RequestFileClass">
      <source-position filename="../libsoup/soup-request-file.h" line="46"/>
      <implements name="Gio.Initable"/>
      <method name="get_file"
              c:identifier="soup_request_file_get_file"
              version="2.40">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request-file.c"
             line="368">Gets a #GFile corresponding to @file's URI</doc>
        <source-position filename="../libsoup/soup-request-file.h" line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request-file.c"
               line="374">a #GFile corresponding to @file</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request-file.c"
                 line="370">a #SoupRequestFile</doc>
            <type name="RequestFile" c:type="SoupRequestFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Request" c:type="SoupRequest"/>
      </field>
      <field name="priv">
        <type name="RequestFilePrivate" c:type="SoupRequestFilePrivate*"/>
      </field>
    </class>
    <record name="RequestFileClass"
            c:type="SoupRequestFileClass"
            glib:is-gtype-struct-for="RequestFile">
      <source-position filename="../libsoup/soup-request-file.h" line="46"/>
      <field name="parent">
        <type name="RequestClass" c:type="SoupRequestClass"/>
      </field>
    </record>
    <record name="RequestFilePrivate"
            c:type="SoupRequestFilePrivate"
            disguised="1">
      <source-position filename="../libsoup/soup-request-file.h" line="36"/>
    </record>
    <class name="RequestHTTP"
           c:symbol-prefix="request_http"
           c:type="SoupRequestHTTP"
           parent="Request"
           glib:type-name="SoupRequestHTTP"
           glib:get-type="soup_request_http_get_type"
           glib:type-struct="RequestHTTPClass">
      <source-position filename="../libsoup/soup-request-http.h" line="46"/>
      <implements name="Gio.Initable"/>
      <method name="get_message"
              c:identifier="soup_request_http_get_message"
              version="2.40">
        <doc xml:space="preserve"
             filename="../libsoup/soup-request-http.c"
             line="218">Gets a new reference to the #SoupMessage associated to this SoupRequest</doc>
        <source-position filename="../libsoup/soup-request-http.h" line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-request-http.c"
               line="224">a new reference to the #SoupMessage</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="http" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-request-http.c"
                 line="220">a #SoupRequestHTTP object</doc>
            <type name="RequestHTTP" c:type="SoupRequestHTTP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Request" c:type="SoupRequest"/>
      </field>
      <field name="priv">
        <type name="RequestHTTPPrivate" c:type="SoupRequestHTTPPrivate*"/>
      </field>
    </class>
    <record name="RequestHTTPClass"
            c:type="SoupRequestHTTPClass"
            glib:is-gtype-struct-for="RequestHTTP">
      <source-position filename="../libsoup/soup-request-http.h" line="46"/>
      <field name="parent">
        <type name="RequestClass" c:type="SoupRequestClass"/>
      </field>
    </record>
    <record name="RequestHTTPPrivate"
            c:type="SoupRequestHTTPPrivate"
            disguised="1">
      <source-position filename="../libsoup/soup-request-http.h" line="36"/>
    </record>
    <record name="RequestPrivate" c:type="SoupRequestPrivate" disguised="1">
      <source-position filename="../libsoup/soup-request.h" line="38"/>
    </record>
    <class name="Requester"
           c:symbol-prefix="requester"
           c:type="SoupRequester"
           parent="GObject.Object"
           glib:type-name="SoupRequester"
           glib:get-type="soup_requester_get_type"
           glib:type-struct="RequesterClass">
      <source-position filename="../libsoup/soup-requester.h" line="48"/>
      <implements name="SessionFeature"/>
      <constructor name="new" c:identifier="soup_requester_new">
        <source-position filename="../libsoup/soup-requester.h" line="56"/>
        <return-value transfer-ownership="full">
          <type name="Requester" c:type="SoupRequester*"/>
        </return-value>
      </constructor>
      <method name="request" c:identifier="soup_requester_request" throws="1">
        <source-position filename="../libsoup/soup-requester.h" line="60"/>
        <return-value transfer-ownership="full">
          <type name="Request" c:type="SoupRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="requester" transfer-ownership="none">
            <type name="Requester" c:type="SoupRequester*"/>
          </instance-parameter>
          <parameter name="uri_string" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_uri"
              c:identifier="soup_requester_request_uri"
              throws="1">
        <source-position filename="../libsoup/soup-requester.h" line="66"/>
        <return-value transfer-ownership="full">
          <type name="Request" c:type="SoupRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="requester" transfer-ownership="none">
            <type name="Requester" c:type="SoupRequester*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RequesterPrivate" c:type="SoupRequesterPrivate*"/>
      </field>
    </class>
    <record name="RequesterClass"
            c:type="SoupRequesterClass"
            glib:is-gtype-struct-for="Requester">
      <source-position filename="../libsoup/soup-requester.h" line="48"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="RequesterError"
                 glib:type-name="SoupRequesterError"
                 glib:get-type="soup_requester_error_get_type"
                 c:type="SoupRequesterError"
                 glib:error-domain="soup_requester_error_quark">
      <member name="bad_uri"
              value="0"
              c:identifier="SOUP_REQUESTER_ERROR_BAD_URI"
              glib:nick="bad-uri">
      </member>
      <member name="unsupported_uri_scheme"
              value="1"
              c:identifier="SOUP_REQUESTER_ERROR_UNSUPPORTED_URI_SCHEME"
              glib:nick="unsupported-uri-scheme">
      </member>
      <function name="quark" c:identifier="soup_requester_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <record name="RequesterPrivate"
            c:type="SoupRequesterPrivate"
            disguised="1">
      <source-position filename="../libsoup/soup-requester.h" line="38"/>
    </record>
    <function-macro name="SERVER"
                    c:identifier="SOUP_SERVER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-server.h" line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SERVER_ADD_WEBSOCKET_EXTENSION"
              value="add-websocket-extension"
              c:type="SOUP_SERVER_ADD_WEBSOCKET_EXTENSION"
              version="2.68"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="964">Alias for the #SoupServer:add-websocket-extension property, qv.</doc>
      <source-position filename="../libsoup/soup-server.h" line="141"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERVER_ASYNC_CONTEXT"
              value="async-context"
              c:type="SOUP_SERVER_ASYNC_CONTEXT"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="820">Alias for the deprecated #SoupServer:async-context
property, qv.</doc>
      <doc-deprecated xml:space="preserve">The new API uses the thread-default #GMainContext
rather than having an explicitly-specified one.</doc-deprecated>
      <source-position filename="../libsoup/soup-server.h" line="205"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SERVER_CLASS"
                    c:identifier="SOUP_SERVER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-server.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SERVER_GET_CLASS"
                    c:identifier="SOUP_SERVER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-server.h" line="20"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SERVER_HTTPS_ALIASES"
              value="https-aliases"
              c:type="SOUP_SERVER_HTTPS_ALIASES"
              version="2.44">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="941">Alias for the #SoupServer:https-aliases property, qv.</doc>
      <source-position filename="../libsoup/soup-server.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERVER_HTTP_ALIASES"
              value="http-aliases"
              c:type="SOUP_SERVER_HTTP_ALIASES"
              version="2.44">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="915">Alias for the #SoupServer:http-aliases property, qv.</doc>
      <source-position filename="../libsoup/soup-server.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERVER_INTERFACE"
              value="interface"
              c:type="SOUP_SERVER_INTERFACE"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="704">Alias for the #SoupServer:interface property, qv.</doc>
      <doc-deprecated xml:space="preserve">#SoupServers can listen on multiple interfaces
at once now. Use soup_server_listen(), etc, to listen on an
interface, and soup_server_get_uris() to see what addresses
are being listened on.</doc-deprecated>
      <source-position filename="../libsoup/soup-server.h" line="204"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERVER_PORT"
              value="port"
              c:type="SOUP_SERVER_PORT"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="671">Alias for the deprecated #SoupServer:port property, qv.</doc>
      <doc-deprecated xml:space="preserve">#SoupServers can listen on multiple interfaces
at once now. Use soup_server_listen(), etc, to listen on a
port, and soup_server_get_uris() to see what ports are
being listened on.</doc-deprecated>
      <source-position filename="../libsoup/soup-server.h" line="203"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERVER_RAW_PATHS"
              value="raw-paths"
              c:type="SOUP_SERVER_RAW_PATHS">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="838">Alias for the #SoupServer:raw-paths property. (If %TRUE,
percent-encoding in the Request-URI path will not be
automatically decoded.)</doc>
      <source-position filename="../libsoup/soup-server.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERVER_REMOVE_WEBSOCKET_EXTENSION"
              value="remove-websocket-extension"
              c:type="SOUP_SERVER_REMOVE_WEBSOCKET_EXTENSION"
              version="2.68"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="986">Alias for the #SoupServer:remove-websocket-extension property, qv.</doc>
      <source-position filename="../libsoup/soup-server.h" line="142"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERVER_SERVER_HEADER"
              value="server-header"
              c:type="SOUP_SERVER_SERVER_HEADER">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="881">Alias for the #SoupServer:server-header property, qv.</doc>
      <source-position filename="../libsoup/soup-server.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERVER_SSL_CERT_FILE"
              value="ssl-cert-file"
              c:type="SOUP_SERVER_SSL_CERT_FILE"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="724">Alias for the #SoupServer:ssl-cert-file property, qv.</doc>
      <doc-deprecated xml:space="preserve">use #SoupServer:tls-certificate or
soup_server_set_ssl_certificate().</doc-deprecated>
      <source-position filename="../libsoup/soup-server.h" line="206"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERVER_SSL_KEY_FILE"
              value="ssl-key-file"
              c:type="SOUP_SERVER_SSL_KEY_FILE"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="756">Alias for the #SoupServer:ssl-key-file property, qv.</doc>
      <doc-deprecated xml:space="preserve">use #SoupServer:tls-certificate or
soup_server_set_ssl_certificate().</doc-deprecated>
      <source-position filename="../libsoup/soup-server.h" line="207"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SERVER_TLS_CERTIFICATE"
              value="tls-certificate"
              c:type="SOUP_SERVER_TLS_CERTIFICATE"
              version="2.38">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="783">Alias for the #SoupServer:tls-certificate property, qv.</doc>
      <source-position filename="../libsoup/soup-server.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SESSION"
                    c:identifier="SOUP_SESSION"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session.h" line="17"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SESSION_ACCEPT_LANGUAGE"
              value="accept-language"
              c:type="SOUP_SESSION_ACCEPT_LANGUAGE"
              version="2.30">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3639">Alias for the #SoupSession:accept-language property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="80"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_ACCEPT_LANGUAGE_AUTO"
              value="accept-language-auto"
              c:type="SOUP_SESSION_ACCEPT_LANGUAGE_AUTO"
              version="2.30">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3667">Alias for the #SoupSession:accept-language-auto property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="81"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_ADD_FEATURE"
              value="add-feature"
              c:type="SOUP_SESSION_ADD_FEATURE"
              version="2.24"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3691">Alias for the #SoupSession:add-feature property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="83"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_ADD_FEATURE_BY_TYPE"
              value="add-feature-by-type"
              c:type="SOUP_SESSION_ADD_FEATURE_BY_TYPE"
              version="2.24"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3714">Alias for the #SoupSession:add-feature-by-type property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="84"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SESSION_ASYNC"
                    c:identifier="SOUP_SESSION_ASYNC"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-async.h" line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_ASYNC_CLASS"
                    c:identifier="SOUP_SESSION_ASYNC_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-async.h" line="16"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SESSION_ASYNC_CONTEXT"
              value="async-context"
              c:type="SOUP_SESSION_ASYNC_CONTEXT">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3513">Alias for the #SoupSession:async-context property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="76"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SESSION_ASYNC_GET_CLASS"
                    c:identifier="SOUP_SESSION_ASYNC_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-async.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLASS"
                    c:identifier="SOUP_SESSION_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session.h" line="18"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_FEATURE"
                    c:identifier="SOUP_SESSION_FEATURE"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-feature.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_FEATURE_CLASS"
                    c:identifier="SOUP_SESSION_FEATURE_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-feature.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_FEATURE_GET_CLASS"
                    c:identifier="SOUP_SESSION_FEATURE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-feature.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_GET_CLASS"
                    c:identifier="SOUP_SESSION_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session.h" line="21"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SESSION_HTTPS_ALIASES"
              value="https-aliases"
              c:type="SOUP_SESSION_HTTPS_ALIASES"
              version="2.38">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3801">Alias for the #SoupSession:https-aliases property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="87"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_HTTP_ALIASES"
              value="http-aliases"
              c:type="SOUP_SESSION_HTTP_ALIASES"
              version="2.38">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3774">Alias for the #SoupSession:http-aliases property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="86"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_IDLE_TIMEOUT"
              value="idle-timeout"
              c:type="SOUP_SESSION_IDLE_TIMEOUT"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3315">Alias for the #SoupSession:idle-timeout property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="82"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_LOCAL_ADDRESS"
              value="local-address"
              c:type="SOUP_SESSION_LOCAL_ADDRESS"
              version="2.42">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3817">Alias for the #SoupSession:local-address property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_MAX_CONNS"
              value="max-conns"
              c:type="SOUP_SESSION_MAX_CONNS">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3266">Alias for the #SoupSession:max-conns property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_MAX_CONNS_PER_HOST"
              value="max-conns-per-host"
              c:type="SOUP_SESSION_MAX_CONNS_PER_HOST">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3281">Alias for the #SoupSession:max-conns-per-host property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_PROXY_RESOLVER"
              value="proxy-resolver"
              c:type="SOUP_SESSION_PROXY_RESOLVER">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3253">Alias for the #SoupSession:proxy-resolver property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_PROXY_URI"
              value="proxy-uri"
              c:type="SOUP_SESSION_PROXY_URI">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3223">Alias for the #SoupSession:proxy-uri property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_REMOVE_FEATURE_BY_TYPE"
              value="remove-feature-by-type"
              c:type="SOUP_SESSION_REMOVE_FEATURE_BY_TYPE"
              version="2.24"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3737">Alias for the #SoupSession:remove-feature-by-type property,
qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="85"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_SSL_CA_FILE"
              value="ssl-ca-file"
              c:type="SOUP_SESSION_SSL_CA_FILE">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3365">Alias for the #SoupSession:ssl-ca-file property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="71"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_SSL_STRICT"
              value="ssl-strict"
              c:type="SOUP_SESSION_SSL_STRICT"
              version="2.30">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3453">Alias for the #SoupSession:ssl-strict property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="74"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_SSL_USE_SYSTEM_CA_FILE"
              value="ssl-use-system-ca-file"
              c:type="SOUP_SESSION_SSL_USE_SYSTEM_CA_FILE"
              version="2.38">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3378">Alias for the #SoupSession:ssl-use-system-ca-file property,
qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="72"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SESSION_SYNC"
                    c:identifier="SOUP_SESSION_SYNC"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-sync.h" line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_SYNC_CLASS"
                    c:identifier="SOUP_SESSION_SYNC_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-sync.h" line="16"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_SYNC_GET_CLASS"
                    c:identifier="SOUP_SESSION_SYNC_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-session-sync.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SESSION_TIMEOUT"
              value="timeout"
              c:type="SOUP_SESSION_TIMEOUT">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3573">Alias for the #SoupSession:timeout property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="78"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_TLS_DATABASE"
              value="tls-database"
              c:type="SOUP_SESSION_TLS_DATABASE"
              version="2.38">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3416">Alias for the #SoupSession:tls-database property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="73"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_TLS_INTERACTION"
              value="tls-interaction"
              c:type="SOUP_SESSION_TLS_INTERACTION"
              version="2.48">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3844">Alias for the #SoupSession:tls-interaction property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="75"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_USER_AGENT"
              value="user-agent"
              c:type="SOUP_SESSION_USER_AGENT">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3614">Alias for the #SoupSession:user-agent property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="79"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_USE_NTLM"
              value="use-ntlm"
              c:type="SOUP_SESSION_USE_NTLM">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3338">Alias for the #SoupSession:use-ntlm property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="70"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SESSION_USE_THREAD_CONTEXT"
              value="use-thread-context"
              c:type="SOUP_SESSION_USE_THREAD_CONTEXT"
              version="2.38">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="3525">Alias for the #SoupSession:use-thread-context property, qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="77"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SOCKET"
                    c:identifier="SOUP_SOCKET"
                    introspectable="0">
      <source-position filename="../libsoup/soup-socket.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SOCKET_ASYNC_CONTEXT"
              value="async-context"
              c:type="SOUP_SOCKET_ASYNC_CONTEXT">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="720">Alias for the #SoupSocket:async-context property. (The
socket's #GMainContext.)</doc>
      <source-position filename="../libsoup/soup-socket.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SOCKET_CLASS"
                    c:identifier="SOUP_SOCKET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-socket.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SOCKET_FLAG_NONBLOCKING"
              value="non-blocking"
              c:type="SOUP_SOCKET_FLAG_NONBLOCKING">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="617">Alias for the #SoupSocket:non-blocking property. (Whether
or not the socket uses non-blocking I/O.)</doc>
      <source-position filename="../libsoup/soup-socket.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SOCKET_GET_CLASS"
                    c:identifier="SOUP_SOCKET_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-socket.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SOCKET_IS_SERVER"
              value="is-server"
              c:type="SOUP_SOCKET_IS_SERVER">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="639">Alias for the #SoupSocket:is-server property, qv.</doc>
      <source-position filename="../libsoup/soup-socket.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOCKET_LOCAL_ADDRESS"
              value="local-address"
              c:type="SOUP_SOCKET_LOCAL_ADDRESS">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="565">Alias for the #SoupSocket:local-address property. (Address
of local end of socket.)</doc>
      <source-position filename="../libsoup/soup-socket.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOCKET_REMOTE_ADDRESS"
              value="remote-address"
              c:type="SOUP_SOCKET_REMOTE_ADDRESS">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="579">Alias for the #SoupSocket:remote-address property. (Address
of remote end of socket.)</doc>
      <source-position filename="../libsoup/soup-socket.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOCKET_SSL_CREDENTIALS"
              value="ssl-creds"
              c:type="SOUP_SOCKET_SSL_CREDENTIALS">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="663">Alias for the #SoupSocket:ssl-creds property.
(SSL credential information.)</doc>
      <source-position filename="../libsoup/soup-socket.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOCKET_SSL_FALLBACK"
              value="ssl-fallback"
              c:type="SOUP_SOCKET_SSL_FALLBACK">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="693">Alias for the #SoupSocket:ssl-fallback property.</doc>
      <source-position filename="../libsoup/soup-socket.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOCKET_SSL_STRICT"
              value="ssl-strict"
              c:type="SOUP_SOCKET_SSL_STRICT">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="680">Alias for the #SoupSocket:ssl-strict property.</doc>
      <source-position filename="../libsoup/soup-socket.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOCKET_TIMEOUT"
              value="timeout"
              c:type="SOUP_SOCKET_TIMEOUT">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="758">Alias for the #SoupSocket:timeout property. (The timeout
in seconds for blocking socket I/O operations.)</doc>
      <source-position filename="../libsoup/soup-socket.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOCKET_TLS_CERTIFICATE"
              value="tls-certificate"
              c:type="SOUP_SOCKET_TLS_CERTIFICATE"
              version="2.34">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="773">Alias for the #SoupSocket:tls-certificate
property. Note that this property's value is only useful
if the socket is for a TLS connection, and only reliable
after some data has been transferred to or from it.</doc>
      <source-position filename="../libsoup/soup-socket.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOCKET_TLS_ERRORS"
              value="tls-errors"
              c:type="SOUP_SOCKET_TLS_ERRORS"
              version="2.34">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="791">Alias for the #SoupSocket:tls-errors
property. Note that this property's value is only useful
if the socket is for a TLS connection, and only reliable
after some data has been transferred to or from it.</doc>
      <source-position filename="../libsoup/soup-socket.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOCKET_TRUSTED_CERTIFICATE"
              value="trusted-certificate"
              c:type="SOUP_SOCKET_TRUSTED_CERTIFICATE">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="706">Alias for the #SoupSocket:trusted-certificate
property.</doc>
      <source-position filename="../libsoup/soup-socket.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOCKET_USE_THREAD_CONTEXT"
              value="use-thread-context"
              c:type="SOUP_SOCKET_USE_THREAD_CONTEXT"
              version="2.38">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="734">Alias for the #SoupSocket:use-thread-context property. (Use
g_main_context_get_thread_default())</doc>
      <source-position filename="../libsoup/soup-socket.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="STATUS_IS_CLIENT_ERROR"
                    c:identifier="SOUP_STATUS_IS_CLIENT_ERROR"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-status.c"
           line="53">Tests if @status is a Client Error (4xx) response.</doc>
      <source-position filename="../libsoup/soup-status.h" line="19"/>
      <parameters>
        <parameter name="status">
          <doc xml:space="preserve"
               filename="../libsoup/soup-status.c"
               line="55">an HTTP status code</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_IS_INFORMATIONAL"
                    c:identifier="SOUP_STATUS_IS_INFORMATIONAL"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-status.c"
           line="29">Tests if @status is an Informational (1xx) response.</doc>
      <source-position filename="../libsoup/soup-status.h" line="16"/>
      <parameters>
        <parameter name="status">
          <doc xml:space="preserve"
               filename="../libsoup/soup-status.c"
               line="31">an HTTP status code</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_IS_REDIRECTION"
                    c:identifier="SOUP_STATUS_IS_REDIRECTION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-status.c"
           line="45">Tests if @status is a Redirection (3xx) response.</doc>
      <source-position filename="../libsoup/soup-status.h" line="18"/>
      <parameters>
        <parameter name="status">
          <doc xml:space="preserve"
               filename="../libsoup/soup-status.c"
               line="47">an HTTP status code</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_IS_SERVER_ERROR"
                    c:identifier="SOUP_STATUS_IS_SERVER_ERROR"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-status.c"
           line="61">Tests if @status is a Server Error (5xx) response.</doc>
      <source-position filename="../libsoup/soup-status.h" line="20"/>
      <parameters>
        <parameter name="status">
          <doc xml:space="preserve"
               filename="../libsoup/soup-status.c"
               line="63">an HTTP status code</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_IS_SUCCESSFUL"
                    c:identifier="SOUP_STATUS_IS_SUCCESSFUL"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-status.c"
           line="37">Tests if @status is a Successful (2xx) response.</doc>
      <source-position filename="../libsoup/soup-status.h" line="17"/>
      <parameters>
        <parameter name="status">
          <doc xml:space="preserve"
               filename="../libsoup/soup-status.c"
               line="39">an HTTP status code</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_IS_TRANSPORT_ERROR"
                    c:identifier="SOUP_STATUS_IS_TRANSPORT_ERROR"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-status.c"
           line="21">Tests if @status is a libsoup transport error.</doc>
      <source-position filename="../libsoup/soup-status.h" line="15"/>
      <parameters>
        <parameter name="status">
          <doc xml:space="preserve"
               filename="../libsoup/soup-status.c"
               line="23">a status code</doc>
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="SameSitePolicy"
                 version="2.70"
                 glib:type-name="SoupSameSitePolicy"
                 glib:get-type="soup_same_site_policy_get_type"
                 c:type="SoupSameSitePolicy">
      <member name="none"
              value="0"
              c:identifier="SOUP_SAME_SITE_POLICY_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.h"
             line="15">The cookie is exposed with both cross-site and same-site requests</doc>
      </member>
      <member name="lax"
              value="1"
              c:identifier="SOUP_SAME_SITE_POLICY_LAX"
              glib:nick="lax">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.h"
             line="16">The cookie is withheld on cross-site requests but exposed on cross-site navigations</doc>
      </member>
      <member name="strict"
              value="2"
              c:identifier="SOUP_SAME_SITE_POLICY_STRICT"
              glib:nick="strict">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.h"
             line="17">The cookie is only exposed for same-site requests</doc>
      </member>
    </enumeration>
    <class name="Server"
           c:symbol-prefix="server"
           c:type="SoupServer"
           parent="GObject.Object"
           glib:type-name="SoupServer"
           glib:get-type="soup_server_get_type"
           glib:type-struct="ServerClass">
      <source-position filename="../libsoup/soup-server.h" line="56"/>
      <constructor name="new"
                   c:identifier="soup_server_new"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1002">Creates a new #SoupServer. This is exactly equivalent to calling
g_object_new() and specifying %SOUP_TYPE_SERVER as the type.</doc>
        <source-position filename="../libsoup/soup-server.h" line="68"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="1010">a new #SoupServer. If you are using
certain legacy properties, this may also return %NULL if an error
occurs.</doc>
          <type name="Server" c:type="SoupServer*"/>
        </return-value>
        <parameters>
          <parameter name="optname1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1004">name of first property to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1005">value of @optname1, followed by additional property/value pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="request_aborted">
        <source-position filename="../libsoup/soup-server.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_finished">
        <source-position filename="../libsoup/soup-server.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_read">
        <source-position filename="../libsoup/soup-server.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_started">
        <source-position filename="../libsoup/soup-server.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="ClientContext" c:type="SoupClientContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="accept_iostream"
              c:identifier="soup_server_accept_iostream"
              version="2.50"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1555">Add a new client stream to the @server.</doc>
        <source-position filename="../libsoup/soup-server.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="1565">%TRUE on success, %FALSE if the stream could not be
accepted or any other error occurred (in which case @error will be
set).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1557">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1558">a #GIOStream</doc>
            <type name="Gio.IOStream" c:type="GIOStream*"/>
          </parameter>
          <parameter name="local_addr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1559">the local #GSocketAddress associated with the @stream</doc>
            <type name="Gio.SocketAddress" c:type="GSocketAddress*"/>
          </parameter>
          <parameter name="remote_addr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1560">the remote #GSocketAddress associated with the @stream</doc>
            <type name="Gio.SocketAddress" c:type="GSocketAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_auth_domain"
              c:identifier="soup_server_add_auth_domain">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2812">Adds an authentication domain to @server. Each auth domain will
have the chance to require authentication for each request that
comes in; normally auth domains will require authentication for
requests on certain paths that they have been set up to watch, or
that meet other criteria set by the caller. If an auth domain
determines that a request requires authentication (and the request
doesn't contain authentication), @server will automatically reject
the request with an appropriate status (401 Unauthorized or 407
Proxy Authentication Required). If the request used the
"100-continue" Expectation, @server will reject it before the
request body is sent.</doc>
        <source-position filename="../libsoup/soup-server.h" line="169"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2814">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="auth_domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2815">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_early_handler"
              c:identifier="soup_server_add_early_handler"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2657">Adds an "early" handler to @server for requests under @path. Note
that "normal" and "early" handlers are matched up together, so if
you add a normal handler for "/foo" and an early handler for
"/foo/bar", then a request to "/foo/bar" (or any path below it)
will run only the early handler. (But if you add both handlers at
the same path, then both will get run.)

For requests under @path (that have not already been assigned a
status code by a #SoupAuthDomain or a signal handler), @callback
will be invoked after receiving the request headers, but before
receiving the request body; the message's #SoupMessage:method and
#SoupMessage:request-headers fields will be filled in.

Early handlers are generally used for processing requests with
request bodies in a streaming fashion. If you determine that the
request will contain a message body, normally you would call
soup_message_body_set_accumulate() on the message's
#SoupMessage:request-body to turn off request-body accumulation,
and connect to the message's #SoupMessage::got-chunk signal to
process each chunk as it comes in.

To complete the message processing after the full message body has
been read, you can either also connect to #SoupMessage::got-body,
or else you can register a non-early handler for @path as well. As
long as you have not set the #SoupMessage:status-code by the time
#SoupMessage::got-body is emitted, the non-early handler will be
run as well.</doc>
        <source-position filename="../libsoup/soup-server.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2659">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2660">the toplevel path for the handler</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2661">callback to invoke for requests under @path</doc>
            <type name="ServerCallback" c:type="SoupServerCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2662">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2663">destroy notifier to free @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_handler" c:identifier="soup_server_add_handler">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2590">Adds a handler to @server for requests under @path. If @path is
%NULL or "/", then this will be the default handler for all
requests that don't have a more specific handler. (Note though that
if you want to handle requests to the special "*" URI, you must
explicitly register a handler for "*"; the default handler will not
be used for that case.)

For requests under @path (that have not already been assigned a
status code by a #SoupAuthDomain, an early #SoupServerHandler, or a
signal handler), @callback will be invoked after receiving the
request body; the message's #SoupMessage:method,
#SoupMessage:request-headers, and #SoupMessage:request-body fields
will be filled in.

After determining what to do with the request, the callback must at
a minimum call soup_message_set_status() (or
soup_message_set_status_full()) on the message to set the response
status code. Additionally, it may set response headers and/or fill
in the response body.

If the callback cannot fully fill in the response before returning
(eg, if it needs to wait for information from a database, or
another network server), it should call soup_server_pause_message()
to tell @server to not send the response right away. When the
response is ready, call soup_server_unpause_message() to cause it
to be sent.

To send the response body a bit at a time using "chunked" encoding,
first call soup_message_headers_set_encoding() to set
%SOUP_ENCODING_CHUNKED on the #SoupMessage:response-headers. Then call
soup_message_body_append() (or soup_message_body_append_buffer())
to append each chunk as it becomes ready, and
soup_server_unpause_message() to make sure it's running. (The
server will automatically pause the message if it is using chunked
encoding but no more chunks are available.) When you are done, call
soup_message_body_complete() to indicate that no more chunks are
coming.</doc>
        <source-position filename="../libsoup/soup-server.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2592">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2593">the toplevel path for the handler</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2594">callback to invoke for requests under @path</doc>
            <type name="ServerCallback" c:type="SoupServerCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2595">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2596">destroy notifier to free @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_websocket_extension"
              c:identifier="soup_server_add_websocket_extension"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2908">Add support for a WebSocket extension of the given @extension_type.
When a WebSocket client requests an extension of @extension_type,
a new #SoupWebsocketExtension of type @extension_type will be created
to handle the request.

You can also add support for a WebSocket extension to the server at
construct time by using the %SOUP_SERVER_ADD_WEBSOCKET_EXTENSION property.
Note that #SoupWebsocketExtensionDeflate is supported by default, use
soup_server_remove_websocket_extension() if you want to disable it.</doc>
        <source-position filename="../libsoup/soup-server.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2910">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="extension_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2911">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_websocket_handler"
              c:identifier="soup_server_add_websocket_handler">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2733">Adds a WebSocket handler to @server for requests under @path. (If
@path is %NULL or "/", then this will be the default handler for
all requests that don't have a more specific handler.)

When a path has a WebSocket handler registered, @server will check
incoming requests for WebSocket handshakes after all other handlers
have run (unless some earlier handler has already set a status code
on the message), and update the request's status, response headers,
and response body accordingly.

If @origin is non-%NULL, then only requests containing a matching
"Origin" header will be accepted. If @protocols is non-%NULL, then
only requests containing a compatible "Sec-WebSocket-Protocols"
header will be accepted. More complicated requirements can be
handled by adding a normal handler to @path, and having it perform
whatever checks are needed (possibly calling
soup_server_check_websocket_handshake() one or more times), and
setting a failure status code if the handshake should be rejected.</doc>
        <source-position filename="../libsoup/soup-server.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2735">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2736">the toplevel path for the handler</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="origin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2737">the origin of the connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="protocols"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2738">the protocols
  supported by this handler</doc>
            <array c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2740">callback to invoke for successful WebSocket requests under @path</doc>
            <type name="ServerWebsocketCallback"
                  c:type="SoupServerWebsocketCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2741">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2742">destroy notifier to free @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect" c:identifier="soup_server_disconnect">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1728">Closes and frees @server's listening sockets. If you are using the
old #SoupServer APIs, this also includes the effect of
soup_server_quit().

Note that if there are currently requests in progress on @server,
that they will continue to be processed if @server's #GMainContext
is still running.

You can call soup_server_listen(), etc, after calling this function
if you want to start listening again.</doc>
        <source-position filename="../libsoup/soup-server.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1730">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_async_context"
              c:identifier="soup_server_get_async_context"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2234">Gets @server's async_context, if you are using the old API. (With
the new API, the server runs in the thread's thread-default
#GMainContext, regardless of what this method returns.)

This does not add a ref to the context, so you will need to ref it
yourself if you want it to outlive its server.</doc>
        <doc-deprecated xml:space="preserve">If you are using soup_server_listen(), etc, then
the server listens on the thread-default #GMainContext, and this
property is ignored.</doc-deprecated>
        <source-position filename="../libsoup/soup-server.h" line="219"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2245">@server's #GMainContext,
which may be %NULL</doc>
          <type name="GLib.MainContext" c:type="GMainContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2236">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_listener"
              c:identifier="soup_server_get_listener"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1131">Gets @server's listening socket, if you are using the old API.

You should treat this socket as read-only; writing to it or
modifiying it may cause @server to malfunction.</doc>
        <doc-deprecated xml:space="preserve">If you are using soup_server_listen(), etc, then use
soup_server_get_listeners() to get a list of all listening sockets,
but note that that function returns #GSockets, not #SoupSockets.</doc-deprecated>
        <source-position filename="../libsoup/soup-server.h" line="215"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="1140">the listening socket.</doc>
          <type name="Socket" c:type="SoupSocket*"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1133">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_listeners" c:identifier="soup_server_get_listeners">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1160">Gets @server's list of listening sockets.

You should treat these sockets as read-only; writing to or
modifiying any of these sockets may cause @server to malfunction.

(Beware that in contrast to the old soup_server_get_listener(), this
function returns #GSockets, not #SoupSockets.)</doc>
        <source-position filename="../libsoup/soup-server.h" line="107"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="1172">a
list of listening sockets.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Gio.Socket"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1162">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port"
              c:identifier="soup_server_get_port"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1028">Gets the TCP port that @server is listening on, if you are using
the old API.</doc>
        <doc-deprecated xml:space="preserve">If you are using soup_server_listen(), etc, then use
soup_server_get_uris() to get a list of all listening addresses.</doc-deprecated>
        <source-position filename="../libsoup/soup-server.h" line="211"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="1035">the port @server is listening on.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1030">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uris"
              c:identifier="soup_server_get_uris"
              version="2.48">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2186">Gets a list of URIs corresponding to the interfaces @server is
listening on. These will contain IP addresses, not hostnames, and
will also indicate whether the given listener is http or https.

Note that if you used soup_server_listen_all(), the returned URIs
will use the addresses &lt;literal&gt;0.0.0.0&lt;/literal&gt; and
&lt;literal&gt;::&lt;/literal&gt;, rather than actually returning separate URIs
for each interface on the system.</doc>
        <source-position filename="../libsoup/soup-server.h" line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2199">a list of
#SoupURIs, which you must free when you are done with it.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="URI"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2188">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_https" c:identifier="soup_server_is_https">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1099">Checks whether @server is capable of https.

In order for a server to run https, you must call
soup_server_set_ssl_cert_file(), or set the
#SoupServer:tls-certificate property, to provide it with a
certificate to use.

If you are using the deprecated single-listener APIs, then a return
value of %TRUE indicates that the #SoupServer serves https
exclusively. If you are using soup_server_listen(), etc, then a
%TRUE return value merely indicates that the server is
&lt;emphasis&gt;able&lt;/emphasis&gt; to do https, regardless of whether it
actually currently is or not. Use soup_server_get_uris() to see if
it currently has any https listeners.</doc>
        <source-position filename="../libsoup/soup-server.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="1118">%TRUE if @server is configured to serve https.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1101">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="listen"
              c:identifier="soup_server_listen"
              version="2.48"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1844">This attempts to set up @server to listen for connections on
@address.

If @options includes %SOUP_SERVER_LISTEN_HTTPS, and @server has
been configured for TLS, then @server will listen for https
connections on this port. Otherwise it will listen for plain http.

You may call this method (along with the other "listen" methods)
any number of times on a server, if you want to listen on multiple
ports, or set up both http and https service.

After calling this method, @server will begin accepting and
processing connections as soon as the appropriate #GMainContext is
run.

Note that #SoupServer never makes use of dual IPv4/IPv6 sockets; if
@address is an IPv6 address, it will only accept IPv6 connections.
You must configure IPv4 listening separately.</doc>
        <source-position filename="../libsoup/soup-server.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="1870">%TRUE on success, %FALSE if @address could not be
bound or any other error occurred (in which case @error will be
set).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1846">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1847">the address of the interface to listen on</doc>
            <type name="Gio.SocketAddress" c:type="GSocketAddress*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1848">listening options for this server</doc>
            <type name="ServerListenOptions" c:type="SoupServerListenOptions"/>
          </parameter>
        </parameters>
      </method>
      <method name="listen_all"
              c:identifier="soup_server_listen_all"
              version="2.48"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1980">This attempts to set up @server to listen for connections on all
interfaces on the system. (That is, it listens on the addresses
&lt;literal&gt;0.0.0.0&lt;/literal&gt; and/or &lt;literal&gt;::&lt;/literal&gt;, depending
on whether @options includes %SOUP_SERVER_LISTEN_IPV4_ONLY,
%SOUP_SERVER_LISTEN_IPV6_ONLY, or neither.) If @port is specified,
@server will listen on that port. If it is 0, @server will find an
unused port to listen on. (In that case, you can use
soup_server_get_uris() to find out what port it ended up choosing.)

See soup_server_listen() for more details.</doc>
        <source-position filename="../libsoup/soup-server.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="1998">%TRUE on success, %FALSE if @port could not be bound
or any other error occurred (in which case @error will be set).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1982">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1983">the port to listen on, or 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1984">listening options for this server</doc>
            <type name="ServerListenOptions" c:type="SoupServerListenOptions"/>
          </parameter>
        </parameters>
      </method>
      <method name="listen_fd"
              c:identifier="soup_server_listen_fd"
              version="2.48"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2136">This attempts to set up @server to listen for connections on
@fd.

See soup_server_listen() for more details.

Note that @server will close @fd when you free it or call
soup_server_disconnect().</doc>
        <source-position filename="../libsoup/soup-server.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2151">%TRUE on success, %FALSE if an error occurred (in
which case @error will be set).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2138">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2139">the file descriptor of a listening socket</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2140">listening options for this server</doc>
            <type name="ServerListenOptions" c:type="SoupServerListenOptions"/>
          </parameter>
        </parameters>
      </method>
      <method name="listen_local"
              c:identifier="soup_server_listen_local"
              version="2.48"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2034">This attempts to set up @server to listen for connections on
"localhost" (that is, &lt;literal&gt;127.0.0.1&lt;/literal&gt; and/or
&lt;literal&gt;::1&lt;/literal&gt;, depending on whether @options includes
%SOUP_SERVER_LISTEN_IPV4_ONLY, %SOUP_SERVER_LISTEN_IPV6_ONLY, or
neither). If @port is specified, @server will listen on that port.
If it is 0, @server will find an unused port to listen on. (In that
case, you can use soup_server_get_uris() to find out what port it
ended up choosing.)

See soup_server_listen() for more details.</doc>
        <source-position filename="../libsoup/soup-server.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2052">%TRUE on success, %FALSE if @port could not be bound
or any other error occurred (in which case @error will be set).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2036">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2037">the port to listen on, or 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2038">listening options for this server</doc>
            <type name="ServerListenOptions" c:type="SoupServerListenOptions"/>
          </parameter>
        </parameters>
      </method>
      <method name="listen_socket"
              c:identifier="soup_server_listen_socket"
              version="2.48"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2088">This attempts to set up @server to listen for connections on
@socket.

See soup_server_listen() for more details.</doc>
        <source-position filename="../libsoup/soup-server.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2100">%TRUE on success, %FALSE if an error occurred (in
which case @error will be set).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2090">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="socket" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2091">a listening #GSocket</doc>
            <type name="Gio.Socket" c:type="GSocket*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2092">listening options for this server</doc>
            <type name="ServerListenOptions" c:type="SoupServerListenOptions"/>
          </parameter>
        </parameters>
      </method>
      <method name="pause_message" c:identifier="soup_server_pause_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2860">Pauses I/O on @msg. This can be used when you need to return from
the server handler without having the full response ready yet. Use
soup_server_unpause_message() to resume I/O.

This must only be called on #SoupMessages which were created by the
#SoupServer and are currently doing I/O, such as those passed into a
#SoupServerCallback or emitted in a #SoupServer::request-read signal.</doc>
        <source-position filename="../libsoup/soup-server.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2862">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2863">a #SoupMessage associated with @server.</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="quit" c:identifier="soup_server_quit" deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1690">Stops processing for @server, if you are using the old API. Call
this to clean up after soup_server_run_async(), or to terminate a
call to soup_server_run().

Note that messages currently in progress will continue to be
handled, if the main loop associated with the server is resumed or
kept running.

@server is still in a working state after this call; you can start
and stop a server as many times as you want.</doc>
        <doc-deprecated xml:space="preserve">When using soup_server_listen(), etc, the server will
always listen for connections, and will process them whenever the
thread-default #GMainContext is running.</doc-deprecated>
        <source-position filename="../libsoup/soup-server.h" line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1692">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_auth_domain"
              c:identifier="soup_server_remove_auth_domain">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2841">Removes @auth_domain from @server.</doc>
        <source-position filename="../libsoup/soup-server.h" line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2843">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="auth_domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2844">a #SoupAuthDomain</doc>
            <type name="AuthDomain" c:type="SoupAuthDomain*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_handler" c:identifier="soup_server_remove_handler">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2794">Removes all handlers (early and normal) registered at @path.</doc>
        <source-position filename="../libsoup/soup-server.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2796">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2797">the toplevel path for the handler</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_websocket_extension"
              c:identifier="soup_server_remove_websocket_extension"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2941">Removes support for WebSocket extension of type @extension_type (or any subclass of
@extension_type) from @server. You can also remove extensions enabled by default
from the server at construct time by using the %SOUP_SERVER_REMOVE_WEBSOCKET_EXTENSION
property.</doc>
        <source-position filename="../libsoup/soup-server.h" line="161"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2943">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="extension_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2944">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="soup_server_run" deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1657">Starts @server, if you are using the old API, causing it to listen
for and process incoming connections. Unlike
soup_server_run_async(), this creates a #GMainLoop and runs it, and
it will not return until someone calls soup_server_quit() to stop
the server.</doc>
        <doc-deprecated xml:space="preserve">When using soup_server_listen(), etc, the server will
always listen for connections, and will process them whenever the
thread-default #GMainContext is running.</doc-deprecated>
        <source-position filename="../libsoup/soup-server.h" line="223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1659">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run_async"
              c:identifier="soup_server_run_async"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1612">Starts @server, if you are using the old API, causing it to listen
for and process incoming connections.

The server runs in @server's #GMainContext. It will not actually
perform any processing unless the appropriate main loop is running.
In the simple case where you did not set the server's
%SOUP_SERVER_ASYNC_CONTEXT property, this means the server will run
whenever the glib main loop is running.</doc>
        <doc-deprecated xml:space="preserve">When using soup_server_listen(), etc, the server will
always listen for connections, and will process them whenever the
thread-default #GMainContext is running.</doc-deprecated>
        <source-position filename="../libsoup/soup-server.h" line="226"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1614">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_ssl_cert_file"
              c:identifier="soup_server_set_ssl_cert_file"
              version="2.48"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1054">Sets @server up to do https, using the SSL/TLS certificate
specified by @ssl_cert_file and @ssl_key_file (which may point to
the same file).

Alternatively, you can set the #SoupServer:tls-certificate property
at construction time, if you already have a #GTlsCertificate.</doc>
        <source-position filename="../libsoup/soup-server.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="1069">success or failure.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1056">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="ssl_cert_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1057">path to a file containing a PEM-encoded SSL/TLS
  certificate.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="ssl_key_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="1059">path to a file containing a PEM-encoded private key.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unpause_message"
              c:identifier="soup_server_unpause_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="2883">Resumes I/O on @msg. Use this to resume after calling
soup_server_pause_message(), or after adding a new chunk to a
chunked response.

I/O won't actually resume until you return to the main loop.

This must only be called on #SoupMessages which were created by the
#SoupServer and are currently doing I/O, such as those passed into a
#SoupServerCallback or emitted in a #SoupServer::request-read signal.</doc>
        <source-position filename="../libsoup/soup-server.h" line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2885">a #SoupServer</doc>
            <type name="Server" c:type="SoupServer*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="2886">a #SoupMessage associated with @server.</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <property name="add-websocket-extension"
                version="2.68"
                introspectable="0"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="956">Add support for #SoupWebsocketExtension of the given type.
(Shortcut for calling soup_server_add_websocket_extension().)</doc>
        <type name="GType" c:type="GType"/>
      </property>
      <property name="async-context"
                deprecated="1"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="809">The server's #GMainContext, if you are using the old API.
Servers created using soup_server_listen() will listen on
the #GMainContext that was the thread-default context at
the time soup_server_listen() was called.</doc>
        <doc-deprecated xml:space="preserve">The new API uses the thread-default #GMainContext
rather than having an explicitly-specified one.</doc-deprecated>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="http-aliases"
                version="2.44"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="894">A %NULL-terminated array of URI schemes that should be
considered to be aliases for "http". Eg, if this included
&lt;literal&gt;"dav"&lt;/literal&gt;, than a URI of
&lt;literal&gt;dav://example.com/path&lt;/literal&gt; would be treated
identically to &lt;literal&gt;http://example.com/path&lt;/literal&gt;.
In particular, this is needed in cases where a client
sends requests with absolute URIs, where those URIs do
not use "http:".

The default value is an array containing the single element
&lt;literal&gt;"*"&lt;/literal&gt;, a special value which means that
any scheme except "https" is considered to be an alias for
"http".

See also #SoupServer:https-aliases.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="https-aliases"
                version="2.44"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="929">A comma-delimited list of URI schemes that should be
considered to be aliases for "https". See
#SoupServer:http-aliases for more information.

The default value is %NULL, meaning that no URI schemes
are considered aliases for "https".</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="interface"
                deprecated="1"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="691">The address of the network interface the server is
listening on, if you are using the old #SoupServer API.
(This will not be set if you use soup_server_listen(),
etc.)</doc>
        <doc-deprecated xml:space="preserve">#SoupServers can listen on multiple interfaces
at once now. Use soup_server_listen(), etc, to listen on an
interface, and soup_server_get_uris() to see what addresses
are being listened on.</doc-deprecated>
        <type name="Address"/>
      </property>
      <property name="port"
                deprecated="1"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="659">The port the server is listening on, if you are using the
old #SoupServer API. (This will not be set if you use
soup_server_listen(), etc.)</doc>
        <doc-deprecated xml:space="preserve">#SoupServers can listen on multiple interfaces
at once now. Use soup_server_listen(), etc, to listen on a
port, and soup_server_get_uris() to see what ports are
being listened on.</doc-deprecated>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="raw-paths"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="remove-websocket-extension"
                version="2.68"
                introspectable="0"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="978">Remove support for #SoupWebsocketExtension of the given type. (Shortcut for
calling soup_server_remove_websocket_extension().)</doc>
        <type name="GType" c:type="GType"/>
      </property>
      <property name="server-header"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="853">If non-%NULL, the value to use for the "Server" header on
#SoupMessage&lt;!-- --&gt;s processed by this server.

The Server header is the server equivalent of the
User-Agent header, and provides information about the
server and its components. It contains a list of one or
more product tokens, separated by whitespace, with the most
significant product token coming first. The tokens must be
brief, ASCII, and mostly alphanumeric (although "-", "_",
and "." are also allowed), and may optionally include a "/"
followed by a version string. You may also put comments,
enclosed in parentheses, between or after the tokens.

Some HTTP server implementations intentionally do not use
version numbers in their Server header, so that
installations running older versions of the server don't
end up advertising their vulnerability to specific security
holes.

As with #SoupSession:user_agent, if you set a
#SoupServer:server_header property that has trailing whitespace,
#SoupServer will append its own product token (eg,
"&lt;literal&gt;libsoup/2.3.2&lt;/literal&gt;") to the end of the
header for you.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ssl-cert-file"
                deprecated="1"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="732">Path to a file containing a PEM-encoded certificate.

If you set this property and #SoupServer:ssl-key-file at
construct time, then soup_server_new() will try to read the
files; if it cannot, it will return %NULL, with no explicit
indication of what went wrong (and logging a warning with
newer versions of glib, since returning %NULL from a
constructor is illegal).</doc>
        <doc-deprecated xml:space="preserve">use #SoupServer:tls-certificate or
soup_server_set_ssl_certificate().</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ssl-key-file"
                deprecated="1"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="764">Path to a file containing a PEM-encoded private key. See
#SoupServer:ssl-cert-file for more information about how this
is used.</doc>
        <doc-deprecated xml:space="preserve">use #SoupServer:tls-certificate or
soup_server_set_ssl_certificate().</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tls-certificate"
                version="2.38"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="790">A #GTlsCertificate that has a #GTlsCertificate:private-key
set. If this is set, then the server will be able to speak
https in addition to (or instead of) plain http.

Alternatively, you can call soup_server_set_ssl_cert_file()
to have #SoupServer read in a a certificate from a file.</doc>
        <type name="Gio.TlsCertificate"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="request-aborted" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="629">Emitted when processing has failed for a message; this
could mean either that it could not be read (if
#SoupServer::request_read has not been emitted for it yet),
or that the response could not be written back (if
#SoupServer::request_read has been emitted but
#SoupServer::request_finished has not been).

@message is in an undefined state when this signal is
emitted; the signal exists primarily to allow the server to
free any state that it may have allocated in
#SoupServer::request_started.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="632">the message</doc>
            <type name="Message"/>
          </parameter>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="633">the client context</doc>
            <type name="ClientContext"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-finished" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="609">Emitted when the server has finished writing a response to
a request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="612">the message</doc>
            <type name="Message"/>
          </parameter>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="613">the client context</doc>
            <type name="ClientContext"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-read" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="584">Emitted when the server has successfully read a request.
@message will have all of its request-side information
filled in, and if the message was authenticated, @client
will have information about that. This signal is emitted
before any (non-early) handlers are called for the message,
and if it sets the message's #status_code, then normal
handler processing will be skipped.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="587">the message</doc>
            <type name="Message"/>
          </parameter>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="588">the client context</doc>
            <type name="ClientContext"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-started" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="555">Emitted when the server has started reading a new request.
@message will be completely blank; not even the
Request-Line will have been read yet. About the only thing
you can usefully do with it is connect to its signals.

If the request is read successfully, this will eventually
be followed by a #SoupServer::request_read signal. If a
response is then sent, the request processing will end with
a #SoupServer::request_finished signal. If a network error
occurs, the processing will instead end with
#SoupServer::request_aborted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="558">the new message</doc>
            <type name="Message"/>
          </parameter>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-server.c"
                 line="559">the client context</doc>
            <type name="ClientContext"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <callback name="ServerCallback" c:type="SoupServerCallback">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="2535">A callback used to handle requests to a #SoupServer.

@path and @query contain the likewise-named components of the
Request-URI, subject to certain assumptions. By default,
#SoupServer decodes all percent-encoding in the URI path, such that
"/foo%&lt;!-- --&gt;2Fbar" is treated the same as "/foo/bar". If your
server is serving resources in some non-POSIX-filesystem namespace,
you may want to distinguish those as two distinct paths. In that
case, you can set the %SOUP_SERVER_RAW_PATHS property when creating
the #SoupServer, and it will leave those characters undecoded. (You
may want to call soup_uri_normalize() to decode any percent-encoded
characters that you aren't handling specially.)

@query contains the query component of the Request-URI parsed
according to the rules for HTML form handling. Although this is the
only commonly-used query string format in HTTP, there is nothing
that actually requires that HTTP URIs use that format; if your
server needs to use some other format, you can just ignore @query,
and call soup_message_get_uri() and parse the URI's query field
yourself.

See soup_server_add_handler() and soup_server_add_early_handler()
for details of what handlers can/should do.</doc>
      <source-position filename="../libsoup/soup-server.h" line="121"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="server" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2537">the #SoupServer</doc>
          <type name="Server" c:type="SoupServer*"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2538">the message being processed</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2539">the path component of @msg's Request-URI</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="query"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2540">the parsed query
  component of @msg's Request-URI</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2542">additional contextual information about the client</doc>
          <type name="ClientContext" c:type="SoupClientContext*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2543">the data passed to soup_server_add_handler() or
  soup_server_add_early_handler().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ServerClass"
            c:type="SoupServerClass"
            glib:is-gtype-struct-for="Server">
      <source-position filename="../libsoup/soup-server.h" line="56"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="request_started">
        <callback name="request_started">
          <source-position filename="../libsoup/soup-server.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="SoupServer*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="SoupClientContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_read">
        <callback name="request_read">
          <source-position filename="../libsoup/soup-server.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="SoupServer*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="SoupClientContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_finished">
        <callback name="request_finished">
          <source-position filename="../libsoup/soup-server.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="SoupServer*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="SoupClientContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_aborted">
        <callback name="request_aborted">
          <source-position filename="../libsoup/soup-server.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="Server" c:type="SoupServer*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="ClientContext" c:type="SoupClientContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-server.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-server.h" line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-server.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-server.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="ServerListenOptions"
              version="2.48"
              glib:type-name="SoupServerListenOptions"
              glib:get-type="soup_server_listen_options_get_type"
              c:type="SoupServerListenOptions">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="1779">Options to pass to soup_server_listen(), etc.

%SOUP_SERVER_LISTEN_IPV4_ONLY and %SOUP_SERVER_LISTEN_IPV6_ONLY
only make sense with soup_server_listen_all() and
soup_server_listen_local(), not plain soup_server_listen() (which
simply listens on whatever kind of socket you give it). And you
cannot specify both of them in a single call.</doc>
      <member name="https"
              value="1"
              c:identifier="SOUP_SERVER_LISTEN_HTTPS"
              glib:nick="https">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1781">Listen for https connections rather
  than plain http.</doc>
      </member>
      <member name="ipv4_only"
              value="2"
              c:identifier="SOUP_SERVER_LISTEN_IPV4_ONLY"
              glib:nick="ipv4-only">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1783">Only listen on IPv4 interfaces.</doc>
      </member>
      <member name="ipv6_only"
              value="4"
              c:identifier="SOUP_SERVER_LISTEN_IPV6_ONLY"
              glib:nick="ipv6-only">
        <doc xml:space="preserve"
             filename="../libsoup/soup-server.c"
             line="1784">Only listen on IPv6 interfaces.</doc>
      </member>
    </bitfield>
    <callback name="ServerWebsocketCallback"
              c:type="SoupServerWebsocketCallback">
      <doc xml:space="preserve"
           filename="../libsoup/soup-server.c"
           line="2716">A callback used to handle WebSocket requests to a #SoupServer. The
callback will be invoked after sending the handshake response back
to the client (and is only invoked if the handshake was
successful).

@path contains the path of the Request-URI, subject to the same
rules as #SoupServerCallback (qv).</doc>
      <source-position filename="../libsoup/soup-server.h" line="144"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="server" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2718">the #SoupServer</doc>
          <type name="Server" c:type="SoupServer*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2720">the newly created WebSocket connection</doc>
          <type name="WebsocketConnection" c:type="SoupWebsocketConnection*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2719">the path component of @msg's Request-URI</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2721">additional contextual information about the client</doc>
          <type name="ClientContext" c:type="SoupClientContext*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <doc xml:space="preserve"
               filename="../libsoup/soup-server.c"
               line="2722">the data passed to @soup_server_add_handler</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Session"
           c:symbol-prefix="session"
           c:type="SoupSession"
           parent="GObject.Object"
           glib:type-name="SoupSession"
           glib:get-type="soup_session_get_type"
           glib:type-struct="SessionClass">
      <source-position filename="../libsoup/soup-session.h" line="60"/>
      <constructor name="new" c:identifier="soup_session_new" version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="876">Creates a #SoupSession with the default options.</doc>
        <source-position filename="../libsoup/soup-session.h" line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="881">the new session.</doc>
          <type name="Session" c:type="SoupSession*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_options"
                   c:identifier="soup_session_new_with_options"
                   version="2.42"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="891">Creates a #SoupSession with the specified options.</doc>
        <source-position filename="../libsoup/soup-session.h" line="93"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="898">the new session.</doc>
          <type name="Session" c:type="SoupSession*"/>
        </return-value>
        <parameters>
          <parameter name="optname1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="893">name of first property to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="894">value of @optname1, followed by additional property/value pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="auth_required">
        <source-position filename="../libsoup/soup-session.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <type name="Auth" c:type="SoupAuth*"/>
          </parameter>
          <parameter name="retrying" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="authenticate">
        <source-position filename="../libsoup/soup-session.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <type name="Auth" c:type="SoupAuth*"/>
          </parameter>
          <parameter name="retrying" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cancel_message" invoker="cancel_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2419">Causes @session to immediately finish processing @msg (regardless
of its current state) with a final status_code of @status_code. You
may call this at any time after handing @msg off to @session; if
@session has started sending the request but has not yet received
the complete response, then it will close the request's connection.
Note that with requests that have side effects (eg,
&lt;literal&gt;POST&lt;/literal&gt;, &lt;literal&gt;PUT&lt;/literal&gt;,
&lt;literal&gt;DELETE&lt;/literal&gt;) it is possible that you might cancel the
request after the server acts on it, but before it returns a
response, leaving the remote resource in an unknown state.

If the message is cancelled while its response body is being read,
then the response body in @msg will be left partially-filled-in.
The response headers, on the other hand, will always be either
empty or complete.

Beware that with the deprecated #SoupSessionAsync, messages queued
with soup_session_queue_message() will have their callbacks invoked
before soup_session_cancel_message() returns. The plain
#SoupSession does not have this behavior; cancelling an
asynchronous message will merely queue its callback to be run after
returning to the main loop.</doc>
        <source-position filename="../libsoup/soup-session.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2421">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2422">the message to cancel</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="status_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2423">status code to set on @msg (generally
%SOUP_STATUS_CANCELLED)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="flush_queue">
        <source-position filename="../libsoup/soup-session.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="kick">
        <source-position filename="../libsoup/soup-session.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="queue_message" invoker="queue_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2146">Queues the message @msg for asynchronously sending the request and
receiving a response in the current thread-default #GMainContext.
If @msg has been processed before, any resources related to the
time it was last sent are freed.

Upon message completion, the callback specified in @callback will
be invoked. If after returning from this callback the message has not
been requeued, @msg will be unreffed.

(The behavior above applies to a plain #SoupSession; if you are
using #SoupSessionAsync or #SoupSessionSync, then the #GMainContext
that is used depends on the settings of #SoupSession:async-context
and #SoupSession:use-thread-context, and for #SoupSessionSync, the
message will actually be sent and processed in another thread, with
only the final callback occurring in the indicated #GMainContext.)

Contrast this method with soup_session_send_async(), which also
asynchronously sends a message, but returns before reading the
response body, and allows you to read the response via a
#GInputStream.</doc>
        <source-position filename="../libsoup/soup-session.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2148">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2149">the message to queue</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2150">a #SoupSessionCallback which will
be called after the message completes or when an unrecoverable error occurs.</doc>
            <type name="SessionCallback" c:type="SoupSessionCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2152">a pointer passed to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_started">
        <source-position filename="../libsoup/soup-session.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="socket" transfer-ownership="none">
            <type name="Socket" c:type="SoupSocket*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="requeue_message" invoker="requeue_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2212">This causes @msg to be placed back on the queue to be attempted
again.</doc>
        <source-position filename="../libsoup/soup-session.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2214">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2215">the message to requeue</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="send_message" invoker="send_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2243">Synchronously send @msg. This call will not return until the
transfer is finished successfully or there is an unrecoverable
error.

Unlike with soup_session_queue_message(), @msg is not freed upon
return.

(Note that if you call this method on a #SoupSessionAsync, it will
still use asynchronous I/O internally, running the glib main loop
to process the message, which may also cause other events to be
processed.)

Contrast this method with soup_session_send(), which also
synchronously sends a message, but returns before reading the
response body, and allows you to read the response via a
#GInputStream.</doc>
        <source-position filename="../libsoup/soup-session.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="2265">the HTTP status code of the response</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2245">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2246">the message to send</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="abort" c:identifier="soup_session_abort">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2526">Cancels all pending requests in @session and closes all idle
persistent connections.

The message cancellation has the same semantics as with
soup_session_cancel_message(); asynchronous requests on a
#SoupSessionAsync will have their callback called before
soup_session_abort() returns. Requests on a plain #SoupSession will
not.</doc>
        <source-position filename="../libsoup/soup-session.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2528">the session</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_feature"
              c:identifier="soup_session_add_feature"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2665">Adds @feature's functionality to @session. You can also add a
feature to the session at construct time by using the
%SOUP_SESSION_ADD_FEATURE property.

See the main #SoupSession documentation for information on what
features are present in sessions by default.</doc>
        <source-position filename="../libsoup/soup-session.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2667">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2668">an object that implements #SoupSessionFeature</doc>
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_feature_by_type"
              c:identifier="soup_session_add_feature_by_type"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2702">If @feature_type is the type of a class that implements
#SoupSessionFeature, this creates a new feature of that type and
adds it to @session as with soup_session_add_feature(). You can use
this when you don't need to customize the new feature in any way.

If @feature_type is not a #SoupSessionFeature type, this gives each
existing feature on @session the chance to accept @feature_type as
a "subfeature". This can be used to add new #SoupAuth or
#SoupRequest types, for instance.

You can also add a feature to the session at construct time by
using the %SOUP_SESSION_ADD_FEATURE_BY_TYPE property.

See the main #SoupSession documentation for information on what
features are present in sessions by default.</doc>
        <source-position filename="../libsoup/soup-session.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2704">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="feature_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2705">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel_message" c:identifier="soup_session_cancel_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2419">Causes @session to immediately finish processing @msg (regardless
of its current state) with a final status_code of @status_code. You
may call this at any time after handing @msg off to @session; if
@session has started sending the request but has not yet received
the complete response, then it will close the request's connection.
Note that with requests that have side effects (eg,
&lt;literal&gt;POST&lt;/literal&gt;, &lt;literal&gt;PUT&lt;/literal&gt;,
&lt;literal&gt;DELETE&lt;/literal&gt;) it is possible that you might cancel the
request after the server acts on it, but before it returns a
response, leaving the remote resource in an unknown state.

If the message is cancelled while its response body is being read,
then the response body in @msg will be left partially-filled-in.
The response headers, on the other hand, will always be either
empty or complete.

Beware that with the deprecated #SoupSessionAsync, messages queued
with soup_session_queue_message() will have their callbacks invoked
before soup_session_cancel_message() returns. The plain
#SoupSession does not have this behavior; cancelling an
asynchronous message will merely queue its callback to be run after
returning to the main loop.</doc>
        <source-position filename="../libsoup/soup-session.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2421">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2422">the message to cancel</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="status_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2423">status code to set on @msg (generally
%SOUP_STATUS_CANCELLED)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_async"
              c:identifier="soup_session_connect_async"
              version="2.62">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="5055">Start a connection to @uri. The operation can be monitored by providing a @progress_callback
and finishes when the connection is done or an error ocurred.

Call soup_session_connect_finish() to get the #GIOStream to communicate with the server.</doc>
        <source-position filename="../libsoup/soup-session.h" line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="5057">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="5058">a #SoupURI to connect to</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="5059">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="5060">a #SoupSessionConnectProgressCallback which
will be called for every network event that occurs during the connection.</doc>
            <type name="SessionConnectProgressCallback"
                  c:type="SoupSessionConnectProgressCallback"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="5062">the callback to invoke when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="5063">data for @progress_callback and @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="soup_session_connect_finish"
              version="2.62"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="5114">Gets the #GIOStream created for the connection to communicate with the server.</doc>
        <source-position filename="../libsoup/soup-session.h" line="251"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="5122">a new #GIOStream, or %NULL on error.</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="5116">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="5117">the #GAsyncResult passed to your callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_async_context"
              c:identifier="soup_session_get_async_context">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="917">Gets @session's #SoupSession:async-context. This does not add a ref
to the context, so you will need to ref it yourself if you want it
to outlive its session.

For a modern #SoupSession, this will always just return the
thread-default #GMainContext, and so is not especially useful.</doc>
        <source-position filename="../libsoup/soup-session.h" line="124"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="928">@session's #GMainContext,
which may be %NULL</doc>
          <type name="GLib.MainContext" c:type="GMainContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="919">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_feature"
              c:identifier="soup_session_get_feature"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2922">Gets the first feature in @session of type @feature_type. For
features where there may be more than one feature of a given type,
use soup_session_get_features().</doc>
        <source-position filename="../libsoup/soup-session.h" line="182"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="2931">a #SoupSessionFeature, or
%NULL. The feature is owned by @session.</doc>
          <type name="SessionFeature" c:type="SoupSessionFeature*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2924">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="feature_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2925">the #GType of the feature to get</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_feature_for_message"
              c:identifier="soup_session_get_feature_for_message"
              version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2964">Gets the first feature in @session of type @feature_type, provided
that it is not disabled for @msg. As with
soup_session_get_feature(), this should only be used for features
where @feature_type is only expected to match a single feature. In
particular, if there are two matching features, and the first is
disabled on @msg, and the second is not, then this will return
%NULL, not the second feature.</doc>
        <source-position filename="../libsoup/soup-session.h" line="185"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="2978">a #SoupSessionFeature, or %NULL. The
feature is owned by @session.</doc>
          <type name="SessionFeature" c:type="SoupSessionFeature*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2966">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="feature_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2967">the #GType of the feature to get</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2968">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_features"
              c:identifier="soup_session_get_features"
              version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2892">Generates a list of @session's features of type @feature_type. (If
you want to see all features, you can pass %SOUP_TYPE_SESSION_FEATURE
for @feature_type.)</doc>
        <source-position filename="../libsoup/soup-session.h" line="179"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="2901">
a list of features. You must free the list, but not its contents</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="SessionFeature"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2894">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="feature_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2895">the #GType of the class of features to get</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_feature"
              c:identifier="soup_session_has_feature"
              version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2849">Tests if @session has at a feature of type @feature_type (which can
be the type of either a #SoupSessionFeature, or else a subtype of
some class managed by another feature, such as #SoupAuth or
#SoupRequest).</doc>
        <source-position filename="../libsoup/soup-session.h" line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="2859">%TRUE or %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2851">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="feature_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2852">the #GType of the class of features to check for</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="pause_message" c:identifier="soup_session_pause_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2277">Pauses HTTP I/O on @msg. Call soup_session_unpause_message() to
resume I/O.

This may only be called for asynchronous messages (those sent on a
#SoupSessionAsync or using soup_session_queue_message()).</doc>
        <source-position filename="../libsoup/soup-session.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2279">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2280">a #SoupMessage currently running on @session</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prefetch_dns"
              c:identifier="soup_session_prefetch_dns"
              version="2.38">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2625">Tells @session that an URI from the given @hostname may be requested
shortly, and so the session can try to prepare by resolving the
domain name in advance, in order to work more quickly once the URI
is actually requested.

If @cancellable is non-%NULL, it can be used to cancel the
resolution. @callback will still be invoked in this case, with a
status of %SOUP_STATUS_CANCELLED.</doc>
        <source-position filename="../libsoup/soup-session.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2627">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2628">a hostname to be resolved</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2629">a #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2630">callback to call with the
    result, or %NULL</doc>
            <type name="AddressCallback" c:type="SoupAddressCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2632">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_for_uri"
              c:identifier="soup_session_prepare_for_uri"
              version="2.30"
              deprecated="1"
              deprecated-version="2.38">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2599">Tells @session that @uri may be requested shortly, and so the
session can try to prepare (resolving the domain name, obtaining
proxy address, etc.) in order to work more quickly once the URI is
actually requested.</doc>
        <doc-deprecated xml:space="preserve">use soup_session_prefetch_dns() instead</doc-deprecated>
        <source-position filename="../libsoup/soup-session.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2601">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2602">a #SoupURI which may be required</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_message" c:identifier="soup_session_queue_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2146">Queues the message @msg for asynchronously sending the request and
receiving a response in the current thread-default #GMainContext.
If @msg has been processed before, any resources related to the
time it was last sent are freed.

Upon message completion, the callback specified in @callback will
be invoked. If after returning from this callback the message has not
been requeued, @msg will be unreffed.

(The behavior above applies to a plain #SoupSession; if you are
using #SoupSessionAsync or #SoupSessionSync, then the #GMainContext
that is used depends on the settings of #SoupSession:async-context
and #SoupSession:use-thread-context, and for #SoupSessionSync, the
message will actually be sent and processed in another thread, with
only the final callback occurring in the indicated #GMainContext.)

Contrast this method with soup_session_send_async(), which also
asynchronously sends a message, but returns before reading the
response body, and allows you to read the response via a
#GInputStream.</doc>
        <source-position filename="../libsoup/soup-session.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2148">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2149">the message to queue</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2150">a #SoupSessionCallback which will
be called after the message completes or when an unrecoverable error occurs.</doc>
            <type name="SessionCallback" c:type="SoupSessionCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2152">a pointer passed to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="redirect_message"
              c:identifier="soup_session_redirect_message"
              version="2.38">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="1143">Updates @msg's URI according to its status code and "Location"
header, and requeues it on @session. Use this when you have set
%SOUP_MESSAGE_NO_REDIRECT on a message, but have decided to allow a
particular redirection to occur, or if you want to allow a
redirection that #SoupSession will not perform automatically (eg,
redirecting a non-safe method such as DELETE).

If @msg's status code indicates that it should be retried as a GET
request, then @msg will be modified accordingly.

If @msg has already been redirected too many times, this will
cause it to fail with %SOUP_STATUS_TOO_MANY_REDIRECTS.</doc>
        <source-position filename="../libsoup/soup-session.h" line="160"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="1161">%TRUE if a redirection was applied, %FALSE if not
(eg, because there was no Location header, or it could not be
parsed).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="1145">the session</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="1146">a #SoupMessage that has received a 3xx response</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_feature"
              c:identifier="soup_session_remove_feature"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2761">Removes @feature's functionality from @session.</doc>
        <source-position filename="../libsoup/soup-session.h" line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2763">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2764">a feature that has previously been added to @session</doc>
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_feature_by_type"
              c:identifier="soup_session_remove_feature_by_type"
              version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2795">Removes all features of type @feature_type (or any subclass of
@feature_type) from @session. You can also remove standard features
from the session at construct time by using the
%SOUP_SESSION_REMOVE_FEATURE_BY_TYPE property.</doc>
        <source-position filename="../libsoup/soup-session.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2797">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="feature_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2798">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="request"
              c:identifier="soup_session_request"
              version="2.42"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4545">Creates a #SoupRequest for retrieving @uri_string.</doc>
        <source-position filename="../libsoup/soup-session.h" line="190"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4553">a new #SoupRequest, or
  %NULL on error.</doc>
          <type name="Request" c:type="SoupRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4547">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="uri_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4548">a URI, in string form</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_http"
              c:identifier="soup_session_request_http"
              version="2.42"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4642">Creates a #SoupRequest for retrieving @uri_string, which must be an
"http" or "https" URI (or another protocol listed in @session's
#SoupSession:http-aliases or #SoupSession:https-aliases).</doc>
        <source-position filename="../libsoup/soup-session.h" line="198"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4653">a new #SoupRequestHTTP, or
  %NULL on error.</doc>
          <type name="RequestHTTP" c:type="SoupRequestHTTP*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4644">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4645">an HTTP method</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="uri_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4646">a URI, in string form</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_http_uri"
              c:identifier="soup_session_request_http_uri"
              version="2.42"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4673">Creates a #SoupRequest for retrieving @uri, which must be an
"http" or "https" URI (or another protocol listed in @session's
#SoupSession:http-aliases or #SoupSession:https-aliases).</doc>
        <source-position filename="../libsoup/soup-session.h" line="203"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4684">a new #SoupRequestHTTP, or
  %NULL on error.</doc>
          <type name="RequestHTTP" c:type="SoupRequestHTTP*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4675">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4676">an HTTP method</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4677">a #SoupURI representing the URI to retrieve</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_uri"
              c:identifier="soup_session_request_uri"
              version="2.42"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4578">Creates a #SoupRequest for retrieving @uri.</doc>
        <source-position filename="../libsoup/soup-session.h" line="194"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4586">a new #SoupRequest, or
  %NULL on error.</doc>
          <type name="Request" c:type="SoupRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4580">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4581">a #SoupURI representing the URI to retrieve</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="requeue_message"
              c:identifier="soup_session_requeue_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2212">This causes @msg to be placed back on the queue to be attempted
again.</doc>
        <source-position filename="../libsoup/soup-session.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2214">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2215">the message to requeue</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send"
              c:identifier="soup_session_send"
              version="2.42"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4398">Synchronously sends @msg and waits for the beginning of a response.
On success, a #GInputStream will be returned which you can use to
read the response body. ("Success" here means only that an HTTP
response was received and understood; it does not necessarily mean
that a 2xx class status code was received.)

If non-%NULL, @cancellable can be used to cancel the request;
soup_session_send() will return a %G_IO_ERROR_CANCELLED error. Note
that with requests that have side effects (eg,
&lt;literal&gt;POST&lt;/literal&gt;, &lt;literal&gt;PUT&lt;/literal&gt;,
&lt;literal&gt;DELETE&lt;/literal&gt;) it is possible that you might cancel the
request after the server acts on it, but before it returns a
response, leaving the remote resource in an unknown state.

If @msg is requeued due to a redirect or authentication, the
initial (3xx/401/407) response body will be suppressed, and
soup_session_send() will only return once a final response has been
received.

Contrast this method with soup_session_send_message(), which also
synchronously sends a #SoupMessage, but doesn't return until the
response has been completely read.

(Note that this method cannot be called on the deprecated
#SoupSessionAsync subclass.)</doc>
        <source-position filename="../libsoup/soup-session.h" line="137"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4431">a #GInputStream for reading the
  response body, or %NULL on error.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4400">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4401">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4402">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_async"
              c:identifier="soup_session_send_async"
              version="2.42">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4280">Asynchronously sends @msg and waits for the beginning of a
response. When @callback is called, then either @msg has been sent,
and its response headers received, or else an error has occurred.
Call soup_session_send_finish() to get a #GInputStream for reading
the response body.

See soup_session_send() for more details on the general semantics.

Contrast this method with soup_session_queue_message(), which also
asynchronously sends a #SoupMessage, but doesn't invoke its
callback until the response has been completely read.

(Note that this method cannot be called on the deprecated
#SoupSessionSync subclass, and can only be called on
#SoupSessionAsync if you have set the
#SoupSession:use-thread-context property.)</doc>
        <source-position filename="../libsoup/soup-session.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4282">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4283">a #SoupMessage</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4284">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4285">the callback to invoke</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4286">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_finish"
              c:identifier="soup_session_send_finish"
              version="2.42"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4356">Gets the response to a soup_session_send_async() call and (if
successful), returns a #GInputStream that can be used to read the
response body.</doc>
        <source-position filename="../libsoup/soup-session.h" line="133"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4366">a #GInputStream for reading the
  response body, or %NULL on error.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4358">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4359">the #GAsyncResult passed to your callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_message" c:identifier="soup_session_send_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2243">Synchronously send @msg. This call will not return until the
transfer is finished successfully or there is an unrecoverable
error.

Unlike with soup_session_queue_message(), @msg is not freed upon
return.

(Note that if you call this method on a #SoupSessionAsync, it will
still use asynchronous I/O internally, running the glib main loop
to process the message, which may also cause other events to be
processed.)

Contrast this method with soup_session_send(), which also
synchronously sends a message, but returns before reading the
response body, and allows you to read the response via a
#GInputStream.</doc>
        <source-position filename="../libsoup/soup-session.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="2265">the HTTP status code of the response</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2245">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2246">the message to send</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="steal_connection"
              c:identifier="soup_session_steal_connection"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4772">"Steals" the HTTP connection associated with @msg from @session.
This happens immediately, regardless of the current state of the
connection, and @msg's callback will not be called. You can steal
the connection from a #SoupMessage signal handler if you need to
wait for part or all of the response to be received first.

Calling this function may cause @msg to be freed if you are not
holding any other reference to it.</doc>
        <source-position filename="../libsoup/soup-session.h" line="220"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4786">the #GIOStream formerly associated
  with @msg (or %NULL if @msg was no longer associated with a
  connection). No guarantees are made about what kind of #GIOStream
  is returned.</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4774">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4775">the message whose connection is to be stolen</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unpause_message"
              c:identifier="soup_session_unpause_message">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="2357">Resumes HTTP I/O on @msg. Use this to resume after calling
soup_session_pause_message().

If @msg is being sent via blocking I/O, this will resume reading or
writing immediately. If @msg is using non-blocking I/O, then
reading or writing won't resume until you return to the main loop.

This may only be called for asynchronous messages (those sent on a
#SoupSessionAsync or using soup_session_queue_message()).</doc>
        <source-position filename="../libsoup/soup-session.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2359">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2360">a #SoupMessage currently running on @session</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="websocket_connect_async"
              c:identifier="soup_session_websocket_connect_async"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4882">Asynchronously creates a #SoupWebsocketConnection to communicate
with a remote server.

All necessary WebSocket-related headers will be added to @msg, and
it will then be sent and asynchronously processed normally
(including handling of redirection and HTTP authentication).

If the server returns "101 Switching Protocols", then @msg's status
code and response headers will be updated, and then the WebSocket
handshake will be completed. On success,
soup_session_websocket_connect_finish() will return a new
#SoupWebsocketConnection. On failure it will return a #GError.

If the server returns a status other than "101 Switching
Protocols", then @msg will contain the complete response headers
and body from the server's response, and
soup_session_websocket_connect_finish() will return
%SOUP_WEBSOCKET_ERROR_NOT_WEBSOCKET.</doc>
        <source-position filename="../libsoup/soup-session.h" line="224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4884">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4885">#SoupMessage indicating the WebSocket server to connect to</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="origin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4886">origin of the connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="protocols"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4887">a
  %NULL-terminated array of protocols supported</doc>
            <array c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4889">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4890">the callback to invoke</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4891">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="websocket_connect_finish"
              c:identifier="soup_session_websocket_connect_finish"
              version="2.50"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="4956">Gets the #SoupWebsocketConnection response to a
soup_session_websocket_connect_async() call and (if successful),
returns a #SoupWebsocketConnection that can be used to communicate
with the server.</doc>
        <source-position filename="../libsoup/soup-session.h" line="233"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4967">a new #SoupWebsocketConnection, or
  %NULL on error.</doc>
          <type name="WebsocketConnection" c:type="SoupWebsocketConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4958">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="4959">the #GAsyncResult passed to your callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="would_redirect"
              c:identifier="soup_session_would_redirect"
              version="2.38">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="1102">Checks if @msg contains a response that would cause @session to
redirect it to a new URL (ignoring @msg's %SOUP_MESSAGE_NO_REDIRECT
flag, and the number of times it has already been redirected).</doc>
        <source-position filename="../libsoup/soup-session.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="1111">whether @msg would be redirected</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="1104">a #SoupSession</doc>
            <type name="Session" c:type="SoupSession*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="1105">a #SoupMessage that has response headers</doc>
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <property name="accept-language"
                version="2.30"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3628">If non-%NULL, the value to use for the "Accept-Language" header
on #SoupMessage&lt;!-- --&gt;s sent from this session.

Setting this will disable
#SoupSession:accept-language-auto.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="accept-language-auto"
                version="2.30"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3655">If %TRUE, #SoupSession will automatically set the string
for the "Accept-Language" header on every #SoupMessage
sent, based on the return value of g_get_language_names().

Setting this will override any previous value of
#SoupSession:accept-language.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="add-feature"
                version="2.24"
                introspectable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3683">Add a feature object to the session. (Shortcut for calling
soup_session_add_feature().)</doc>
        <type name="SessionFeature"/>
      </property>
      <property name="add-feature-by-type"
                version="2.24"
                introspectable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3706">Add a feature object of the given type to the session.
(Shortcut for calling soup_session_add_feature_by_type().)</doc>
        <type name="GType" c:type="GType"/>
      </property>
      <property name="async-context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3496">The #GMainContext that miscellaneous session-related
asynchronous callbacks are invoked on. (Eg, setting
#SoupSession:idle-timeout will add a timeout source on this
context.)

For a plain #SoupSession, this property is always set to
the #GMainContext that is the thread-default at the time
the session was created, and cannot be overridden. For the
deprecated #SoupSession subclasses, the default value is
%NULL, meaning to use the global default #GMainContext.

If #SoupSession:use-thread-context is %FALSE, this context
will also be used for asynchronous HTTP I/O.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="http-aliases"
                version="2.38"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3753">A %NULL-terminated array of URI schemes that should be
considered to be aliases for "http". Eg, if this included
&lt;literal&gt;"dav"&lt;/literal&gt;, than a URI of
&lt;literal&gt;dav://example.com/path&lt;/literal&gt; would be treated
identically to &lt;literal&gt;http://example.com/path&lt;/literal&gt;.

In a plain #SoupSession, the default value is %NULL,
meaning that only "http" is recognized as meaning "http".
In #SoupSessionAsync and #SoupSessionSync, for backward
compatibility, the default value is an array containing the
single element &lt;literal&gt;"*"&lt;/literal&gt;, a special value
which means that any scheme except "https" is considered to
be an alias for "http".

See also #SoupSession:https-aliases.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="https-aliases"
                version="2.38"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3789">A comma-delimited list of URI schemes that should be
considered to be aliases for "https". See
#SoupSession:http-aliases for more information.

The default value is %NULL, meaning that no URI schemes
are considered aliases for "https".</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="idle-timeout"
                version="2.24"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3296">Connection lifetime (in seconds) when idle. Any connection
left idle longer than this will be closed.

Although you can change this property at any time, it will
only affect newly-created connections, not currently-open
ones. You can call soup_session_abort() after setting this
if you want to ensure that all future connections will have
this timeout value.

Note that the default value of 60 seconds only applies to
plain #SoupSessions. If you are using #SoupSessionAsync or
#SoupSessionSync, the default value is 0 (meaning idle
connections will never time out).</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="local-address"
                version="2.42"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3824">Sets the #SoupAddress to use for the client side of
the connection.

Use this property if you want for instance to bind the
local socket to a specific IP address.</doc>
        <type name="Address"/>
      </property>
      <property name="max-conns" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="max-conns-per-host"
                writable="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="proxy-resolver"
                version="2.42"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3237">A #GProxyResolver to use with this session. Setting this
will clear the #SoupSession:proxy-uri property, and remove
any &lt;type&gt;SoupProxyURIResolver&lt;/type&gt; features that have
been added to the session.

By default, in a plain #SoupSession, this is set to the
default #GProxyResolver, but you can set it to %NULL if you
don't want to use proxies, or set it to your own
#GProxyResolver if you want to control what proxies get
used.</doc>
        <type name="Gio.ProxyResolver"/>
      </property>
      <property name="proxy-uri"
                deprecated="1"
                deprecated-version="2.70"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3200">A proxy to use for all http and https requests in this
session. Setting this will clear the
#SoupSession:proxy-resolver property, and remove any
&lt;type&gt;SoupProxyURIResolver&lt;/type&gt; features that have been
added to the session. Setting this property will also
cancel all currently pending messages.

Note that #SoupSession will normally handle looking up the
user's proxy settings for you; you should only use
#SoupSession:proxy-uri if you need to override the user's
normal proxy settings.

Also note that this proxy will be used for
&lt;emphasis&gt;all&lt;/emphasis&gt; requests; even requests to
&lt;literal&gt;localhost&lt;/literal&gt;. If you need more control over
proxies, you can create a #GSimpleProxyResolver and set the
#SoupSession:proxy-resolver property.</doc>
        <doc-deprecated xml:space="preserve">Use SoupSession:proxy-resolver along with #GSimpleProxyResolver.</doc-deprecated>
        <type name="URI"/>
      </property>
      <property name="remove-feature-by-type"
                version="2.24"
                introspectable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3729">Remove feature objects from the session. (Shortcut for
calling soup_session_remove_feature_by_type().)</doc>
        <type name="GType" c:type="GType"/>
      </property>
      <property name="ssl-ca-file"
                deprecated="1"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3351">File containing SSL CA certificates.

If the specified file does not exist or cannot be read,
then libsoup will print a warning, and then behave as
though it had read in a empty CA file, meaning that all SSL
certificates will be considered invalid.</doc>
        <doc-deprecated xml:space="preserve">use #SoupSession:ssl-use-system-ca-file, or
else #SoupSession:tls-database with a #GTlsFileDatabase
(which allows you to do explicit error handling).</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ssl-strict"
                version="2.30"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3460">Normally, if #SoupSession:tls-database is set (including if
it was set via #SoupSession:ssl-use-system-ca-file or
#SoupSession:ssl-ca-file), then libsoup will reject any
certificate that is invalid (ie, expired) or that is not
signed by one of the given CA certificates, and the
#SoupMessage will fail with the status
%SOUP_STATUS_SSL_FAILED.

If you set #SoupSession:ssl-strict to %FALSE, then all
certificates will be accepted, and you will need to call
soup_message_get_https_status() to distinguish valid from
invalid certificates. (This can be used, eg, if you want to
accept invalid certificates after giving some sort of
warning.)

For a plain #SoupSession, if the session has no CA file or
TLS database, and this property is %TRUE, then all
certificates will be rejected. However, beware that the
deprecated #SoupSession subclasses (#SoupSessionAsync and
#SoupSessionSync) have the opposite behavior: if there is
no CA file or TLS database, then all certificates are always
accepted, and this property has no effect.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ssl-use-system-ca-file"
                version="2.38"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3386">Setting this to %TRUE is equivalent to setting
#SoupSession:tls-database to the default system CA database.
(and likewise, setting #SoupSession:tls-database to the
default database by hand will cause this property to
become %TRUE).

Setting this to %FALSE (when it was previously %TRUE) will
clear the #SoupSession:tls-database field.

See #SoupSession:ssl-strict for more information on how
https certificate validation is handled.

Note that the default value of %TRUE only applies to plain
#SoupSessions. If you are using #SoupSessionAsync or
#SoupSessionSync, the default value is %FALSE, for backward
compatibility.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="timeout" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3551">The timeout (in seconds) for socket I/O operations
(including connecting to a server, and waiting for a reply
to an HTTP request).

Although you can change this property at any time, it will
only affect newly-created connections, not currently-open
ones. You can call soup_session_abort() after setting this
if you want to ensure that all future connections will have
this timeout value.

Note that the default value of 60 seconds only applies to
plain #SoupSessions. If you are using #SoupSessionAsync or
#SoupSessionSync, the default value is 0 (meaning socket I/O
will not time out).

Not to be confused with #SoupSession:idle-timeout (which is
the length of time that idle persistent connections will be
kept open).</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="tls-database"
                version="2.38"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3423">Sets the #GTlsDatabase to use for validating SSL/TLS
certificates.

Note that setting the #SoupSession:ssl-ca-file or
#SoupSession:ssl-use-system-ca-file property will cause
this property to be set to a #GTlsDatabase corresponding to
the indicated file or system default.

See #SoupSession:ssl-strict for more information on how
https certificate validation is handled.

If you are using a plain #SoupSession then
#SoupSession:ssl-use-system-ca-file will be %TRUE by
default, and so this property will be a copy of the system
CA database. If you are using #SoupSessionAsync or
#SoupSessionSync, this property will be %NULL by default.</doc>
        <type name="Gio.TlsDatabase"/>
      </property>
      <property name="tls-interaction"
                version="2.48"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3851">A #GTlsInteraction object that will be passed on to any
#GTlsConnections created by the session. (This can be used to
provide client-side certificates, for example.)</doc>
        <type name="Gio.TlsInteraction"/>
      </property>
      <property name="use-ntlm"
                deprecated="1"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3330">Whether or not to use NTLM authentication.</doc>
        <doc-deprecated xml:space="preserve">use soup_session_add_feature_by_type() with
#SOUP_TYPE_AUTH_NTLM.</doc-deprecated>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-thread-context"
                version="2.38"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3532">If %TRUE (which it always is on a plain #SoupSession),
asynchronous HTTP requests in this session will run in
whatever the thread-default #GMainContext is at the time
they are started, rather than always occurring in
#SoupSession:async-context.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="user-agent" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3587">If non-%NULL, the value to use for the "User-Agent" header
on #SoupMessage&lt;!-- --&gt;s sent from this session.

RFC 2616 says: "The User-Agent request-header field
contains information about the user agent originating the
request. This is for statistical purposes, the tracing of
protocol violations, and automated recognition of user
agents for the sake of tailoring responses to avoid
particular user agent limitations. User agents SHOULD
include this field with requests."

The User-Agent header contains a list of one or more
product tokens, separated by whitespace, with the most
significant product token coming first. The tokens must be
brief, ASCII, and mostly alphanumeric (although "-", "_",
and "." are also allowed), and may optionally include a "/"
followed by a version string. You may also put comments,
enclosed in parentheses, between or after the tokens.

If you set a #SoupSession:user_agent property that has trailing
whitespace, #SoupSession will append its own product token
(eg, "&lt;literal&gt;libsoup/2.3.2&lt;/literal&gt;") to the end of the
header for you.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="authenticate" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3115">Emitted when the session requires authentication. If
credentials are available call soup_auth_authenticate() on
@auth. If these credentials fail, the signal will be
emitted again, with @retrying set to %TRUE, which will
continue until you return without calling
soup_auth_authenticate() on @auth.

Note that this may be emitted before @msg's body has been
fully read.

If you call soup_session_pause_message() on @msg before
returning, then you can authenticate @auth asynchronously
(as long as you g_object_ref() it to make sure it doesn't
get destroyed), and then unpause @msg when you are ready
for it to continue.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="3118">the #SoupMessage being sent</doc>
            <type name="Message"/>
          </parameter>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="3119">the #SoupAuth to authenticate</doc>
            <type name="Auth"/>
          </parameter>
          <parameter name="retrying" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="3120">%TRUE if this is the second (or later) attempt</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="connection-created" when="first" version="2.30">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3150">Emitted when a new connection is created. This is an
internal signal intended only to be used for debugging
purposes, and may go away in the future.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="3153">the connection</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-queued" when="first" version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3017">Emitted when a request is queued on @session. (Note that
"queued" doesn't just mean soup_session_queue_message();
soup_session_send_message() implicitly queues the message
as well.)

When sending a request, first #SoupSession::request_queued
is emitted, indicating that the session has become aware of
the request.

Once a connection is available to send the request on, the
session emits #SoupSession::request_started. Then, various
#SoupMessage signals are emitted as the message is
processed. If the message is requeued, it will emit
#SoupMessage::restarted, which will then be followed by
another #SoupSession::request_started and another set of
#SoupMessage signals when the message is re-sent.

Eventually, the message will emit #SoupMessage::finished.
Normally, this signals the completion of message
processing. However, it is possible that the application
will requeue the message from the "finished" handler (or
equivalently, from the soup_session_queue_message()
callback). In that case, the process will loop back to
#SoupSession::request_started.

Eventually, a message will reach "finished" and not be
requeued. At that point, the session will emit
#SoupSession::request_unqueued to indicate that it is done
with the message.

To sum up: #SoupSession::request_queued and
#SoupSession::request_unqueued are guaranteed to be emitted
exactly once, but #SoupSession::request_started and
#SoupMessage::finished (and all of the other #SoupMessage
signals) may be invoked multiple times for a given message.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="3020">the request that was queued</doc>
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-started"
                   when="first"
                   deprecated="1"
                   deprecated-version="2.50.">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3070">Emitted just before a request is sent. See
#SoupSession::request_queued for a detailed description of
the message lifecycle within a session.</doc>
        <doc-deprecated xml:space="preserve">Use #SoupMessage::starting instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="3073">the request being sent</doc>
            <type name="Message"/>
          </parameter>
          <parameter name="socket" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="3074">the socket the request is being sent on</doc>
            <type name="Socket"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-unqueued" when="first" version="2.24">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3093">Emitted when a request is removed from @session's queue,
indicating that @session is done with it. See
#SoupSession::request_queued for a detailed description of the
message lifecycle within a session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="3096">the request that was unqueued</doc>
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tunneling" when="first" version="2.30">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session.c"
             line="3174">Emitted when an SSL tunnel is being created on a proxy
connection. This is an internal signal intended only to be
used for debugging purposes, and may go away in the future.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="3177">the connection</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="SessionAsync"
           c:symbol-prefix="session_async"
           c:type="SoupSessionAsync"
           parent="Session"
           glib:type-name="SoupSessionAsync"
           glib:get-type="soup_session_async_get_type"
           glib:type-struct="SessionAsyncClass">
      <source-position filename="../libsoup/soup-session-async.h" line="34"/>
      <constructor name="new"
                   c:identifier="soup_session_async_new"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session-async.c"
             line="41">Creates an asynchronous #SoupSession with the default options.</doc>
        <doc-deprecated xml:space="preserve">#SoupSessionAsync is deprecated; use a plain
#SoupSession, created with soup_session_new(). See the &lt;link
linkend="libsoup-session-porting"&gt;porting guide&lt;/link&gt;.</doc-deprecated>
        <source-position filename="../libsoup/soup-session-async.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session-async.c"
               line="46">the new session.</doc>
          <type name="Session" c:type="SoupSession*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_options"
                   c:identifier="soup_session_async_new_with_options"
                   introspectable="0"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session-async.c"
             line="58">Creates an asynchronous #SoupSession with the specified options.</doc>
        <doc-deprecated xml:space="preserve">#SoupSessionAsync is deprecated; use a plain
#SoupSession, created with soup_session_new_with_options(). See the
&lt;link linkend="libsoup-session-porting"&gt;porting guide&lt;/link&gt;.</doc-deprecated>
        <source-position filename="../libsoup/soup-session-async.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session-async.c"
               line="65">the new session.</doc>
          <type name="Session" c:type="SoupSession*"/>
        </return-value>
        <parameters>
          <parameter name="optname1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-async.c"
                 line="60">name of first property to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-async.c"
                 line="61">value of @optname1, followed by additional property/value pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="Session" c:type="SoupSession"/>
      </field>
    </class>
    <record name="SessionAsyncClass"
            c:type="SoupSessionAsyncClass"
            glib:is-gtype-struct-for="SessionAsync">
      <source-position filename="../libsoup/soup-session-async.h" line="34"/>
      <field name="parent_class">
        <type name="SessionClass" c:type="SoupSessionClass"/>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-session-async.h"
                           line="30"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-session-async.h"
                           line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-session-async.h"
                           line="32"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-session-async.h"
                           line="33"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="SessionCallback" c:type="SoupSessionCallback">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="2124">Prototype for the callback passed to soup_session_queue_message(),
qv.</doc>
      <source-position filename="../libsoup/soup-session.h" line="23"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="session" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="2126">the session</doc>
          <type name="Session" c:type="SoupSession*"/>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="2127">the message that has finished</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="2128">the data passed to soup_session_queue_message</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="SessionClass"
            c:type="SoupSessionClass"
            glib:is-gtype-struct-for="Session">
      <source-position filename="../libsoup/soup-session.h" line="60"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="request_started">
        <callback name="request_started">
          <source-position filename="../libsoup/soup-session.h" line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="socket" transfer-ownership="none">
              <type name="Socket" c:type="SoupSocket*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="authenticate">
        <callback name="authenticate">
          <source-position filename="../libsoup/soup-session.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="auth" transfer-ownership="none">
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
            <parameter name="retrying" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="queue_message">
        <callback name="queue_message">
          <source-position filename="../libsoup/soup-session.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session.c"
                   line="2148">a #SoupSession</doc>
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session.c"
                   line="2149">the message to queue</doc>
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session.c"
                   line="2150">a #SoupSessionCallback which will
be called after the message completes or when an unrecoverable error occurs.</doc>
              <type name="SessionCallback" c:type="SoupSessionCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session.c"
                   line="2152">a pointer passed to @callback.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="requeue_message">
        <callback name="requeue_message">
          <source-position filename="../libsoup/soup-session.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session.c"
                   line="2214">a #SoupSession</doc>
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session.c"
                   line="2215">the message to requeue</doc>
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="send_message">
        <callback name="send_message">
          <source-position filename="../libsoup/soup-session.h" line="46"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session.c"
                 line="2265">the HTTP status code of the response</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session.c"
                   line="2245">a #SoupSession</doc>
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session.c"
                   line="2246">the message to send</doc>
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancel_message">
        <callback name="cancel_message">
          <source-position filename="../libsoup/soup-session.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session.c"
                   line="2421">a #SoupSession</doc>
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session.c"
                   line="2422">the message to cancel</doc>
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="status_code" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session.c"
                   line="2423">status code to set on @msg (generally
%SOUP_STATUS_CANCELLED)</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="auth_required">
        <callback name="auth_required">
          <source-position filename="../libsoup/soup-session.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="auth" transfer-ownership="none">
              <type name="Auth" c:type="SoupAuth*"/>
            </parameter>
            <parameter name="retrying" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="flush_queue">
        <callback name="flush_queue">
          <source-position filename="../libsoup/soup-session.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="kick">
        <callback name="kick">
          <source-position filename="../libsoup/soup-session.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-session.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="SessionConnectProgressCallback"
              c:type="SoupSessionConnectProgressCallback"
              version="2.62">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session.c"
           line="4983">Prototype for the progress callback passed to soup_session_connect_async().</doc>
      <source-position filename="../libsoup/soup-session.h" line="237"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="session" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4985">the #SoupSession</doc>
          <type name="Session" c:type="SoupSession*"/>
        </parameter>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4986">a #GSocketClientEvent</doc>
          <type name="Gio.SocketClientEvent" c:type="GSocketClientEvent"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4987">the current state of the network connection</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session.c"
               line="4988">the data passed to soup_session_connect_async().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="SessionFeature"
               c:symbol-prefix="session_feature"
               c:type="SoupSessionFeature"
               version="2.24"
               glib:type-name="SoupSessionFeature"
               glib:get-type="soup_session_feature_get_type"
               glib:type-struct="SessionFeatureInterface">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session-feature.c"
           line="29">An object that implement some sort of optional feature for
#SoupSession.</doc>
      <source-position filename="../libsoup/soup-session-feature.h" line="47"/>
      <virtual-method name="add_feature" invoker="add_feature" version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session-feature.c"
             line="157">Adds a "sub-feature" of type @type to the base feature @feature.
This is used for features that can be extended with multiple
different types. Eg, the authentication manager can be extended
with subtypes of #SoupAuth.</doc>
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session-feature.c"
               line="167">%TRUE if @feature accepted @type as a subfeature.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="159">the "base" feature</doc>
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="160">the #GType of a "sub-feature"</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="attach" invoker="attach">
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="detach" invoker="detach">
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="has_feature" invoker="has_feature" version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session-feature.c"
             line="209">Tests if @feature has a "sub-feature" of type @type. See
soup_session_feature_add_feature().</doc>
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session-feature.c"
               line="217">%TRUE if @feature has a subfeature of type @type</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="211">the "base" feature</doc>
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="212">the #GType of a "sub-feature"</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_feature"
                      invoker="remove_feature"
                      version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session-feature.c"
             line="184">Removes the "sub-feature" of type @type from the base feature
@feature. See soup_session_feature_add_feature().</doc>
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session-feature.c"
               line="192">%TRUE if @type was removed from @feature</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="186">the "base" feature</doc>
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="187">the #GType of a "sub-feature"</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_queued">
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_started">
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
          <parameter name="socket" transfer-ownership="none">
            <type name="Socket" c:type="SoupSocket*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_unqueued">
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </parameter>
          <parameter name="msg" transfer-ownership="none">
            <type name="Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_feature"
              c:identifier="soup_session_feature_add_feature"
              version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session-feature.c"
             line="157">Adds a "sub-feature" of type @type to the base feature @feature.
This is used for features that can be extended with multiple
different types. Eg, the authentication manager can be extended
with subtypes of #SoupAuth.</doc>
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session-feature.c"
               line="167">%TRUE if @feature accepted @type as a subfeature.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="159">the "base" feature</doc>
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="160">the #GType of a "sub-feature"</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach" c:identifier="soup_session_feature_attach">
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach" c:identifier="soup_session_feature_detach">
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="SoupSession*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_feature"
              c:identifier="soup_session_feature_has_feature"
              version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session-feature.c"
             line="209">Tests if @feature has a "sub-feature" of type @type. See
soup_session_feature_add_feature().</doc>
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session-feature.c"
               line="217">%TRUE if @feature has a subfeature of type @type</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="211">the "base" feature</doc>
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="212">the #GType of a "sub-feature"</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_feature"
              c:identifier="soup_session_feature_remove_feature"
              version="2.34">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session-feature.c"
             line="184">Removes the "sub-feature" of type @type from the base feature
@feature. See soup_session_feature_add_feature().</doc>
        <source-position filename="../libsoup/soup-session-feature.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session-feature.c"
               line="192">%TRUE if @type was removed from @feature</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="186">the "base" feature</doc>
            <type name="SessionFeature" c:type="SoupSessionFeature*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="187">the #GType of a "sub-feature"</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="SessionFeatureInterface"
            c:type="SoupSessionFeatureInterface"
            glib:is-gtype-struct-for="SessionFeature"
            version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-session-feature.c"
           line="38">The interface implemented by #SoupSessionFeature&lt;!-- --&gt;s.</doc>
      <source-position filename="../libsoup/soup-session-feature.h" line="47"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session-feature.c"
             line="40">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="attach">
        <callback name="attach">
          <source-position filename="../libsoup/soup-session-feature.h"
                           line="24"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <type name="SessionFeature" c:type="SoupSessionFeature*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="detach">
        <callback name="detach">
          <source-position filename="../libsoup/soup-session-feature.h"
                           line="26"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <type name="SessionFeature" c:type="SoupSessionFeature*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_queued">
        <callback name="request_queued">
          <source-position filename="../libsoup/soup-session-feature.h"
                           line="29"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <type name="SessionFeature" c:type="SoupSessionFeature*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_started">
        <callback name="request_started">
          <source-position filename="../libsoup/soup-session-feature.h"
                           line="32"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <type name="SessionFeature" c:type="SoupSessionFeature*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
            <parameter name="socket" transfer-ownership="none">
              <type name="Socket" c:type="SoupSocket*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_unqueued">
        <callback name="request_unqueued">
          <source-position filename="../libsoup/soup-session-feature.h"
                           line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <type name="SessionFeature" c:type="SoupSessionFeature*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="SoupSession*"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type name="Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_feature">
        <callback name="add_feature">
          <source-position filename="../libsoup/soup-session-feature.h"
                           line="40"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="167">%TRUE if @feature accepted @type as a subfeature.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session-feature.c"
                   line="159">the "base" feature</doc>
              <type name="SessionFeature" c:type="SoupSessionFeature*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session-feature.c"
                   line="160">the #GType of a "sub-feature"</doc>
              <type name="GType" c:type="GType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_feature">
        <callback name="remove_feature">
          <source-position filename="../libsoup/soup-session-feature.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="192">%TRUE if @type was removed from @feature</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session-feature.c"
                   line="186">the "base" feature</doc>
              <type name="SessionFeature" c:type="SoupSessionFeature*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session-feature.c"
                   line="187">the #GType of a "sub-feature"</doc>
              <type name="GType" c:type="GType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="has_feature">
        <callback name="has_feature">
          <source-position filename="../libsoup/soup-session-feature.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-feature.c"
                 line="217">%TRUE if @feature has a subfeature of type @type</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session-feature.c"
                   line="211">the "base" feature</doc>
              <type name="SessionFeature" c:type="SoupSessionFeature*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-session-feature.c"
                   line="212">the #GType of a "sub-feature"</doc>
              <type name="GType" c:type="GType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SessionSync"
           c:symbol-prefix="session_sync"
           c:type="SoupSessionSync"
           parent="Session"
           glib:type-name="SoupSessionSync"
           glib:get-type="soup_session_sync_get_type"
           glib:type-struct="SessionSyncClass">
      <source-position filename="../libsoup/soup-session-sync.h" line="34"/>
      <constructor name="new"
                   c:identifier="soup_session_sync_new"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session-sync.c"
             line="40">Creates an synchronous #SoupSession with the default options.</doc>
        <doc-deprecated xml:space="preserve">#SoupSessionSync is deprecated; use a plain
#SoupSession, created with soup_session_new(). See the &lt;link
linkend="libsoup-session-porting"&gt;porting guide&lt;/link&gt;.</doc-deprecated>
        <source-position filename="../libsoup/soup-session-sync.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session-sync.c"
               line="45">the new session.</doc>
          <type name="Session" c:type="SoupSession*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_options"
                   c:identifier="soup_session_sync_new_with_options"
                   introspectable="0"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-session-sync.c"
             line="57">Creates an synchronous #SoupSession with the specified options.</doc>
        <doc-deprecated xml:space="preserve">#SoupSessionSync is deprecated; use a plain
#SoupSession, created with soup_session_new_with_options(). See the
&lt;link linkend="libsoup-session-porting"&gt;porting guide&lt;/link&gt;.</doc-deprecated>
        <source-position filename="../libsoup/soup-session-sync.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-session-sync.c"
               line="64">the new session.</doc>
          <type name="Session" c:type="SoupSession*"/>
        </return-value>
        <parameters>
          <parameter name="optname1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-sync.c"
                 line="59">name of first property to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-session-sync.c"
                 line="60">value of @optname1, followed by additional property/value pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="Session" c:type="SoupSession"/>
      </field>
    </class>
    <record name="SessionSyncClass"
            c:type="SoupSessionSyncClass"
            glib:is-gtype-struct-for="SessionSync">
      <source-position filename="../libsoup/soup-session-sync.h" line="34"/>
      <field name="parent_class">
        <type name="SessionClass" c:type="SoupSessionClass"/>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-session-sync.h"
                           line="30"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-session-sync.h"
                           line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-session-sync.h"
                           line="32"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-session-sync.h"
                           line="33"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="Socket"
           c:symbol-prefix="socket"
           c:type="SoupSocket"
           parent="GObject.Object"
           glib:type-name="SoupSocket"
           glib:get-type="soup_socket_get_type"
           glib:type-struct="SocketClass">
      <source-position filename="../libsoup/soup-socket.h" line="40"/>
      <implements name="Gio.Initable"/>
      <constructor name="new"
                   c:identifier="soup_socket_new"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="827">Creates a new (disconnected) socket</doc>
        <source-position filename="../libsoup/soup-socket.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="834">the new socket</doc>
          <type name="Socket" c:type="SoupSocket*"/>
        </return-value>
        <parameters>
          <parameter name="optname1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="829">name of first property to set (or %NULL)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="830">value of @optname1, followed by additional property/value pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="disconnected">
        <source-position filename="../libsoup/soup-socket.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="new_connection">
        <source-position filename="../libsoup/soup-socket.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="listener" transfer-ownership="none">
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
          <parameter name="new_sock" transfer-ownership="none">
            <type name="Socket" c:type="SoupSocket*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="readable">
        <source-position filename="../libsoup/soup-socket.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="writable">
        <source-position filename="../libsoup/soup-socket.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="connect_async" c:identifier="soup_socket_connect_async">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1017">Begins asynchronously connecting to @sock's remote address. The
socket will call @callback when it succeeds or fails (but not
before returning from this function).

If @cancellable is non-%NULL, it can be used to cancel the
connection. @callback will still be invoked in this case, with a
status of %SOUP_STATUS_CANCELLED.</doc>
        <source-position filename="../libsoup/soup-socket.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1019">a client #SoupSocket (which must not already be connected)</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1020">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1021">callback to call after connecting</doc>
            <type name="SocketCallback" c:type="SoupSocketCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1022">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync" c:identifier="soup_socket_connect_sync">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1087">Attempt to synchronously connect @sock to its remote address.

If @cancellable is non-%NULL, it can be used to cancel the
connection, in which case soup_socket_connect_sync() will return
%SOUP_STATUS_CANCELLED.</doc>
        <source-position filename="../libsoup/soup-socket.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1098">a success or failure code.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1089">a client #SoupSocket (which must not already be connected)</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1090">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect" c:identifier="soup_socket_disconnect">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1578">Disconnects @sock. Any further read or write attempts on it will
fail.</doc>
        <source-position filename="../libsoup/soup-socket.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1580">a #SoupSocket</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fd" c:identifier="soup_socket_get_fd">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1118">Gets @sock's underlying file descriptor.

Note that fiddling with the file descriptor may break the
#SoupSocket.</doc>
        <source-position filename="../libsoup/soup-socket.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1127">@sock's file descriptor.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1120">a #SoupSocket</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local_address"
              c:identifier="soup_socket_get_local_address">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1654">Returns the #SoupAddress corresponding to the local end of @sock.

Calling this method on an unconnected socket is considered to be
an error, and produces undefined results.</doc>
        <source-position filename="../libsoup/soup-socket.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1663">the #SoupAddress</doc>
          <type name="Address" c:type="SoupAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1656">a #SoupSocket</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote_address"
              c:identifier="soup_socket_get_remote_address">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1702">Returns the #SoupAddress corresponding to the remote end of @sock.

Calling this method on an unconnected socket is considered to be
an error, and produces undefined results.</doc>
        <source-position filename="../libsoup/soup-socket.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1711">the #SoupAddress</doc>
          <type name="Address" c:type="SoupAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1704">a #SoupSocket</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_connected" c:identifier="soup_socket_is_connected">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1635">Tests if @sock is connected to another host</doc>
        <source-position filename="../libsoup/soup-socket.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1641">%TRUE or %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1637">a #SoupSocket</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_ssl" c:identifier="soup_socket_is_ssl">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1562">Tests if @sock is doing (or has attempted to do) SSL.</doc>
        <source-position filename="../libsoup/soup-socket.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1568">%TRUE if @sock has SSL credentials set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1564">a #SoupSocket</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="listen" c:identifier="soup_socket_listen">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1262">Makes @sock start listening on its local address. When connections
come in, @sock will emit #SoupSocket::new_connection.</doc>
        <source-position filename="../libsoup/soup-socket.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1270">whether or not @sock is now listening.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1264">a server #SoupSocket (which must not already be connected or
listening)</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="read" c:identifier="soup_socket_read" throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1827">Attempts to read up to @len bytes from @sock into @buffer. If some
data is successfully read, soup_socket_read() will return
%SOUP_SOCKET_OK, and *@nread will contain the number of bytes
actually read (which may be less than @len).

If @sock is non-blocking, and no data is available, the return
value will be %SOUP_SOCKET_WOULD_BLOCK. In this case, the caller
can connect to the #SoupSocket::readable signal to know when there
is more data to read. (NB: You MUST read all available data off the
socket first. #SoupSocket::readable is only emitted after
soup_socket_read() returns %SOUP_SOCKET_WOULD_BLOCK, and it is only
emitted once. See the documentation for #SoupSocket:non-blocking.)</doc>
        <source-position filename="../libsoup/soup-socket.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1850">a #SoupSocketIOStatus, as described above (or
%SOUP_SOCKET_EOF if the socket is no longer connected, or
%SOUP_SOCKET_ERROR on any other error, in which case @error will
also be set).</doc>
          <type name="SocketIOStatus" c:type="SoupSocketIOStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1829">the socket</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1830">buffer to read
  into</doc>
            <array length="1" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1832">size of @buffer in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="nread"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1833">on return, the number of bytes read into @buffer</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1834">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_until"
              c:identifier="soup_socket_read_until"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1893">Like soup_socket_read(), but reads no further than the first
occurrence of @boundary. (If the boundary is found, it will be
included in the returned data, and *@got_boundary will be set to
%TRUE.) Any data after the boundary will returned in future reads.

soup_socket_read_until() will almost always return fewer than @len
bytes: if the boundary is found, then it will only return the bytes
up until the end of the boundary, and if the boundary is not found,
then it will leave the last &lt;literal&gt;(boundary_len - 1)&lt;/literal&gt;
bytes in its internal buffer, in case they form the start of the
boundary string. Thus, @len normally needs to be at least 1 byte
longer than @boundary_len if you want to make any progress at all.</doc>
        <source-position filename="../libsoup/soup-socket.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1920">as for soup_socket_read()</doc>
          <type name="SocketIOStatus" c:type="SoupSocketIOStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1895">the socket</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1896">buffer to read
  into</doc>
            <array length="1" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1898">size of @buffer in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="boundary"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1899">boundary to read until</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="boundary_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1900">length of @boundary in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="nread"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1901">on return, the number of bytes read into @buffer</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="got_boundary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1902">on return, whether or not the data in @buffer
ends with the boundary string</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1904">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_proxy_ssl"
              c:identifier="soup_socket_start_proxy_ssl">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1470">Starts using SSL on @socket, expecting to find a host named
@ssl_host.</doc>
        <source-position filename="../libsoup/soup-socket.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1479">success or failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1472">the socket</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
          <parameter name="ssl_host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1473">hostname of the SSL server</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1474">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_ssl" c:identifier="soup_socket_start_ssl">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1452">Starts using SSL on @socket.</doc>
        <source-position filename="../libsoup/soup-socket.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1459">success or failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1454">the socket</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1455">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="soup_socket_write" throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1970">Attempts to write @len bytes from @buffer to @sock. If some data is
successfully written, the return status will be %SOUP_SOCKET_OK,
and *@nwrote will contain the number of bytes actually written
(which may be less than @len).

If @sock is non-blocking, and no data could be written right away,
the return value will be %SOUP_SOCKET_WOULD_BLOCK. In this case,
the caller can connect to the #SoupSocket::writable signal to know
when more data can be written. (NB: #SoupSocket::writable is only
emitted after soup_socket_write() returns %SOUP_SOCKET_WOULD_BLOCK,
and it is only emitted once. See the documentation for
#SoupSocket:non-blocking.)</doc>
        <source-position filename="../libsoup/soup-socket.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="1992">a #SoupSocketIOStatus, as described above (or
%SOUP_SOCKET_EOF or %SOUP_SOCKET_ERROR. @error will be set if the
return value is %SOUP_SOCKET_ERROR.)</doc>
          <type name="SocketIOStatus" c:type="SoupSocketIOStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="sock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1972">the socket</doc>
            <type name="Socket" c:type="SoupSocket*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1973">data to write</doc>
            <array length="1" zero-terminated="0" c:type="gconstpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1974">size of @buffer, in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="nwrote"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1975">on return, number of bytes written</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="1976">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="async-context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="fd"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="gsocket"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.Socket"/>
      </property>
      <property name="iostream"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.IOStream"/>
      </property>
      <property name="ipv6-only" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-server" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="644">Whether or not the socket is a server socket.

Note that for "ordinary" #SoupSockets this will be set for
both listening sockets and the sockets emitted by
#SoupSocket::new-connection, but for sockets created by
setting #SoupSocket:fd, it will only be set for listening
sockets.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="local-address"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Address"/>
      </property>
      <property name="non-blocking" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="593">Whether or not the socket uses non-blocking I/O.

#SoupSocket's I/O methods are designed around the idea of
using a single codepath for both synchronous and
asynchronous I/O. If you want to read off a #SoupSocket,
the "correct" way to do it is to call soup_socket_read() or
soup_socket_read_until() repeatedly until you have read
everything you want. If it returns %SOUP_SOCKET_WOULD_BLOCK
at any point, stop reading and wait for it to emit the
#SoupSocket::readable signal. Then go back to the
reading-as-much-as-you-can loop. Likewise, for writing to a
#SoupSocket, you should call soup_socket_write() either
until you have written everything, or it returns
%SOUP_SOCKET_WOULD_BLOCK (in which case you wait for
#SoupSocket::writable and then go back into the loop).

Code written this way will work correctly with both
blocking and non-blocking sockets; blocking sockets will
simply never return %SOUP_SOCKET_WOULD_BLOCK, and so the
code that handles that case just won't get used for them.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="remote-address"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Address"/>
      </property>
      <property name="socket-properties"
                introspectable="0"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type/>
      </property>
      <property name="ssl-creds" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="ssl-fallback"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ssl-strict"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="timeout" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="tls-certificate" transfer-ownership="none">
        <type name="Gio.TlsCertificate"/>
      </property>
      <property name="tls-errors" transfer-ownership="none">
        <type name="Gio.TlsCertificateFlags"/>
      </property>
      <property name="trusted-certificate" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-thread-context"
                version="2.38"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="742">Use g_main_context_get_thread_default().</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="disconnected" when="last">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="480">Emitted when the socket is disconnected, for whatever
reason.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="event" when="last" version="2.38">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="516">Emitted when a network-related event occurs. See
#GSocketClient::event for more details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="519">the event that occurred</doc>
            <type name="Gio.SocketClientEvent"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="520">the current connection state</doc>
            <type name="Gio.IOStream"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-connection" when="first">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="496">Emitted when a listening socket (set up with
soup_socket_listen()) receives a new connection.

You must ref the @new if you want to keep it; otherwise it
will be destroyed after the signal is emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-socket.c"
                 line="499">the new socket</doc>
            <type name="Socket"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="readable" when="last">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="447">Emitted when an async socket is readable. See
soup_socket_read(), soup_socket_read_until() and
#SoupSocket:non-blocking.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="writable" when="last">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="464">Emitted when an async socket is writable. See
soup_socket_write() and #SoupSocket:non-blocking.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <callback name="SocketCallback" c:type="SoupSocketCallback">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="982">The callback function passed to soup_socket_connect_async().</doc>
      <source-position filename="../libsoup/soup-socket.h" line="56"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sock" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="984">the #SoupSocket</doc>
          <type name="Socket" c:type="SoupSocket*"/>
        </parameter>
        <parameter name="status" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="985">an HTTP status code indicating success or failure</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="../libsoup/soup-socket.c"
               line="986">the data passed to soup_socket_connect_async()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="SocketClass"
            c:type="SoupSocketClass"
            glib:is-gtype-struct-for="Socket">
      <source-position filename="../libsoup/soup-socket.h" line="40"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="readable">
        <callback name="readable">
          <source-position filename="../libsoup/soup-socket.h" line="29"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sock" transfer-ownership="none">
              <type name="Socket" c:type="SoupSocket*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="writable">
        <callback name="writable">
          <source-position filename="../libsoup/soup-socket.h" line="30"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sock" transfer-ownership="none">
              <type name="Socket" c:type="SoupSocket*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnected">
        <callback name="disconnected">
          <source-position filename="../libsoup/soup-socket.h" line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sock" transfer-ownership="none">
              <type name="Socket" c:type="SoupSocket*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_connection">
        <callback name="new_connection">
          <source-position filename="../libsoup/soup-socket.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="listener" transfer-ownership="none">
              <type name="Socket" c:type="SoupSocket*"/>
            </parameter>
            <parameter name="new_sock" transfer-ownership="none">
              <type name="Socket" c:type="SoupSocket*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-socket.h" line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-socket.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-socket.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-socket.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="SocketIOStatus"
                 glib:type-name="SoupSocketIOStatus"
                 glib:get-type="soup_socket_io_status_get_type"
                 c:type="SoupSocketIOStatus">
      <doc xml:space="preserve"
           filename="../libsoup/soup-socket.c"
           line="1817">Return value from the #SoupSocket IO methods.</doc>
      <member name="ok" value="0" c:identifier="SOUP_SOCKET_OK" glib:nick="ok">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1819">Success</doc>
      </member>
      <member name="would_block"
              value="1"
              c:identifier="SOUP_SOCKET_WOULD_BLOCK"
              glib:nick="would-block">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1820">Cannot read/write any more at this time</doc>
      </member>
      <member name="eof"
              value="2"
              c:identifier="SOUP_SOCKET_EOF"
              glib:nick="eof">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1821">End of file</doc>
      </member>
      <member name="error"
              value="3"
              c:identifier="SOUP_SOCKET_ERROR"
              glib:nick="error">
        <doc xml:space="preserve"
             filename="../libsoup/soup-socket.c"
             line="1822">Other error</doc>
      </member>
    </enumeration>
    <enumeration name="Status"
                 glib:type-name="SoupStatus"
                 glib:get-type="soup_status_get_type"
                 c:type="SoupStatus">
      <doc xml:space="preserve"
           filename="../libsoup/soup-status.c"
           line="70">These represent the known HTTP status code values, plus various
network and internal errors.

Note that no libsoup functions take or return this type directly;
any function that works with status codes will accept unrecognized
status codes as well.

Prior to 2.44 this type was called
&lt;literal&gt;SoupKnownStatusCode&lt;/literal&gt;, but the individual values
have always had the names they have now.</doc>
      <member name="none"
              value="0"
              c:identifier="SOUP_STATUS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="72">No status available. (Eg, the message has not
been sent yet)</doc>
      </member>
      <member name="cancelled"
              value="1"
              c:identifier="SOUP_STATUS_CANCELLED"
              glib:nick="cancelled">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="74">Message was cancelled locally</doc>
      </member>
      <member name="cant_resolve"
              value="2"
              c:identifier="SOUP_STATUS_CANT_RESOLVE"
              glib:nick="cant-resolve">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="75">Unable to resolve destination host name</doc>
      </member>
      <member name="cant_resolve_proxy"
              value="3"
              c:identifier="SOUP_STATUS_CANT_RESOLVE_PROXY"
              glib:nick="cant-resolve-proxy">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="76">Unable to resolve proxy host name</doc>
      </member>
      <member name="cant_connect"
              value="4"
              c:identifier="SOUP_STATUS_CANT_CONNECT"
              glib:nick="cant-connect">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="77">Unable to connect to remote host</doc>
      </member>
      <member name="cant_connect_proxy"
              value="5"
              c:identifier="SOUP_STATUS_CANT_CONNECT_PROXY"
              glib:nick="cant-connect-proxy">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="78">Unable to connect to proxy</doc>
      </member>
      <member name="ssl_failed"
              value="6"
              c:identifier="SOUP_STATUS_SSL_FAILED"
              glib:nick="ssl-failed">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="79">SSL/TLS negotiation failed</doc>
      </member>
      <member name="io_error"
              value="7"
              c:identifier="SOUP_STATUS_IO_ERROR"
              glib:nick="io-error">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="80">A network error occurred, or the other end
closed the connection unexpectedly</doc>
      </member>
      <member name="malformed"
              value="8"
              c:identifier="SOUP_STATUS_MALFORMED"
              glib:nick="malformed">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="82">Malformed data (usually a programmer error)</doc>
      </member>
      <member name="try_again"
              value="9"
              c:identifier="SOUP_STATUS_TRY_AGAIN"
              glib:nick="try-again">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="83">Used internally</doc>
      </member>
      <member name="too_many_redirects"
              value="10"
              c:identifier="SOUP_STATUS_TOO_MANY_REDIRECTS"
              glib:nick="too-many-redirects">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="84">There were too many redirections</doc>
      </member>
      <member name="tls_failed"
              value="11"
              c:identifier="SOUP_STATUS_TLS_FAILED"
              glib:nick="tls-failed">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="85">Used internally</doc>
      </member>
      <member name="continue"
              value="100"
              c:identifier="SOUP_STATUS_CONTINUE"
              glib:nick="continue">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="86">100 Continue (HTTP)</doc>
      </member>
      <member name="switching_protocols"
              value="101"
              c:identifier="SOUP_STATUS_SWITCHING_PROTOCOLS"
              glib:nick="switching-protocols">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="87">101 Switching Protocols (HTTP)</doc>
      </member>
      <member name="processing"
              value="102"
              c:identifier="SOUP_STATUS_PROCESSING"
              glib:nick="processing">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="88">102 Processing (WebDAV)</doc>
      </member>
      <member name="ok"
              value="200"
              c:identifier="SOUP_STATUS_OK"
              glib:nick="ok">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="89">200 Success (HTTP). Also used by many lower-level
soup routines to indicate success.</doc>
      </member>
      <member name="created"
              value="201"
              c:identifier="SOUP_STATUS_CREATED"
              glib:nick="created">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="91">201 Created (HTTP)</doc>
      </member>
      <member name="accepted"
              value="202"
              c:identifier="SOUP_STATUS_ACCEPTED"
              glib:nick="accepted">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="92">202 Accepted (HTTP)</doc>
      </member>
      <member name="non_authoritative"
              value="203"
              c:identifier="SOUP_STATUS_NON_AUTHORITATIVE"
              glib:nick="non-authoritative">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="93">203 Non-Authoritative Information
(HTTP)</doc>
      </member>
      <member name="no_content"
              value="204"
              c:identifier="SOUP_STATUS_NO_CONTENT"
              glib:nick="no-content">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="95">204 No Content (HTTP)</doc>
      </member>
      <member name="reset_content"
              value="205"
              c:identifier="SOUP_STATUS_RESET_CONTENT"
              glib:nick="reset-content">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="96">205 Reset Content (HTTP)</doc>
      </member>
      <member name="partial_content"
              value="206"
              c:identifier="SOUP_STATUS_PARTIAL_CONTENT"
              glib:nick="partial-content">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="97">206 Partial Content (HTTP)</doc>
      </member>
      <member name="multi_status"
              value="207"
              c:identifier="SOUP_STATUS_MULTI_STATUS"
              glib:nick="multi-status">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="98">207 Multi-Status (WebDAV)</doc>
      </member>
      <member name="multiple_choices"
              value="300"
              c:identifier="SOUP_STATUS_MULTIPLE_CHOICES"
              glib:nick="multiple-choices">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="99">300 Multiple Choices (HTTP)</doc>
      </member>
      <member name="moved_permanently"
              value="301"
              c:identifier="SOUP_STATUS_MOVED_PERMANENTLY"
              glib:nick="moved-permanently">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="100">301 Moved Permanently (HTTP)</doc>
      </member>
      <member name="found"
              value="302"
              c:identifier="SOUP_STATUS_FOUND"
              glib:nick="found">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="101">302 Found (HTTP)</doc>
      </member>
      <member name="moved_temporarily"
              value="302"
              c:identifier="SOUP_STATUS_MOVED_TEMPORARILY"
              glib:nick="moved-temporarily">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="102">302 Moved Temporarily (old name,
RFC 2068)</doc>
      </member>
      <member name="see_other"
              value="303"
              c:identifier="SOUP_STATUS_SEE_OTHER"
              glib:nick="see-other">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="104">303 See Other (HTTP)</doc>
      </member>
      <member name="not_modified"
              value="304"
              c:identifier="SOUP_STATUS_NOT_MODIFIED"
              glib:nick="not-modified">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="105">304 Not Modified (HTTP)</doc>
      </member>
      <member name="use_proxy"
              value="305"
              c:identifier="SOUP_STATUS_USE_PROXY"
              glib:nick="use-proxy">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="106">305 Use Proxy (HTTP)</doc>
      </member>
      <member name="not_appearing_in_this_protocol"
              value="306"
              c:identifier="SOUP_STATUS_NOT_APPEARING_IN_THIS_PROTOCOL"
              glib:nick="not-appearing-in-this-protocol">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="107">306 [Unused] (HTTP)</doc>
      </member>
      <member name="temporary_redirect"
              value="307"
              c:identifier="SOUP_STATUS_TEMPORARY_REDIRECT"
              glib:nick="temporary-redirect">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="108">307 Temporary Redirect (HTTP)</doc>
      </member>
      <member name="bad_request"
              value="400"
              c:identifier="SOUP_STATUS_BAD_REQUEST"
              glib:nick="bad-request">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="109">400 Bad Request (HTTP)</doc>
      </member>
      <member name="unauthorized"
              value="401"
              c:identifier="SOUP_STATUS_UNAUTHORIZED"
              glib:nick="unauthorized">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="110">401 Unauthorized (HTTP)</doc>
      </member>
      <member name="payment_required"
              value="402"
              c:identifier="SOUP_STATUS_PAYMENT_REQUIRED"
              glib:nick="payment-required">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="111">402 Payment Required (HTTP)</doc>
      </member>
      <member name="forbidden"
              value="403"
              c:identifier="SOUP_STATUS_FORBIDDEN"
              glib:nick="forbidden">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="112">403 Forbidden (HTTP)</doc>
      </member>
      <member name="not_found"
              value="404"
              c:identifier="SOUP_STATUS_NOT_FOUND"
              glib:nick="not-found">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="113">404 Not Found (HTTP)</doc>
      </member>
      <member name="method_not_allowed"
              value="405"
              c:identifier="SOUP_STATUS_METHOD_NOT_ALLOWED"
              glib:nick="method-not-allowed">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="114">405 Method Not Allowed (HTTP)</doc>
      </member>
      <member name="not_acceptable"
              value="406"
              c:identifier="SOUP_STATUS_NOT_ACCEPTABLE"
              glib:nick="not-acceptable">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="115">406 Not Acceptable (HTTP)</doc>
      </member>
      <member name="proxy_authentication_required"
              value="407"
              c:identifier="SOUP_STATUS_PROXY_AUTHENTICATION_REQUIRED"
              glib:nick="proxy-authentication-required">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="116">407 Proxy Authentication
Required (HTTP)</doc>
      </member>
      <member name="proxy_unauthorized"
              value="407"
              c:identifier="SOUP_STATUS_PROXY_UNAUTHORIZED"
              glib:nick="proxy-unauthorized">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="118">shorter alias for
%SOUP_STATUS_PROXY_AUTHENTICATION_REQUIRED</doc>
      </member>
      <member name="request_timeout"
              value="408"
              c:identifier="SOUP_STATUS_REQUEST_TIMEOUT"
              glib:nick="request-timeout">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="120">408 Request Timeout (HTTP)</doc>
      </member>
      <member name="conflict"
              value="409"
              c:identifier="SOUP_STATUS_CONFLICT"
              glib:nick="conflict">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="121">409 Conflict (HTTP)</doc>
      </member>
      <member name="gone"
              value="410"
              c:identifier="SOUP_STATUS_GONE"
              glib:nick="gone">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="122">410 Gone (HTTP)</doc>
      </member>
      <member name="length_required"
              value="411"
              c:identifier="SOUP_STATUS_LENGTH_REQUIRED"
              glib:nick="length-required">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="123">411 Length Required (HTTP)</doc>
      </member>
      <member name="precondition_failed"
              value="412"
              c:identifier="SOUP_STATUS_PRECONDITION_FAILED"
              glib:nick="precondition-failed">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="124">412 Precondition Failed (HTTP)</doc>
      </member>
      <member name="request_entity_too_large"
              value="413"
              c:identifier="SOUP_STATUS_REQUEST_ENTITY_TOO_LARGE"
              glib:nick="request-entity-too-large">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="125">413 Request Entity Too Large
(HTTP)</doc>
      </member>
      <member name="request_uri_too_long"
              value="414"
              c:identifier="SOUP_STATUS_REQUEST_URI_TOO_LONG"
              glib:nick="request-uri-too-long">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="127">414 Request-URI Too Long (HTTP)</doc>
      </member>
      <member name="unsupported_media_type"
              value="415"
              c:identifier="SOUP_STATUS_UNSUPPORTED_MEDIA_TYPE"
              glib:nick="unsupported-media-type">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="128">415 Unsupported Media Type
(HTTP)</doc>
      </member>
      <member name="requested_range_not_satisfiable"
              value="416"
              c:identifier="SOUP_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE"
              glib:nick="requested-range-not-satisfiable">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="130">416 Requested Range
Not Satisfiable (HTTP)</doc>
      </member>
      <member name="invalid_range"
              value="416"
              c:identifier="SOUP_STATUS_INVALID_RANGE"
              glib:nick="invalid-range">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="132">shorter alias for
%SOUP_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE</doc>
      </member>
      <member name="expectation_failed"
              value="417"
              c:identifier="SOUP_STATUS_EXPECTATION_FAILED"
              glib:nick="expectation-failed">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="134">417 Expectation Failed (HTTP)</doc>
      </member>
      <member name="unprocessable_entity"
              value="422"
              c:identifier="SOUP_STATUS_UNPROCESSABLE_ENTITY"
              glib:nick="unprocessable-entity">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="135">422 Unprocessable Entity
(WebDAV)</doc>
      </member>
      <member name="locked"
              value="423"
              c:identifier="SOUP_STATUS_LOCKED"
              glib:nick="locked">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="137">423 Locked (WebDAV)</doc>
      </member>
      <member name="failed_dependency"
              value="424"
              c:identifier="SOUP_STATUS_FAILED_DEPENDENCY"
              glib:nick="failed-dependency">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="138">424 Failed Dependency (WebDAV)</doc>
      </member>
      <member name="internal_server_error"
              value="500"
              c:identifier="SOUP_STATUS_INTERNAL_SERVER_ERROR"
              glib:nick="internal-server-error">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="139">500 Internal Server Error
(HTTP)</doc>
      </member>
      <member name="not_implemented"
              value="501"
              c:identifier="SOUP_STATUS_NOT_IMPLEMENTED"
              glib:nick="not-implemented">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="141">501 Not Implemented (HTTP)</doc>
      </member>
      <member name="bad_gateway"
              value="502"
              c:identifier="SOUP_STATUS_BAD_GATEWAY"
              glib:nick="bad-gateway">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="142">502 Bad Gateway (HTTP)</doc>
      </member>
      <member name="service_unavailable"
              value="503"
              c:identifier="SOUP_STATUS_SERVICE_UNAVAILABLE"
              glib:nick="service-unavailable">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="143">503 Service Unavailable (HTTP)</doc>
      </member>
      <member name="gateway_timeout"
              value="504"
              c:identifier="SOUP_STATUS_GATEWAY_TIMEOUT"
              glib:nick="gateway-timeout">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="144">504 Gateway Timeout (HTTP)</doc>
      </member>
      <member name="http_version_not_supported"
              value="505"
              c:identifier="SOUP_STATUS_HTTP_VERSION_NOT_SUPPORTED"
              glib:nick="http-version-not-supported">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="145">505 HTTP Version Not
Supported (HTTP)</doc>
      </member>
      <member name="insufficient_storage"
              value="507"
              c:identifier="SOUP_STATUS_INSUFFICIENT_STORAGE"
              glib:nick="insufficient-storage">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="147">507 Insufficient Storage
(WebDAV)</doc>
      </member>
      <member name="not_extended"
              value="510"
              c:identifier="SOUP_STATUS_NOT_EXTENDED"
              glib:nick="not-extended">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="149">510 Not Extended (RFC 2774)</doc>
      </member>
      <function name="get_phrase" c:identifier="soup_status_get_phrase">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="250">Looks up the stock HTTP description of @status_code. This is used
by soup_message_set_status() to get the correct text to go with a
given status code.

&lt;emphasis&gt;There is no reason for you to ever use this
function.&lt;/emphasis&gt; If you wanted the textual description for the
#SoupMessage:status_code of a given #SoupMessage, you should just
look at the message's #SoupMessage:reason_phrase. However, you
should only do that for use in debugging messages; HTTP reason
phrases are not localized, and are not generally very descriptive
anyway, and so they should never be presented to the user directly.
Instead, you should create you own error messages based on the
status code, and on what you were trying to do.</doc>
        <source-position filename="../libsoup/soup-status.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-status.c"
               line="268">the (terse, English) description of @status_code</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="status_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-status.c"
                 line="252">an HTTP status code</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="proxify"
                c:identifier="soup_status_proxify"
                version="2.26">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="283">Turns %SOUP_STATUS_CANT_RESOLVE into
%SOUP_STATUS_CANT_RESOLVE_PROXY and %SOUP_STATUS_CANT_CONNECT into
%SOUP_STATUS_CANT_CONNECT_PROXY. Other status codes are passed
through unchanged.</doc>
        <source-position filename="../libsoup/soup-status.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-status.c"
               line="292">the "proxified" equivalent of @status_code.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="status_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-status.c"
                 line="285">a status code</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="TLDError"
                 version="2.40"
                 glib:type-name="SoupTLDError"
                 glib:get-type="soup_tld_error_get_type"
                 c:type="SoupTLDError"
                 glib:error-domain="soup_tld_error_quark">
      <doc xml:space="preserve"
           filename="../libsoup/soup-tld.c"
           line="113">Error codes for %SOUP_TLD_ERROR.</doc>
      <member name="invalid_hostname"
              value="0"
              c:identifier="SOUP_TLD_ERROR_INVALID_HOSTNAME"
              glib:nick="invalid-hostname">
        <doc xml:space="preserve"
             filename="../libsoup/soup-tld.c"
             line="115">A hostname was syntactically
  invalid.</doc>
      </member>
      <member name="is_ip_address"
              value="1"
              c:identifier="SOUP_TLD_ERROR_IS_IP_ADDRESS"
              glib:nick="is-ip-address">
        <doc xml:space="preserve"
             filename="../libsoup/soup-tld.c"
             line="117">The passed-in "hostname" was
  actually an IP address (and thus has no base domain or
  public suffix).</doc>
      </member>
      <member name="not_enough_domains"
              value="2"
              c:identifier="SOUP_TLD_ERROR_NOT_ENOUGH_DOMAINS"
              glib:nick="not-enough-domains">
        <doc xml:space="preserve"
             filename="../libsoup/soup-tld.c"
             line="120">The passed-in hostname
  did not have enough components. Eg, calling
  soup_tld_get_base_domain() on &lt;literal&gt;"co.uk"&lt;/literal&gt;.</doc>
      </member>
      <member name="no_base_domain"
              value="3"
              c:identifier="SOUP_TLD_ERROR_NO_BASE_DOMAIN"
              glib:nick="no-base-domain">
        <doc xml:space="preserve"
             filename="../libsoup/soup-tld.c"
             line="123">The passed-in hostname has
  no recognized public suffix.</doc>
      </member>
      <member name="no_psl_data"
              value="4"
              c:identifier="SOUP_TLD_ERROR_NO_PSL_DATA"
              glib:nick="no-psl-data">
      </member>
      <function name="quark" c:identifier="soup_tld_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <record name="URI"
            c:type="SoupURI"
            glib:type-name="SoupURI"
            glib:get-type="soup_uri_get_type"
            c:symbol-prefix="uri">
      <doc xml:space="preserve"
           filename="../libsoup/soup-uri.c"
           line="31">A #SoupURI represents a (parsed) URI. #SoupURI supports RFC 3986
(URI Generic Syntax), and can parse any valid URI. However, libsoup
only uses "http" and "https" URIs internally; You can use
SOUP_URI_VALID_FOR_HTTP() to test if a #SoupURI is a valid HTTP
URI.

@scheme will always be set in any URI. It is an interned string and
is always all lowercase. (If you parse a URI with a non-lowercase
scheme, it will be converted to lowercase.) The macros
%SOUP_URI_SCHEME_HTTP and %SOUP_URI_SCHEME_HTTPS provide the
interned values for "http" and "https" and can be compared against
URI @scheme values.

@user and @password are parsed as defined in the older URI specs
(ie, separated by a colon; RFC 3986 only talks about a single
"userinfo" field). Note that @password is not included in the
output of soup_uri_to_string(). libsoup does not normally use these
fields; authentication is handled via #SoupSession signals.

@host contains the hostname, and @port the port specified in the
URI. If the URI doesn't contain a hostname, @host will be %NULL,
and if it doesn't specify a port, @port may be 0. However, for
"http" and "https" URIs, @host is guaranteed to be non-%NULL
(trying to parse an http URI with no @host will return %NULL), and
@port will always be non-0 (because libsoup knows the default value
to use when it is not specified in the URI).

@path is always non-%NULL. For http/https URIs, @path will never be
an empty string either; if the input URI has no path, the parsed
#SoupURI will have a @path of "/".

@query and @fragment are optional for all URI types.
soup_form_decode() may be useful for parsing @query.

Note that @path, @query, and @fragment may contain
%&lt;!-- --&gt;-encoded characters. soup_uri_new() calls
soup_uri_normalize() on them, but not soup_uri_decode(). This is
necessary to ensure that soup_uri_to_string() will generate a URI
that has exactly the same meaning as the original. (In theory,
#SoupURI should leave @user, @password, and @host partially-encoded
as well, but this would be more annoying than useful.)</doc>
      <source-position filename="../libsoup/soup-uri.h" line="29"/>
      <field name="scheme" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="33">the URI scheme (eg, "http")</doc>
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="user" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="34">a username, or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="password" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="35">a password, or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="host" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="36">the hostname or IP address, or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="port" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="37">the port number on @host</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="path" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="38">the path on @host</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="query" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="39">a query for @path, or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="fragment" writable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="40">a fragment identifier within @path, or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <constructor name="new" c:identifier="soup_uri_new">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="497">Parses an absolute URI.

You can also pass %NULL for @uri_string if you want to get back an
"empty" #SoupURI that you can fill in by hand. (You will need to
call at least soup_uri_set_scheme() and soup_uri_set_path(), since
those fields are required.)</doc>
        <source-position filename="../libsoup/soup-uri.h" line="53"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="508">a #SoupURI, or %NULL if the given string
 was found to be invalid.</doc>
          <type name="URI" c:type="SoupURI*"/>
        </return-value>
        <parameters>
          <parameter name="uri_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="499">a URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_base" c:identifier="soup_uri_new_with_base">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="226">Parses @uri_string relative to @base.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="233">a parsed #SoupURI.</doc>
          <type name="URI" c:type="SoupURI*"/>
        </return-value>
        <parameters>
          <parameter name="base" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="228">a base URI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="uri_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="229">the URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="soup_uri_copy">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="621">Copies @uri</doc>
        <source-position filename="../libsoup/soup-uri.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="627">a copy of @uri, which must be freed with soup_uri_free()</doc>
          <type name="URI" c:type="SoupURI*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="623">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy_host"
              c:identifier="soup_uri_copy_host"
              version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1252">Makes a copy of @uri, considering only the protocol, host, and port</doc>
        <source-position filename="../libsoup/soup-uri.h" line="130"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="1258">the new #SoupURI</doc>
          <type name="URI" c:type="SoupURI*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1254">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="soup_uri_equal">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="660">Tests whether or not @uri1 and @uri2 are equal in all parts</doc>
        <source-position filename="../libsoup/soup-uri.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="667">%TRUE or %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="662">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="uri2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="663">another #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="soup_uri_free">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="690">Frees @uri.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="692">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fragment"
              c:identifier="soup_uri_get_fragment"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1218">Gets @uri's fragment.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="1224">@uri's fragment.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1220">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host" c:identifier="soup_uri_get_host" version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1026">Gets @uri's host.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="1032">@uri's host.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1028">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="soup_uri_get_password"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="992">Gets @uri's password.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="998">@uri's password.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="994">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="soup_uri_get_path" version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1100">Gets @uri's path.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="1106">@uri's path.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1102">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="soup_uri_get_port" version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1066">Gets @uri's port.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="1072">@uri's port.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1068">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_query"
              c:identifier="soup_uri_get_query"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1140">Gets @uri's query.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="1146">@uri's query.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1142">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scheme"
              c:identifier="soup_uri_get_scheme"
              version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="922">Gets @uri's scheme.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="928">@uri's scheme.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="924">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user" c:identifier="soup_uri_get_user" version="2.32">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="958">Gets @uri's user.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="964">@uri's user.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="960">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="host_equal"
              c:identifier="soup_uri_host_equal"
              version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1301">Compares @v1 and @v2, considering only the scheme, host, and port.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="1308">whether or not the URIs are equal in scheme, host,
and port.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="v1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1303">a #SoupURI with a non-%NULL @host member</doc>
            <type name="URI" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="v2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1304">a #SoupURI with a non-%NULL @host member</doc>
            <type name="URI" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="host_hash"
              c:identifier="soup_uri_host_hash"
              version="2.28">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1279">Hashes @key, considering only the scheme, host, and port.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="1285">a hash</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1281">a #SoupURI with a non-%NULL @host member</doc>
            <type name="URI" c:type="gconstpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_fragment" c:identifier="soup_uri_set_fragment">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1236">Sets @uri's fragment to @fragment.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1238">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="fragment"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1239">the fragment</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host" c:identifier="soup_uri_set_host">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1044">Sets @uri's host to @host.

If @host is an IPv6 IP address, it should not include the brackets
required by the URI syntax; they will be added automatically when
converting @uri to a string.

http and https URIs should not have a %NULL @host.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1046">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="host"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1047">the hostname or IP address, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_password" c:identifier="soup_uri_set_password">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1010">Sets @uri's password to @password.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1012">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="password"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1013">the password, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path" c:identifier="soup_uri_set_path">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1118">Sets @uri's path to @path.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1120">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1121">the non-%NULL path</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port" c:identifier="soup_uri_set_port">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1084">Sets @uri's port to @port. If @port is 0, @uri will not have an
explicitly-specified port.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1086">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1087">the port, or 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_query" c:identifier="soup_uri_set_query">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1158">Sets @uri's query to @query.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1160">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="query"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1161">the query</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_query_from_fields"
              c:identifier="soup_uri_set_query_from_fields"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1192">Sets @uri's query to the result of encoding the given form fields
and values according to the * HTML form rules. See
soup_form_encode() for more information.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1194">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="first_field" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1195">name of the first form field to encode into query</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1196">value of @first_field, followed by additional field names
and values, terminated by %NULL.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_query_from_form"
              c:identifier="soup_uri_set_query_from_form">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="1174">Sets @uri's query to the result of encoding @form according to the
HTML form rules. See soup_form_encode_hash() for more information.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1176">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="form" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="1177">a #GHashTable containing HTML form
information</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_scheme" c:identifier="soup_uri_set_scheme">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="940">Sets @uri's scheme to @scheme. This will also set @uri's port to
the default port for @scheme, if known.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="942">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="scheme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="943">the URI scheme</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user" c:identifier="soup_uri_set_user">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="976">Sets @uri's user to @user.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="978">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="user"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="979">the username, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="soup_uri_to_string">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="599">Returns a string representing @uri.

If @just_path_and_query is %TRUE, this concatenates the path and query
together. That is, it constructs the string that would be needed in
the Request-Line of an HTTP request for @uri.

Note that the output will never contain a password, even if @uri
does.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="613">a string representing @uri, which the caller must free.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="601">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
          <parameter name="just_path_and_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="602">if %TRUE, output just the path and query portions</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="uses_default_port"
              c:identifier="soup_uri_uses_default_port">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="903">Tests if @uri uses the default port for its scheme. (Eg, 80 for
http.) (This only works for http, https and ftp; libsoup does not know
the default ports of other protocols.)</doc>
        <source-position filename="../libsoup/soup-uri.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="911">%TRUE or %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="905">a #SoupURI</doc>
            <type name="URI" c:type="SoupURI*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="decode" c:identifier="soup_uri_decode">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="786">Fully %&lt;!-- --&gt;-decodes @part.

In the past, this would return %NULL if @part contained invalid
percent-encoding, but now it just ignores the problem (as
soup_uri_new() already did).</doc>
        <source-position filename="../libsoup/soup-uri.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="796">the decoded URI part.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="788">a URI part</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="encode" c:identifier="soup_uri_encode">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="726">This %&lt;!-- --&gt;-encodes the given URI part and returns the escaped
version in allocated memory, which the caller must free when it is
done.</doc>
        <source-position filename="../libsoup/soup-uri.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="736">the encoded URI part</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="728">a URI part</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="escape_extra"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="729">additional reserved characters to
escape (or %NULL)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="normalize" c:identifier="soup_uri_normalize">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="869">%&lt;!-- --&gt;-decodes any "unreserved" characters (or characters in
@unescape_extra) in @part, and %&lt;!-- --&gt;-encodes any non-ASCII
characters, spaces, and non-printing characters in @part.

"Unreserved" characters are those that are not allowed to be used
for punctuation according to the URI spec. For example, letters are
unreserved, so soup_uri_normalize() will turn
&lt;literal&gt;http://example.com/foo/b%&lt;!-- --&gt;61r&lt;/literal&gt; into
&lt;literal&gt;http://example.com/foo/bar&lt;/literal&gt;, which is guaranteed
to mean the same thing. However, "/" is "reserved", so
&lt;literal&gt;http://example.com/foo%&lt;!-- --&gt;2Fbar&lt;/literal&gt; would not
be changed, because it might mean something different to the
server.

In the past, this would return %NULL if @part contained invalid
percent-encoding, but now it just ignores the problem (as
soup_uri_new() already did).</doc>
        <source-position filename="../libsoup/soup-uri.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="892">the normalized URI part</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="871">a URI part</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="unescape_extra"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-uri.c"
                 line="872">reserved characters to unescape (or %NULL)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <function-macro name="URI_IS_VALID"
                    c:identifier="SOUP_URI_IS_VALID"
                    version="2.38"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-uri.c"
           line="85">Tests whether @uri is a valid #SoupURI; that is, that it is non-%NULL
and its @scheme and @path members are also non-%NULL.

This macro does not check whether http and https URIs have a non-%NULL
@host member.</doc>
      <source-position filename="../libsoup/soup-uri.h" line="137"/>
      <parameters>
        <parameter name="uri">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="87">a #SoupURI</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="URI_VALID_FOR_HTTP"
                    c:identifier="SOUP_URI_VALID_FOR_HTTP"
                    version="2.24"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-uri.c"
           line="100">Tests if @uri is a valid #SoupURI for HTTP communication; that is, if
it can be used to construct a #SoupMessage.</doc>
      <source-position filename="../libsoup/soup-uri.h" line="138"/>
      <parameters>
        <parameter name="uri">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="102">a #SoupURI</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_GETV"
                    c:identifier="SOUP_VALUE_GETV"
                    introspectable="0"
                    deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="43">Extracts a value of type @type from @val into @args. The return
value will point to the same data as @val rather than being a copy
of it.</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="24"/>
      <parameters>
        <parameter name="val">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="45">a #GValue</doc>
        </parameter>
        <parameter name="type">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="46">a #GType</doc>
        </parameter>
        <parameter name="args">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="47">#va_list pointing to a value of type pointer-to-@type</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VALUE_SETV"
                    c:identifier="SOUP_VALUE_SETV"
                    introspectable="0"
                    deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="30">Copies an argument of type @type from @args into @val. @val will
point directly to the value in @args rather than copying it, so you
must g_value_copy() it if you want it to remain valid.</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="14"/>
      <parameters>
        <parameter name="val">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="32">a #GValue</doc>
        </parameter>
        <parameter name="type">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="33">a #GType</doc>
        </parameter>
        <parameter name="args">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="34">#va_list pointing to a value of type @type</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="VERSION_MIN_REQUIRED"
              value="2"
              c:type="SOUP_VERSION_MIN_REQUIRED"
              version="2.42">
      <doc xml:space="preserve"
           filename="../libsoup/soup-version.c"
           line="150">A macro that should be defined by the user prior to including
libsoup.h. The definition should be one of the predefined libsoup
version macros: %SOUP_VERSION_2_24, %SOUP_VERSION_2_26, ...

This macro defines the earliest version of libsoup that the package
is required to be able to compile against.

If the compiler is configured to warn about the use of deprecated
functions, then using functions that were deprecated in version
%SOUP_VERSION_MIN_REQUIRED or earlier will cause warnings (but
using functions deprecated in later releases will not).</doc>
      <source-position filename="../libsoup/soup-version.h" line="93"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="WEBSOCKET_CONNECTION"
                    c:identifier="SOUP_WEBSOCKET_CONNECTION"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-connection.h"
                       line="30"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBSOCKET_CONNECTION_CLASS"
                    c:identifier="SOUP_WEBSOCKET_CONNECTION_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-connection.h"
                       line="32"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBSOCKET_CONNECTION_GET_CLASS"
                    c:identifier="SOUP_WEBSOCKET_CONNECTION_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-connection.h"
                       line="33"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBSOCKET_EXTENSION"
                    c:identifier="SOUP_WEBSOCKET_EXTENSION"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension.h"
                       line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBSOCKET_EXTENSION_CLASS"
                    c:identifier="SOUP_WEBSOCKET_EXTENSION_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBSOCKET_EXTENSION_DEFLATE"
                    c:identifier="SOUP_WEBSOCKET_EXTENSION_DEFLATE"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension-deflate.h"
                       line="29"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBSOCKET_EXTENSION_DEFLATE_CLASS"
                    c:identifier="SOUP_WEBSOCKET_EXTENSION_DEFLATE_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension-deflate.h"
                       line="31"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBSOCKET_EXTENSION_DEFLATE_GET_CLASS"
                    c:identifier="SOUP_WEBSOCKET_EXTENSION_DEFLATE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension-deflate.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBSOCKET_EXTENSION_GET_CLASS"
                    c:identifier="SOUP_WEBSOCKET_EXTENSION_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension.h"
                       line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBSOCKET_EXTENSION_MANAGER"
                    c:identifier="SOUP_WEBSOCKET_EXTENSION_MANAGER"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension-manager.h"
                       line="31"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBSOCKET_EXTENSION_MANAGER_CLASS"
                    c:identifier="SOUP_WEBSOCKET_EXTENSION_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension-manager.h"
                       line="33"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBSOCKET_EXTENSION_MANAGER_GET_CLASS"
                    c:identifier="SOUP_WEBSOCKET_EXTENSION_MANAGER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libsoup/soup-websocket-extension-manager.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="WebsocketCloseCode"
                 version="2.50"
                 glib:type-name="SoupWebsocketCloseCode"
                 glib:get-type="soup_websocket_close_code_get_type"
                 c:type="SoupWebsocketCloseCode">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="111">Pre-defined close codes that can be passed to
soup_websocket_connection_close() or received from
soup_websocket_connection_get_close_code(). (However, other codes
are also allowed.)</doc>
      <member name="normal"
              value="1000"
              c:identifier="SOUP_WEBSOCKET_CLOSE_NORMAL"
              glib:nick="normal">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="113">a normal, non-error close</doc>
      </member>
      <member name="going_away"
              value="1001"
              c:identifier="SOUP_WEBSOCKET_CLOSE_GOING_AWAY"
              glib:nick="going-away">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="114">the client/server is going away</doc>
      </member>
      <member name="protocol_error"
              value="1002"
              c:identifier="SOUP_WEBSOCKET_CLOSE_PROTOCOL_ERROR"
              glib:nick="protocol-error">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="115">a protocol error occurred</doc>
      </member>
      <member name="unsupported_data"
              value="1003"
              c:identifier="SOUP_WEBSOCKET_CLOSE_UNSUPPORTED_DATA"
              glib:nick="unsupported-data">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="116">the endpoint received data
  of a type that it does not support.</doc>
      </member>
      <member name="no_status"
              value="1005"
              c:identifier="SOUP_WEBSOCKET_CLOSE_NO_STATUS"
              glib:nick="no-status">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="118">reserved value indicating that
  no close code was present; must not be sent.</doc>
      </member>
      <member name="abnormal"
              value="1006"
              c:identifier="SOUP_WEBSOCKET_CLOSE_ABNORMAL"
              glib:nick="abnormal">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="120">reserved value indicating that
  the connection was closed abnormally; must not be sent.</doc>
      </member>
      <member name="bad_data"
              value="1007"
              c:identifier="SOUP_WEBSOCKET_CLOSE_BAD_DATA"
              glib:nick="bad-data">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="122">the endpoint received data that
  was invalid (eg, non-UTF-8 data in a text message).</doc>
      </member>
      <member name="policy_violation"
              value="1008"
              c:identifier="SOUP_WEBSOCKET_CLOSE_POLICY_VIOLATION"
              glib:nick="policy-violation">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="124">generic error code
  indicating some sort of policy violation.</doc>
      </member>
      <member name="too_big"
              value="1009"
              c:identifier="SOUP_WEBSOCKET_CLOSE_TOO_BIG"
              glib:nick="too-big">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="126">the endpoint received a message
  that is too big to process.</doc>
      </member>
      <member name="no_extension"
              value="1010"
              c:identifier="SOUP_WEBSOCKET_CLOSE_NO_EXTENSION"
              glib:nick="no-extension">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="128">the client is closing the
  connection because the server failed to negotiate a required
  extension.</doc>
      </member>
      <member name="server_error"
              value="1011"
              c:identifier="SOUP_WEBSOCKET_CLOSE_SERVER_ERROR"
              glib:nick="server-error">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="131">the server is closing the
  connection because it was unable to fulfill the request.</doc>
      </member>
      <member name="tls_handshake"
              value="1015"
              c:identifier="SOUP_WEBSOCKET_CLOSE_TLS_HANDSHAKE"
              glib:nick="tls-handshake">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="133">reserved value indicating that
  the TLS handshake failed; must not be sent.</doc>
      </member>
    </enumeration>
    <class name="WebsocketConnection"
           c:symbol-prefix="websocket_connection"
           c:type="SoupWebsocketConnection"
           version="2.50"
           parent="GObject.Object"
           glib:type-name="SoupWebsocketConnection"
           glib:get-type="soup_websocket_connection_get_type"
           glib:type-struct="WebsocketConnectionClass">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket-connection.c"
           line="57">A class representing a WebSocket connection.</doc>
      <source-position filename="../libsoup/soup-websocket-connection.h"
                       line="62"/>
      <constructor name="new"
                   c:identifier="soup_websocket_connection_new"
                   version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1731">Creates a #SoupWebsocketConnection on @stream. This should be
called after completing the handshake to begin using the WebSocket
protocol.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="1743">a new #SoupWebsocketConnection</doc>
          <type name="WebsocketConnection" c:type="SoupWebsocketConnection*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1733">a #GIOStream connected to the WebSocket server</doc>
            <type name="Gio.IOStream" c:type="GIOStream*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1734">the URI of the connection</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1735">the type of connection (client/side)</doc>
            <type name="WebsocketConnectionType"
                  c:type="SoupWebsocketConnectionType"/>
          </parameter>
          <parameter name="origin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1736">the Origin of the client</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="protocol"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1737">the subprotocol in use</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_extensions"
                   c:identifier="soup_websocket_connection_new_with_extensions"
                   version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1757">Creates a #SoupWebsocketConnection on @stream with the given active @extensions.
This should be called after completing the handshake to begin using the WebSocket
protocol.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="1770">a new #SoupWebsocketConnection</doc>
          <type name="WebsocketConnection" c:type="SoupWebsocketConnection*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1759">a #GIOStream connected to the WebSocket server</doc>
            <type name="Gio.IOStream" c:type="GIOStream*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1760">the URI of the connection</doc>
            <type name="URI" c:type="SoupURI*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1761">the type of connection (client/side)</doc>
            <type name="WebsocketConnectionType"
                  c:type="SoupWebsocketConnectionType"/>
          </parameter>
          <parameter name="origin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1762">the Origin of the client</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="protocol"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1763">the subprotocol in use</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="extensions" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1764">a #GList of #SoupWebsocketExtension objects</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="WebsocketExtension"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="closed">
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="closing">
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="error">
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="message">
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="WebsocketDataType" c:type="SoupWebsocketDataType"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="pong">
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="close"
              c:identifier="soup_websocket_connection_close"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="2062">Close the connection in an orderly fashion.

Note that until the #SoupWebsocketConnection::closed signal fires, the connection
is not yet completely closed. The close message is not even sent until the
main loop runs.

The @code and @data are sent to the peer along with the close request.
If @code is %SOUP_WEBSOCKET_CLOSE_NO_STATUS a close message with no body
(without code and data) is sent.
Note that the @data must be UTF-8 valid.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2064">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2065">close code</doc>
            <type name="gushort" c:type="gushort"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2066">close data</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_close_code"
              c:identifier="soup_websocket_connection_get_close_code"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1930">Get the close code received from the WebSocket peer.

This only becomes valid once the WebSocket is in the
%SOUP_WEBSOCKET_STATE_CLOSED state. The value will often be in the
#SoupWebsocketCloseCode enumeration, but may also be an application
defined close code.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="1941">the close code or zero.</doc>
          <type name="gushort" c:type="gushort"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1932">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_close_data"
              c:identifier="soup_websocket_connection_get_close_data"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1953">Get the close data received from the WebSocket peer.

This only becomes valid once the WebSocket is in the
%SOUP_WEBSOCKET_STATE_CLOSED state. The data may be freed once
the main loop is run, so copy it if you need to keep it around.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="1963">the close data or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1955">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_type"
              c:identifier="soup_websocket_connection_get_connection_type"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1814">Get the connection type (client/server) of the connection.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="1820">the connection type</doc>
          <type name="WebsocketConnectionType"
                c:type="SoupWebsocketConnectionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1816">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extensions"
              c:identifier="soup_websocket_connection_get_extensions"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1889">Get the extensions chosen via negotiation with the peer.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="1895">a #GList of #SoupWebsocketExtension objects</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="WebsocketExtension"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1891">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_io_stream"
              c:identifier="soup_websocket_connection_get_io_stream"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1796">Get the I/O stream the WebSocket is communicating over.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="1802">the WebSocket's I/O stream.</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1798">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_keepalive_interval"
              c:identifier="soup_websocket_connection_get_keepalive_interval"
              version="2.58">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="2148">Gets the keepalive interval in seconds or 0 if disabled.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="2154">the keepalive interval.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2150">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_incoming_payload_size"
              c:identifier="soup_websocket_connection_get_max_incoming_payload_size"
              version="2.56">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="2102">Gets the maximum payload size allowed for incoming packets.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="2108">the maximum payload size.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2104">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_origin"
              c:identifier="soup_websocket_connection_get_origin"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1853">Get the origin of the WebSocket.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="91"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="1859">the origin, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1855">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol"
              c:identifier="soup_websocket_connection_get_protocol"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1871">Get the protocol chosen via negotiation with the peer.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="94"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="1877">the chosen protocol, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1873">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="soup_websocket_connection_get_state"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1907">Get the current state of the WebSocket.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="1913">the state</doc>
          <type name="WebsocketState" c:type="SoupWebsocketState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1909">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri"
              c:identifier="soup_websocket_connection_get_uri"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1832">Get the URI of the WebSocket.

For servers this represents the address of the WebSocket, and
for clients it is the address connected to.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-connection.c"
               line="1841">the URI</doc>
          <type name="URI" c:type="SoupURI*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1834">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_binary"
              c:identifier="soup_websocket_connection_send_binary"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="2005">Send a binary message to the peer. If @length is 0, @data may be %NULL.

The message is queued to be sent and will be sent when the main loop
is run.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2007">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2008">the message contents</doc>
            <array length="1" zero-terminated="0" c:type="gconstpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2009">the length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_message"
              c:identifier="soup_websocket_connection_send_message"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="2030">Send a message of the given @type to the peer. Note that this method,
allows to send text messages containing %NULL characters.

The message is queued to be sent and will be sent when the main loop
is run.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2032">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2033">the type of message contents</doc>
            <type name="WebsocketDataType" c:type="SoupWebsocketDataType"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2034">the message data as #GBytes</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_text"
              c:identifier="soup_websocket_connection_send_text"
              version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1975">Send a %NULL-terminated text (UTF-8) message to the peer. If you need
to send text messages containing %NULL characters use
soup_websocket_connection_send_message() instead.

The message is queued to be sent and will be sent when the main loop
is run.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1977">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1978">the message contents</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keepalive_interval"
              c:identifier="soup_websocket_connection_set_keepalive_interval"
              version="2.58">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="2183">Sets the interval in seconds on when to send a ping message which will serve
as a keepalive message. If set to 0 the keepalive message is disabled.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2185">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
          <parameter name="interval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2186">the interval to send a ping message or 0 to disable it</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_incoming_payload_size"
              c:identifier="soup_websocket_connection_set_max_incoming_payload_size"
              version="2.56">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="2123">Sets the maximum payload size allowed for incoming packets. It
does not limit the outgoing packet size.</doc>
        <source-position filename="../libsoup/soup-websocket-connection.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2125">the WebSocket</doc>
            <type name="WebsocketConnection"
                  c:type="SoupWebsocketConnection*"/>
          </instance-parameter>
          <parameter name="max_incoming_payload_size"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="2126">the maximum payload size</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection-type"
                version="2.50"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1496">The type of connection (client/server).</doc>
        <type name="WebsocketConnectionType"/>
      </property>
      <property name="extensions"
                version="2.68"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1620">List of #SoupWebsocketExtension objects that are active in the connection.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="io-stream"
                version="2.50"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1477">The underlying IO stream the WebSocket is communicating
over.

The input and output streams must be pollable streams.</doc>
        <type name="Gio.IOStream"/>
      </property>
      <property name="keepalive-interval"
                version="2.58"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1600">Interval in seconds on when to send a ping message which will
serve as a keepalive message. If set to 0 the keepalive message is
disabled.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="max-incoming-payload-size"
                version="2.56"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1581">The maximum payload size for incoming packets the protocol expects
or 0 to not limit it.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="origin"
                version="2.50"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1532">The client's Origin.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="protocol"
                version="2.50"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1548">The chosen protocol, or %NULL if a protocol was not agreed
upon.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state" version="2.50" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1565">The current state of the WebSocket.</doc>
        <type name="WebsocketState"/>
      </property>
      <property name="uri"
                version="2.50"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1513">The URI of the WebSocket.

For servers this represents the address of the WebSocket,
and for clients it is the address connected to.</doc>
        <type name="URI"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="WebsocketConnectionPrivate"
              c:type="SoupWebsocketConnectionPrivate*"/>
      </field>
      <glib:signal name="closed" when="first" version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1689">Emitted when the connection has completely closed, either
due to an orderly close from the peer, one initiated via
soup_websocket_connection_close() or a fatal error
condition that caused a close.

This signal will be emitted once.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="closing" when="last" version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1674">This signal will be emitted during an orderly close.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="error" when="first" version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1656">Emitted when an error occurred on the WebSocket. This may
be fired multiple times. Fatal errors will be followed by
the #SoupWebsocketConnection::closed signal being emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1659">the error that occured</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="message" when="first" version="2.50">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1635">Emitted when we receive a message from the peer.

As a convenience, the @message data will always be
NUL-terminated, but the NUL byte will not be included in
the length count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1638">the type of message contents</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1639">the message data</doc>
            <type name="GLib.Bytes"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="pong" when="first" version="2.60">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-connection.c"
             line="1709">Emitted when we receive a Pong frame (solicited or
unsolicited) from the peer.

As a convenience, the @message data will always be
NUL-terminated, but the NUL byte will not be included in
the length count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-connection.c"
                 line="1712">the application data (if any)</doc>
            <type name="GLib.Bytes"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WebsocketConnectionClass"
            c:type="SoupWebsocketConnectionClass"
            glib:is-gtype-struct-for="WebsocketConnection"
            version="2.50">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket-connection.c"
           line="65">The abstract base class for #SoupWebsocketConnection</doc>
      <source-position filename="../libsoup/soup-websocket-connection.h"
                       line="62"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="message">
        <callback name="message">
          <source-position filename="../libsoup/soup-websocket-connection.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WebsocketConnection"
                    c:type="SoupWebsocketConnection*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="WebsocketDataType" c:type="SoupWebsocketDataType"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="error">
        <callback name="error">
          <source-position filename="../libsoup/soup-websocket-connection.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WebsocketConnection"
                    c:type="SoupWebsocketConnection*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="GLib.Error" c:type="GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="closing">
        <callback name="closing">
          <source-position filename="../libsoup/soup-websocket-connection.h"
                           line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WebsocketConnection"
                    c:type="SoupWebsocketConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="closed">
        <callback name="closed">
          <source-position filename="../libsoup/soup-websocket-connection.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WebsocketConnection"
                    c:type="SoupWebsocketConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pong">
        <callback name="pong">
          <source-position filename="../libsoup/soup-websocket-connection.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WebsocketConnection"
                    c:type="SoupWebsocketConnection*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="WebsocketConnectionPrivate"
            c:type="SoupWebsocketConnectionPrivate"
            disguised="1">
      <source-position filename="../libsoup/soup-websocket-connection.h"
                       line="36"/>
    </record>
    <enumeration name="WebsocketConnectionType"
                 version="2.50"
                 glib:type-name="SoupWebsocketConnectionType"
                 glib:get-type="soup_websocket_connection_type_get_type"
                 c:type="SoupWebsocketConnectionType">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="89">The type of a #SoupWebsocketConnection.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SOUP_WEBSOCKET_CONNECTION_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="91">unknown/invalid connection</doc>
      </member>
      <member name="client"
              value="1"
              c:identifier="SOUP_WEBSOCKET_CONNECTION_CLIENT"
              glib:nick="client">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="92">a client-side connection</doc>
      </member>
      <member name="server"
              value="2"
              c:identifier="SOUP_WEBSOCKET_CONNECTION_SERVER"
              glib:nick="server">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="93">a server-side connection</doc>
      </member>
    </enumeration>
    <enumeration name="WebsocketDataType"
                 version="2.50"
                 glib:type-name="SoupWebsocketDataType"
                 glib:get-type="soup_websocket_data_type_get_type"
                 c:type="SoupWebsocketDataType">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="100">The type of data contained in a #SoupWebsocketConnection::message
signal.</doc>
      <member name="text"
              value="1"
              c:identifier="SOUP_WEBSOCKET_DATA_TEXT"
              glib:nick="text">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="102">UTF-8 text</doc>
      </member>
      <member name="binary"
              value="2"
              c:identifier="SOUP_WEBSOCKET_DATA_BINARY"
              glib:nick="binary">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="103">binary data</doc>
      </member>
    </enumeration>
    <enumeration name="WebsocketError"
                 version="2.50"
                 glib:type-name="SoupWebsocketError"
                 glib:get-type="soup_websocket_error_get_type"
                 c:type="SoupWebsocketError">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="74">WebSocket-related errors.</doc>
      <member name="failed"
              value="0"
              c:identifier="SOUP_WEBSOCKET_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="76">a generic error</doc>
      </member>
      <member name="not_websocket"
              value="1"
              c:identifier="SOUP_WEBSOCKET_ERROR_NOT_WEBSOCKET"
              glib:nick="not-websocket">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="77">attempted to handshake with a
  server that does not appear to understand WebSockets.</doc>
      </member>
      <member name="bad_handshake"
              value="2"
              c:identifier="SOUP_WEBSOCKET_ERROR_BAD_HANDSHAKE"
              glib:nick="bad-handshake">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="79">the WebSocket handshake failed
  because some detail was invalid (eg, incorrect accept key).</doc>
      </member>
      <member name="bad_origin"
              value="3"
              c:identifier="SOUP_WEBSOCKET_ERROR_BAD_ORIGIN"
              glib:nick="bad-origin">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="81">the WebSocket handshake failed
  because the "Origin" header was not an allowed value.</doc>
      </member>
      <function name="get_quark" c:identifier="soup_websocket_error_get_quark">
        <source-position filename="../libsoup/soup-websocket.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="WebsocketExtension"
           c:symbol-prefix="websocket_extension"
           c:type="SoupWebsocketExtension"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="SoupWebsocketExtension"
           glib:get-type="soup_websocket_extension_get_type"
           glib:type-struct="WebsocketExtensionClass">
      <source-position filename="../libsoup/soup-websocket-extension.h"
                       line="71"/>
      <virtual-method name="configure" invoker="configure" throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-extension.c"
             line="69">Configures @extension with the given @params</doc>
        <source-position filename="../libsoup/soup-websocket-extension.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-extension.c"
               line="78">%TRUE if extension could be configured with the given parameters, or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="71">a #SoupWebsocketExtension</doc>
            <type name="WebsocketExtension" c:type="SoupWebsocketExtension*"/>
          </instance-parameter>
          <parameter name="connection_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="72">either %SOUP_WEBSOCKET_CONNECTION_CLIENT or %SOUP_WEBSOCKET_CONNECTION_SERVER</doc>
            <type name="WebsocketConnectionType"
                  c:type="SoupWebsocketConnectionType"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="73">the parameters, or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_request_params"
                      invoker="get_request_params"
                      version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-extension.c"
             line="99">Get the parameters strings to be included in the request header. If the extension
doesn't include any parameter in the request, this function returns %NULL.</doc>
        <source-position filename="../libsoup/soup-websocket-extension.h"
                         line="52"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-extension.c"
               line="106">a new allocated string with the parameters</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="101">a #SoupWebsocketExtension</doc>
            <type name="WebsocketExtension" c:type="SoupWebsocketExtension*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_response_params"
                      invoker="get_response_params"
                      version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-extension.c"
             line="124">Get the parameters strings to be included in the response header. If the extension
doesn't include any parameter in the response, this function returns %NULL.</doc>
        <source-position filename="../libsoup/soup-websocket-extension.h"
                         line="54"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-extension.c"
               line="131">a new allocated string with the parameters</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="126">a #SoupWebsocketExtension</doc>
            <type name="WebsocketExtension" c:type="SoupWebsocketExtension*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="process_incoming_message"
                      invoker="process_incoming_message"
                      version="2.68"
                      throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-extension.c"
             line="186">Process a message after it's received. If the payload isn't changed the given
@payload is just returned, otherwise g_bytes_unref() is called on the given
@payload and a new #GBytes is returned with the new data.

Extensions using reserved bits of the header will reset them in @header.</doc>
        <source-position filename="../libsoup/soup-websocket-extension.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-extension.c"
               line="199">the message payload data, or %NULL in case of error</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="188">a #SoupWebsocketExtension</doc>
            <type name="WebsocketExtension" c:type="SoupWebsocketExtension*"/>
          </instance-parameter>
          <parameter name="header"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="189">the message header</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="payload" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="190">the payload data</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="process_outgoing_message"
                      invoker="process_outgoing_message"
                      version="2.68"
                      throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-extension.c"
             line="149">Process a message before it's sent. If the payload isn't changed the given
@payload is just returned, otherwise g_bytes_unref() is called on the given
@payload and a new #GBytes is returned with the new data.

Extensions using reserved bits of the header will change them in @header.</doc>
        <source-position filename="../libsoup/soup-websocket-extension.h"
                         line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-extension.c"
               line="162">the message payload data, or %NULL in case of error</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="151">a #SoupWebsocketExtension</doc>
            <type name="WebsocketExtension" c:type="SoupWebsocketExtension*"/>
          </instance-parameter>
          <parameter name="header"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="152">the message header</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="payload" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="153">the payload data</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="configure"
              c:identifier="soup_websocket_extension_configure"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-extension.c"
             line="69">Configures @extension with the given @params</doc>
        <source-position filename="../libsoup/soup-websocket-extension.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-extension.c"
               line="78">%TRUE if extension could be configured with the given parameters, or %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="71">a #SoupWebsocketExtension</doc>
            <type name="WebsocketExtension" c:type="SoupWebsocketExtension*"/>
          </instance-parameter>
          <parameter name="connection_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="72">either %SOUP_WEBSOCKET_CONNECTION_CLIENT or %SOUP_WEBSOCKET_CONNECTION_SERVER</doc>
            <type name="WebsocketConnectionType"
                  c:type="SoupWebsocketConnectionType"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="73">the parameters, or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_request_params"
              c:identifier="soup_websocket_extension_get_request_params"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-extension.c"
             line="99">Get the parameters strings to be included in the request header. If the extension
doesn't include any parameter in the request, this function returns %NULL.</doc>
        <source-position filename="../libsoup/soup-websocket-extension.h"
                         line="82"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-extension.c"
               line="106">a new allocated string with the parameters</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="101">a #SoupWebsocketExtension</doc>
            <type name="WebsocketExtension" c:type="SoupWebsocketExtension*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_response_params"
              c:identifier="soup_websocket_extension_get_response_params"
              version="2.68">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-extension.c"
             line="124">Get the parameters strings to be included in the response header. If the extension
doesn't include any parameter in the response, this function returns %NULL.</doc>
        <source-position filename="../libsoup/soup-websocket-extension.h"
                         line="85"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-extension.c"
               line="131">a new allocated string with the parameters</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="126">a #SoupWebsocketExtension</doc>
            <type name="WebsocketExtension" c:type="SoupWebsocketExtension*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="process_incoming_message"
              c:identifier="soup_websocket_extension_process_incoming_message"
              version="2.68"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-extension.c"
             line="186">Process a message after it's received. If the payload isn't changed the given
@payload is just returned, otherwise g_bytes_unref() is called on the given
@payload and a new #GBytes is returned with the new data.

Extensions using reserved bits of the header will reset them in @header.</doc>
        <source-position filename="../libsoup/soup-websocket-extension.h"
                         line="93"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-extension.c"
               line="199">the message payload data, or %NULL in case of error</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="188">a #SoupWebsocketExtension</doc>
            <type name="WebsocketExtension" c:type="SoupWebsocketExtension*"/>
          </instance-parameter>
          <parameter name="header"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="189">the message header</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="payload" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="190">the payload data</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="process_outgoing_message"
              c:identifier="soup_websocket_extension_process_outgoing_message"
              version="2.68"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-extension.c"
             line="149">Process a message before it's sent. If the payload isn't changed the given
@payload is just returned, otherwise g_bytes_unref() is called on the given
@payload and a new #GBytes is returned with the new data.

Extensions using reserved bits of the header will change them in @header.</doc>
        <source-position filename="../libsoup/soup-websocket-extension.h"
                         line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket-extension.c"
               line="162">the message payload data, or %NULL in case of error</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="151">a #SoupWebsocketExtension</doc>
            <type name="WebsocketExtension" c:type="SoupWebsocketExtension*"/>
          </instance-parameter>
          <parameter name="header"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="152">the message header</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="payload" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="153">the payload data</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="WebsocketExtensionClass"
            c:type="SoupWebsocketExtensionClass"
            glib:is-gtype-struct-for="WebsocketExtension"
            version="2.68">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket-extension.c"
           line="39">The class structure for the SoupWebsocketExtension.</doc>
      <source-position filename="../libsoup/soup-websocket-extension.h"
                       line="71"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket-extension.c"
             line="41">the parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="configure">
        <callback name="configure" throws="1">
          <source-position filename="../libsoup/soup-websocket-extension.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="78">%TRUE if extension could be configured with the given parameters, or %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-websocket-extension.c"
                   line="71">a #SoupWebsocketExtension</doc>
              <type name="WebsocketExtension"
                    c:type="SoupWebsocketExtension*"/>
            </parameter>
            <parameter name="connection_type" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-websocket-extension.c"
                   line="72">either %SOUP_WEBSOCKET_CONNECTION_CLIENT or %SOUP_WEBSOCKET_CONNECTION_SERVER</doc>
              <type name="WebsocketConnectionType"
                    c:type="SoupWebsocketConnectionType"/>
            </parameter>
            <parameter name="params"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-websocket-extension.c"
                   line="73">the parameters, or %NULL</doc>
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_request_params">
        <callback name="get_request_params">
          <source-position filename="../libsoup/soup-websocket-extension.h"
                           line="52"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="106">a new allocated string with the parameters</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-websocket-extension.c"
                   line="101">a #SoupWebsocketExtension</doc>
              <type name="WebsocketExtension"
                    c:type="SoupWebsocketExtension*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_response_params">
        <callback name="get_response_params">
          <source-position filename="../libsoup/soup-websocket-extension.h"
                           line="54"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="131">a new allocated string with the parameters</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-websocket-extension.c"
                   line="126">a #SoupWebsocketExtension</doc>
              <type name="WebsocketExtension"
                    c:type="SoupWebsocketExtension*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="process_outgoing_message">
        <callback name="process_outgoing_message" throws="1">
          <source-position filename="../libsoup/soup-websocket-extension.h"
                           line="56"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="162">the message payload data, or %NULL in case of error</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-websocket-extension.c"
                   line="151">a #SoupWebsocketExtension</doc>
              <type name="WebsocketExtension"
                    c:type="SoupWebsocketExtension*"/>
            </parameter>
            <parameter name="header"
                       direction="inout"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-websocket-extension.c"
                   line="152">the message header</doc>
              <type name="guint8" c:type="guint8*"/>
            </parameter>
            <parameter name="payload" transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-websocket-extension.c"
                   line="153">the payload data</doc>
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="process_incoming_message">
        <callback name="process_incoming_message" throws="1">
          <source-position filename="../libsoup/soup-websocket-extension.h"
                           line="61"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-websocket-extension.c"
                 line="199">the message payload data, or %NULL in case of error</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-websocket-extension.c"
                   line="188">a #SoupWebsocketExtension</doc>
              <type name="WebsocketExtension"
                    c:type="SoupWebsocketExtension*"/>
            </parameter>
            <parameter name="header"
                       direction="inout"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-websocket-extension.c"
                   line="189">the message header</doc>
              <type name="guint8" c:type="guint8*"/>
            </parameter>
            <parameter name="payload" transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../libsoup/soup-websocket-extension.c"
                   line="190">the payload data</doc>
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_libsoup_reserved1" introspectable="0">
        <callback name="_libsoup_reserved1">
          <source-position filename="../libsoup/soup-websocket-extension.h"
                           line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved2" introspectable="0">
        <callback name="_libsoup_reserved2">
          <source-position filename="../libsoup/soup-websocket-extension.h"
                           line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved3" introspectable="0">
        <callback name="_libsoup_reserved3">
          <source-position filename="../libsoup/soup-websocket-extension.h"
                           line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_libsoup_reserved4" introspectable="0">
        <callback name="_libsoup_reserved4">
          <source-position filename="../libsoup/soup-websocket-extension.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="WebsocketExtensionDeflate"
           c:symbol-prefix="websocket_extension_deflate"
           c:type="SoupWebsocketExtensionDeflate"
           parent="WebsocketExtension"
           glib:type-name="SoupWebsocketExtensionDeflate"
           glib:get-type="soup_websocket_extension_deflate_get_type"
           glib:type-struct="WebsocketExtensionDeflateClass">
      <source-position filename="../libsoup/soup-websocket-extension-deflate.h"
                       line="44"/>
      <field name="parent">
        <type name="WebsocketExtension" c:type="SoupWebsocketExtension"/>
      </field>
    </class>
    <record name="WebsocketExtensionDeflateClass"
            c:type="SoupWebsocketExtensionDeflateClass"
            glib:is-gtype-struct-for="WebsocketExtensionDeflate">
      <source-position filename="../libsoup/soup-websocket-extension-deflate.h"
                       line="44"/>
      <field name="parent_class">
        <type name="WebsocketExtensionClass"
              c:type="SoupWebsocketExtensionClass"/>
      </field>
    </record>
    <class name="WebsocketExtensionManager"
           c:symbol-prefix="websocket_extension_manager"
           c:type="SoupWebsocketExtensionManager"
           parent="GObject.Object"
           glib:type-name="SoupWebsocketExtensionManager"
           glib:get-type="soup_websocket_extension_manager_get_type"
           glib:type-struct="WebsocketExtensionManagerClass">
      <source-position filename="../libsoup/soup-websocket-extension-manager.h"
                       line="43"/>
      <implements name="SessionFeature"/>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="WebsocketExtensionManagerClass"
            c:type="SoupWebsocketExtensionManagerClass"
            glib:is-gtype-struct-for="WebsocketExtensionManager">
      <source-position filename="../libsoup/soup-websocket-extension-manager.h"
                       line="43"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="WebsocketState"
                 version="2.50"
                 glib:type-name="SoupWebsocketState"
                 glib:get-type="soup_websocket_state_get_type"
                 c:type="SoupWebsocketState">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="144">The state of the WebSocket connection.</doc>
      <member name="open"
              value="1"
              c:identifier="SOUP_WEBSOCKET_STATE_OPEN"
              glib:nick="open">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="146">the connection is ready to send messages</doc>
      </member>
      <member name="closing"
              value="2"
              c:identifier="SOUP_WEBSOCKET_STATE_CLOSING"
              glib:nick="closing">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="147">the connection is in the process of
  closing down; messages may be received, but not sent</doc>
      </member>
      <member name="closed"
              value="3"
              c:identifier="SOUP_WEBSOCKET_STATE_CLOSED"
              glib:nick="closed">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="149">the connection is completely closed down</doc>
      </member>
    </enumeration>
    <enumeration name="XMLRPCError"
                 glib:type-name="SoupXMLRPCError"
                 glib:get-type="soup_xmlrpc_error_get_type"
                 c:type="SoupXMLRPCError"
                 glib:error-domain="soup_xmlrpc_error_quark">
      <member name="arguments"
              value="0"
              c:identifier="SOUP_XMLRPC_ERROR_ARGUMENTS"
              glib:nick="arguments">
      </member>
      <member name="retval"
              value="1"
              c:identifier="SOUP_XMLRPC_ERROR_RETVAL"
              glib:nick="retval">
      </member>
      <function name="quark" c:identifier="soup_xmlrpc_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="XMLRPCFault"
                 glib:type-name="SoupXMLRPCFault"
                 glib:get-type="soup_xmlrpc_fault_get_type"
                 c:type="SoupXMLRPCFault">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="1448">Pre-defined XML-RPC fault codes from &lt;ulink
url="http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php"&gt;http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php&lt;/ulink&gt;.
These are an extension, not part of the XML-RPC spec; you can't
assume servers will use them.</doc>
      <member name="parse_error_not_well_formed"
              value="-32700"
              c:identifier="SOUP_XMLRPC_FAULT_PARSE_ERROR_NOT_WELL_FORMED"
              glib:nick="parse-error-not-well-formed">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1450">request was not
  well-formed</doc>
      </member>
      <member name="parse_error_unsupported_encoding"
              value="-32701"
              c:identifier="SOUP_XMLRPC_FAULT_PARSE_ERROR_UNSUPPORTED_ENCODING"
              glib:nick="parse-error-unsupported-encoding">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1452">request was in
  an unsupported encoding</doc>
      </member>
      <member name="parse_error_invalid_character_for_encoding"
              value="-32702"
              c:identifier="SOUP_XMLRPC_FAULT_PARSE_ERROR_INVALID_CHARACTER_FOR_ENCODING"
              glib:nick="parse-error-invalid-character-for-encoding">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1454">request contained an invalid character</doc>
      </member>
      <member name="server_error_invalid_xml_rpc"
              value="-32600"
              c:identifier="SOUP_XMLRPC_FAULT_SERVER_ERROR_INVALID_XML_RPC"
              glib:nick="server-error-invalid-xml-rpc">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1456">request was not
  valid XML-RPC</doc>
      </member>
      <member name="server_error_requested_method_not_found"
              value="-32601"
              c:identifier="SOUP_XMLRPC_FAULT_SERVER_ERROR_REQUESTED_METHOD_NOT_FOUND"
              glib:nick="server-error-requested-method-not-found">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1458">method
  not found</doc>
      </member>
      <member name="server_error_invalid_method_parameters"
              value="-32602"
              c:identifier="SOUP_XMLRPC_FAULT_SERVER_ERROR_INVALID_METHOD_PARAMETERS"
              glib:nick="server-error-invalid-method-parameters">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1460">invalid
  parameters</doc>
      </member>
      <member name="server_error_internal_xml_rpc_error"
              value="-32603"
              c:identifier="SOUP_XMLRPC_FAULT_SERVER_ERROR_INTERNAL_XML_RPC_ERROR"
              glib:nick="server-error-internal-xml-rpc-error">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1462">internal
  error</doc>
      </member>
      <member name="application_error"
              value="-32500"
              c:identifier="SOUP_XMLRPC_FAULT_APPLICATION_ERROR"
              glib:nick="application-error">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1464">start of reserved range for
  application error codes</doc>
      </member>
      <member name="system_error"
              value="-32400"
              c:identifier="SOUP_XMLRPC_FAULT_SYSTEM_ERROR"
              glib:nick="system-error">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1466">start of reserved range for
  system error codes</doc>
      </member>
      <member name="transport_error"
              value="-32300"
              c:identifier="SOUP_XMLRPC_FAULT_TRANSPORT_ERROR"
              glib:nick="transport-error">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1468">start of reserved range for
  transport error codes</doc>
      </member>
      <function name="quark" c:identifier="soup_xmlrpc_fault_quark">
        <source-position filename="../libsoup/soup-xmlrpc.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <record name="XMLRPCParams"
            c:type="SoupXMLRPCParams"
            disguised="1"
            version="2.52">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="1080">Opaque structure containing XML-RPC methodCall parameter values.
Can be parsed using soup_xmlrpc_params_parse() and freed with
soup_xmlrpc_params_free().</doc>
      <source-position filename="../libsoup/soup-xmlrpc.h" line="31"/>
      <method name="free"
              c:identifier="soup_xmlrpc_params_free"
              version="2.52">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1094">Free a #SoupXMLRPCParams returned by soup_xmlrpc_parse_request().</doc>
        <source-position filename="../libsoup/soup-xmlrpc.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-xmlrpc.c"
                 line="1096">a SoupXMLRPCParams</doc>
            <type name="XMLRPCParams" c:type="SoupXMLRPCParams*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse"
              c:identifier="soup_xmlrpc_params_parse"
              version="2.52"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1123">Parse method parameters returned by soup_xmlrpc_parse_request().

Deserialization details:
 - If @signature is provided, &amp;lt;int&amp;gt; and &amp;lt;i4&amp;gt; can be deserialized
   to byte, int16, uint16, int32, uint32, int64 or uint64. Otherwise
   it will be deserialized to int32. If the value is out of range
   for the target type it will return an error.
 - &amp;lt;struct&amp;gt; will be deserialized to "a{sv}". @signature could define
   another value type (e.g. "a{ss}").
 - &amp;lt;array&amp;gt; will be deserialized to "av". @signature could define
   another element type (e.g. "as") or could be a tuple (e.g. "(ss)").
 - &amp;lt;base64&amp;gt; will be deserialized to "ay".
 - &amp;lt;string&amp;gt; will be deserialized to "s".
 - &amp;lt;dateTime.iso8601&amp;gt; will be deserialized to an unspecified variant
   type. If @signature is provided it must have the generic "v" type, which
   means there is no guarantee that it's actually a datetime that has been
   received. soup_xmlrpc_variant_get_datetime() must be used to parse and
   type check this special variant.
 - @signature must not have maybes, otherwise an error is returned.
 - Dictionaries must have string keys, otherwise an error is returned.</doc>
        <source-position filename="../libsoup/soup-xmlrpc.h" line="35"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="1150">a new (non-floating) #GVariant, or %NULL</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-xmlrpc.c"
                 line="1125">A #SoupXMLRPCParams</doc>
            <type name="XMLRPCParams" c:type="SoupXMLRPCParams*"/>
          </instance-parameter>
          <parameter name="signature"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsoup/soup-xmlrpc.c"
                 line="1126">A valid #GVariant type string, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function name="add_completion"
              c:identifier="soup_add_completion"
              version="2.24"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-misc.c"
           line="134">Adds @function to be executed from inside @async_context with the
default priority. Use this when you want to complete an action in
@async_context's main loop, as soon as possible.</doc>
      <source-position filename="../libsoup/soup-misc.h" line="25"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-misc.c"
             line="145">a #GSource, which can be removed from @async_context
with g_source_destroy().</doc>
        <type name="GLib.Source" c:type="GSource*"/>
      </return-value>
      <parameters>
        <parameter name="async_context"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="136">the #GMainContext to dispatch the I/O
watch in, or %NULL for the default context</doc>
          <type name="GLib.MainContext" c:type="GMainContext*"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" closure="2">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="138">the callback to invoke</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="139">user data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="add_idle" c:identifier="soup_add_idle" introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-misc.c"
           line="92">Adds an idle event as with g_idle_add(), but using the given
@async_context.

If you want @function to run "right away", use
soup_add_completion(), since that sets a higher priority on the
#GSource than soup_add_idle() does.</doc>
      <source-position filename="../libsoup/soup-misc.h" line="21"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-misc.c"
             line="106">a #GSource, which can be removed from @async_context
with g_source_destroy().</doc>
        <type name="GLib.Source" c:type="GSource*"/>
      </return-value>
      <parameters>
        <parameter name="async_context"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="94">the #GMainContext to dispatch the I/O
watch in, or %NULL for the default context</doc>
          <type name="GLib.MainContext" c:type="GMainContext*"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" closure="2">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="96">the callback to invoke at idle time</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="97">user data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="add_io_watch"
              c:identifier="soup_add_io_watch"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-misc.c"
           line="65">Adds an I/O watch as with g_io_add_watch(), but using the given
@async_context.</doc>
      <source-position filename="../libsoup/soup-misc.h" line="15"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-misc.c"
             line="77">a #GSource, which can be removed from @async_context
with g_source_destroy().</doc>
        <type name="GLib.Source" c:type="GSource*"/>
      </return-value>
      <parameters>
        <parameter name="async_context"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="67">the #GMainContext to dispatch the I/O
watch in, or %NULL for the default context</doc>
          <type name="GLib.MainContext" c:type="GMainContext*"/>
        </parameter>
        <parameter name="chan" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="69">the #GIOChannel to watch</doc>
          <type name="GLib.IOChannel" c:type="GIOChannel*"/>
        </parameter>
        <parameter name="condition" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="70">the condition to watch for</doc>
          <type name="GLib.IOCondition" c:type="GIOCondition"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" closure="4">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="71">the callback to invoke when @condition occurs</doc>
          <type name="GLib.IOFunc" c:type="GIOFunc"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="72">user data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="add_timeout"
              c:identifier="soup_add_timeout"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-misc.c"
           line="161">Adds a timeout as with g_timeout_add(), but using the given
@async_context.</doc>
      <source-position filename="../libsoup/soup-misc.h" line="29"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-misc.c"
             line="172">a #GSource, which can be removed from @async_context
with g_source_destroy().</doc>
        <type name="GLib.Source" c:type="GSource*"/>
      </return-value>
      <parameters>
        <parameter name="async_context"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="163">the #GMainContext to dispatch the I/O
watch in, or %NULL for the default context</doc>
          <type name="GLib.MainContext" c:type="GMainContext*"/>
        </parameter>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="165">the timeout interval, in milliseconds</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none" closure="3">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="166">the callback to invoke at timeout time</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="167">user data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="char_is_token"
                    c:identifier="soup_char_is_token"
                    introspectable="0">
      <source-position filename="../libsoup/soup-misc.h" line="58"/>
      <parameters>
        <parameter name="ch">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="char_is_uri_gen_delims"
                    c:identifier="soup_char_is_uri_gen_delims"
                    introspectable="0">
      <source-position filename="../libsoup/soup-misc.h" line="55"/>
      <parameters>
        <parameter name="ch">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="char_is_uri_percent_encoded"
                    c:identifier="soup_char_is_uri_percent_encoded"
                    introspectable="0">
      <source-position filename="../libsoup/soup-misc.h" line="54"/>
      <parameters>
        <parameter name="ch">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="char_is_uri_sub_delims"
                    c:identifier="soup_char_is_uri_sub_delims"
                    introspectable="0">
      <source-position filename="../libsoup/soup-misc.h" line="56"/>
      <parameters>
        <parameter name="ch">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="char_is_uri_unreserved"
                    c:identifier="soup_char_is_uri_unreserved"
                    introspectable="0">
      <source-position filename="../libsoup/soup-misc.h" line="57"/>
      <parameters>
        <parameter name="ch">
        </parameter>
      </parameters>
    </function-macro>
    <function name="check_version"
              c:identifier="soup_check_version"
              version="2.42">
      <doc xml:space="preserve"
           filename="../libsoup/soup-version.c"
           line="126">Like SOUP_CHECK_VERSION, but the check for soup_check_version is
at runtime instead of compile time. This is useful for compiling
against older versions of libsoup, but using features from newer
versions.</doc>
      <source-position filename="../libsoup/soup-version.h" line="423"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-version.c"
             line="137">%TRUE if the version of the libsoup currently loaded
is the same as or newer than the passed-in version.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="major" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-version.c"
               line="128">the major version to check</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="minor" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-version.c"
               line="129">the minor version to check</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="micro" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-version.c"
               line="130">the micro version to check</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="cookie_parse"
              c:identifier="soup_cookie_parse"
              moved-to="Cookie.parse"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="389">Parses @header and returns a #SoupCookie. (If @header contains
multiple cookies, only the first one will be parsed.)

If @header does not have "path" or "domain" attributes, they will
be defaulted from @origin. If @origin is %NULL, path will default
to "/", but domain will be left as %NULL. Note that this is not a
valid state for a #SoupCookie, and you will need to fill in some
appropriate string for the domain if you want to actually make use
of the cookie.</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="53"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="404">a new #SoupCookie, or %NULL if it could
not be parsed, or contained an illegal "domain" attribute for a
cookie originating from @origin.</doc>
        <type name="Cookie" c:type="SoupCookie*"/>
      </return-value>
      <parameters>
        <parameter name="header" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="391">a cookie string (eg, the value of a Set-Cookie header)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="origin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="392">origin of the cookie, or %NULL</doc>
          <type name="URI" c:type="SoupURI*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cookies_free"
              c:identifier="soup_cookies_free"
              version="2.24"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="1023">Frees @cookies.</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="131"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cookies" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="1025">a #GSList of #SoupCookie</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Cookie"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="cookies_from_request"
              c:identifier="soup_cookies_from_request"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="922">Parses @msg's Cookie request header and returns a #GSList of
#SoupCookie&lt;!-- --&gt;s. As the "Cookie" header, unlike "Set-Cookie",
only contains cookie names and values, none of the other
#SoupCookie fields will be filled in. (Thus, you can't generally
pass a cookie returned from this method directly to
soup_cookies_to_response().)</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="121"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="933">a #GSList
of #SoupCookie&lt;!-- --&gt;s, which can be freed with
soup_cookies_free().</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="Cookie"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="924">a #SoupMessage containing a "Cookie" request header</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cookies_from_response"
              c:identifier="soup_cookies_from_response"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="881">Parses @msg's Set-Cookie response headers and returns a #GSList of
#SoupCookie&lt;!-- --&gt;s. Cookies that do not specify "path" or
"domain" attributes will have their values defaulted from @msg.</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="119"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="889">a #GSList
of #SoupCookie&lt;!-- --&gt;s, which can be freed with
soup_cookies_free().</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="Cookie"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="883">a #SoupMessage containing a "Set-Cookie" response header</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cookies_to_cookie_header"
              c:identifier="soup_cookies_to_cookie_header"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="1037">Serializes a #GSList of #SoupCookie into a string suitable for
setting as the value of the "Cookie" header.</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="134"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-cookie.c"
             line="1044">the serialization of @cookies</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="cookies" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="1039">a #GSList of #SoupCookie</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Cookie"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="cookies_to_request"
              c:identifier="soup_cookies_to_request"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="994">Adds the name and value of each cookie in @cookies to @msg's
"Cookie" request. (If @msg already has a "Cookie" request header,
these cookies will be appended to the cookies already present. Be
careful that you do not append the same cookies twice, eg, when
requeuing a message.)</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="127"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cookies" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="996">a #GSList of #SoupCookie</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Cookie"/>
          </type>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="997">a #SoupMessage</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cookies_to_response"
              c:identifier="soup_cookies_to_response"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-cookie.c"
           line="967">Appends a "Set-Cookie" response header to @msg for each cookie in
@cookies. (This is in addition to any other "Set-Cookie" headers
@msg may already have.)</doc>
      <source-position filename="../libsoup/soup-cookie.h" line="124"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cookies" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="969">a #GSList of #SoupCookie</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Cookie"/>
          </type>
        </parameter>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-cookie.c"
               line="970">a #SoupMessage</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="form_decode" c:identifier="soup_form_decode">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="73">Decodes @form, which is an urlencoded dataset as defined in the
HTML 4.01 spec.</doc>
      <source-position filename="../libsoup/soup-form.h" line="18"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="../libsoup/soup-form.c"
             line="80">a hash
table containing the name/value pairs from @encoded_form, which you
can free with g_hash_table_destroy().</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="encoded_form" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="75">data of type "application/x-www-form-urlencoded"</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="form_decode_multipart"
              c:identifier="soup_form_decode_multipart"
              version="2.26">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="114">Decodes the "multipart/form-data" request in @msg; this is a
convenience method for the case when you have a single file upload
control in a form. (Or when you don't have any file upload
controls, but are still using "multipart/form-data" anyway.) Pass
the name of the file upload control in @file_control_name, and
soup_form_decode_multipart() will extract the uploaded file data
into @filename, @content_type, and @file. All of the other form
control data will be returned (as strings, as with
soup_form_decode()) in the returned #GHashTable.

You may pass %NULL for @filename, @content_type and/or @file if you do not
care about those fields. soup_form_decode_multipart() may also
return %NULL in those fields if the client did not provide that
information. You must free the returned filename and content-type
with g_free(), and the returned file data with soup_buffer_free().

If you have a form with more than one file upload control, you will
need to decode it manually, using soup_multipart_new_from_message()
and soup_multipart_get_part().</doc>
      <source-position filename="../libsoup/soup-form.h" line="20"/>
      <return-value transfer-ownership="container" nullable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-form.c"
             line="142">
a hash table containing the name/value pairs (other than
@file_control_name) from @msg, which you can free with
g_hash_table_destroy(). On error, it will return %NULL.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="116">a #SoupMessage containing a "multipart/form-data" request body</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="file_control_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="117">the name of the HTML file upload control, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="filename"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="118">return location for the name of the uploaded file, or %NULL</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="content_type"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="119">return location for the MIME type of the uploaded file, or %NULL</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="file"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="120">return location for the uploaded file data, or %NULL</doc>
          <type name="Buffer" c:type="SoupBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="form_encode"
              c:identifier="soup_form_encode"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="242">Encodes the given field names and values into a value of type
"application/x-www-form-urlencoded", as defined in the HTML 4.01
spec.

This method requires you to know the names of the form fields (or
at the very least, the total number of fields) at compile time; for
working with dynamic forms, use soup_form_encode_hash() or
soup_form_encode_datalist().</doc>
      <source-position filename="../libsoup/soup-form.h" line="27"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-form.c"
             line="257">the encoded form</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="first_field" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="244">name of the first form field</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="245">value of @first_field, followed by additional field names
and values, terminated by %NULL.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="form_encode_datalist"
              c:identifier="soup_form_encode_datalist">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="307">Encodes @form_data_set into a value of type
"application/x-www-form-urlencoded", as defined in the HTML 4.01
spec. Unlike soup_form_encode_hash(), this preserves the ordering
of the form elements, which may be required in some situations.</doc>
      <source-position filename="../libsoup/soup-form.h" line="32"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-form.c"
             line="316">the encoded form</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="form_data_set" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="309">a datalist containing name/value pairs</doc>
          <type name="GLib.Data" c:type="GData**"/>
        </parameter>
      </parameters>
    </function>
    <function name="form_encode_hash" c:identifier="soup_form_encode_hash">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="272">Encodes @form_data_set into a value of type
"application/x-www-form-urlencoded", as defined in the HTML 4.01
spec.

Note that the HTML spec states that "The control names/values are
listed in the order they appear in the document." Since this method
takes a hash table, it cannot enforce that; if you care about the
ordering of the form fields, use soup_form_encode_datalist().</doc>
      <source-position filename="../libsoup/soup-form.h" line="30"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-form.c"
             line="286">the encoded form</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="form_data_set" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="274">a hash table containing
name/value pairs (as strings)</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="form_encode_valist"
              c:identifier="soup_form_encode_valist"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="327">See soup_form_encode(). This is mostly an internal method, used by
various other methods such as soup_uri_set_query_from_fields() and
soup_form_request_new().</doc>
      <source-position filename="../libsoup/soup-form.h" line="34"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-form.c"
             line="336">the encoded form</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="first_field" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="329">name of the first form field</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="args" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="330">pointer to additional values, as in soup_form_encode()</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="form_request_new"
              c:identifier="soup_form_request_new"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="392">Creates a new %SoupMessage and sets it up to send the given data
to @uri via @method. (That is, if @method is "GET", it will encode
the form data into @uri's query field, and if @method is "POST", it
will encode it into the %SoupMessage's request_body.)</doc>
      <source-position filename="../libsoup/soup-form.h" line="45"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-form.c"
             line="405">the new %SoupMessage</doc>
        <type name="Message" c:type="SoupMessage*"/>
      </return-value>
      <parameters>
        <parameter name="method" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="394">the HTTP method, either "GET" or "POST"</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="395">the URI to send the form data to</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="first_field" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="396">name of the first form field</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="397">value of @first_field, followed by additional field names
and values, terminated by %NULL.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="form_request_new_from_datalist"
              c:identifier="soup_form_request_new_from_datalist">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="440">Creates a new %SoupMessage and sets it up to send @form_data_set to
@uri via @method, as with soup_form_request_new().</doc>
      <source-position filename="../libsoup/soup-form.h" line="54"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-form.c"
             line="449">the new %SoupMessage</doc>
        <type name="Message" c:type="SoupMessage*"/>
      </return-value>
      <parameters>
        <parameter name="method" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="442">the HTTP method, either "GET" or "POST"</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="443">the URI to send the form data to</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="form_data_set" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="444">the data to send to @uri</doc>
          <type name="GLib.Data" c:type="GData**"/>
        </parameter>
      </parameters>
    </function>
    <function name="form_request_new_from_hash"
              c:identifier="soup_form_request_new_from_hash">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="421">Creates a new %SoupMessage and sets it up to send @form_data_set to
@uri via @method, as with soup_form_request_new().</doc>
      <source-position filename="../libsoup/soup-form.h" line="50"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-form.c"
             line="430">the new %SoupMessage</doc>
        <type name="Message" c:type="SoupMessage*"/>
      </return-value>
      <parameters>
        <parameter name="method" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="423">the HTTP method, either "GET" or "POST"</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="424">the URI to send the form data to</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="form_data_set" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="425">the data to send to @uri</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="form_request_new_from_multipart"
              c:identifier="soup_form_request_new_from_multipart"
              version="2.26">
      <doc xml:space="preserve"
           filename="../libsoup/soup-form.c"
           line="459">Creates a new %SoupMessage and sets it up to send @multipart to
@uri via POST.

To send a &lt;literal&gt;"multipart/form-data"&lt;/literal&gt; POST, first
create a #SoupMultipart, using %SOUP_FORM_MIME_TYPE_MULTIPART as
the MIME type. Then use soup_multipart_append_form_string() and
soup_multipart_append_form_file() to add the value of each form
control to the multipart. (These are just convenience methods, and
you can use soup_multipart_append_part() if you need greater
control over the part headers.) Finally, call
soup_form_request_new_from_multipart() to serialize the multipart
structure and create a #SoupMessage.</doc>
      <source-position filename="../libsoup/soup-form.h" line="58"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-form.c"
             line="477">the new %SoupMessage</doc>
        <type name="Message" c:type="SoupMessage*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="461">the URI to send the form data to</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="multipart" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-form.c"
               line="462">a "multipart/form-data" #SoupMultipart</doc>
          <type name="Multipart" c:type="SoupMultipart*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_major_version"
              c:identifier="soup_get_major_version"
              version="2.42">
      <doc xml:space="preserve"
           filename="../libsoup/soup-version.c"
           line="63">Returns the major version number of the libsoup library.
(e.g. in libsoup version 2.42.0 this is 2.)

This function is in the library, so it represents the libsoup library
your code is running against. Contrast with the #SOUP_MAJOR_VERSION
macro, which represents the major version of the libsoup headers you
have included when compiling your code.</doc>
      <source-position filename="../libsoup/soup-version.h" line="414"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-version.c"
             line="74">the major version number of the libsoup library</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_micro_version"
              c:identifier="soup_get_micro_version"
              version="2.42">
      <doc xml:space="preserve"
           filename="../libsoup/soup-version.c"
           line="105">Returns the micro version number of the libsoup library.
(e.g. in libsoup version 2.42.0 this is 0.)

This function is in the library, so it represents the libsoup library
your code is running against. Contrast with the #SOUP_MICRO_VERSION
macro, which represents the micro version of the libsoup headers you
have included when compiling your code.</doc>
      <source-position filename="../libsoup/soup-version.h" line="420"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-version.c"
             line="116">the micro version number of the libsoup library</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_minor_version"
              c:identifier="soup_get_minor_version"
              version="2.42">
      <doc xml:space="preserve"
           filename="../libsoup/soup-version.c"
           line="84">Returns the minor version number of the libsoup library.
(e.g. in libsoup version 2.42.0 this is 42.)

This function is in the library, so it represents the libsoup library
your code is running against. Contrast with the #SOUP_MINOR_VERSION
macro, which represents the minor version of the libsoup headers you
have included when compiling your code.</doc>
      <source-position filename="../libsoup/soup-version.h" line="417"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-version.c"
             line="95">the minor version number of the libsoup library</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="header_contains" c:identifier="soup_header_contains">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="617">Parses @header to see if it contains the token @token (matched
case-insensitively). Note that this can't be used with lists
that have qvalues.</doc>
      <source-position filename="../libsoup/soup-headers.h" line="53"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-headers.c"
             line="627">whether or not @header contains @token</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="header" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="619">An HTTP header suitable for parsing with
soup_header_parse_list()</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="token" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="621">a token</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_free_list"
              c:identifier="soup_header_free_list"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="604">Frees @list.</doc>
      <source-position filename="../libsoup/soup-headers.h" line="50"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="606">a #GSList returned from soup_header_parse_list() or
soup_header_parse_quality_list()</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="header_free_param_list"
              c:identifier="soup_header_free_param_list">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="879">Frees @param_list.</doc>
      <source-position filename="../libsoup/soup-headers.h" line="65"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="param_list" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="881">a #GHashTable returned from soup_header_parse_param_list()
or soup_header_parse_semi_param_list()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="header_g_string_append_param"
              c:identifier="soup_header_g_string_append_param"
              version="2.26">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="985">Appends something like &lt;literal&gt;@name=@value&lt;/literal&gt; to @string,
taking care to quote @value if needed, and if so, to escape any
quotes or backslashes in @value.

Alternatively, if @value is a non-ASCII UTF-8 string, it will be
appended using RFC5987 syntax. Although in theory this is supposed
to work anywhere in HTTP that uses this style of parameter, in
reality, it can only be used portably with the Content-Disposition
"filename" parameter.

If @value is %NULL, this will just append @name to @string.</doc>
      <source-position filename="../libsoup/soup-headers.h" line="68"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="987">a #GString being used to construct an HTTP header value</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="988">a parameter name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="989">a parameter value, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_g_string_append_param_quoted"
              c:identifier="soup_header_g_string_append_param_quoted"
              version="2.30">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="959">Appends something like &lt;literal&gt;@name="@value"&lt;/literal&gt; to
@string, taking care to escape any quotes or backslashes in @value.

If @value is (non-ASCII) UTF-8, this will instead use RFC 5987
encoding, just like soup_header_g_string_append_param().</doc>
      <source-position filename="../libsoup/soup-headers.h" line="72"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="961">a #GString being used to construct an HTTP header value</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="962">a parameter name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="963">a parameter value</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_parse_list" c:identifier="soup_header_parse_list">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="477">Parses a header whose content is described by RFC2616 as
"#something", where "something" does not itself contain commas,
except as part of quoted-strings.</doc>
      <source-position filename="../libsoup/soup-headers.h" line="45"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-headers.c"
             line="485">a #GSList of
list elements, as allocated strings</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="header" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="479">a header value</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_parse_param_list"
              c:identifier="soup_header_parse_param_list">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="771">Parses a header which is a comma-delimited list of something like:
&lt;literal&gt;token [ "=" ( token | quoted-string ) ]&lt;/literal&gt;.

Tokens that don't have an associated value will still be added to
the resulting hash table, but with a %NULL value.

This also handles RFC5987 encoding (which in HTTP is mostly used
for giving UTF8-encoded filenames in the Content-Disposition
header).</doc>
      <source-position filename="../libsoup/soup-headers.h" line="57"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-headers.c"
             line="785">a
#GHashTable of list elements, which can be freed with
soup_header_free_param_list().</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="header" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="773">a header value</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_parse_param_list_strict"
              c:identifier="soup_header_parse_param_list_strict"
              version="2.66">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="825">A strict version of soup_header_parse_param_list()
that bails out if there are duplicate parameters.
Note that this function will treat RFC5987-encoded
parameters as duplicated if an ASCII version is also
present. For header fields that might contain
RFC5987-encoded parameters, use
soup_header_parse_param_list() instead.</doc>
      <source-position filename="../libsoup/soup-headers.h" line="61"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-headers.c"
             line="837">
a #GHashTable of list elements, which can be freed with
soup_header_free_param_list() or %NULL if there are duplicate
elements.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="header" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="827">a header value</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_parse_quality_list"
              c:identifier="soup_header_parse_quality_list">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="515">Parses a header whose content is a list of items with optional
"qvalue"s (eg, Accept, Accept-Charset, Accept-Encoding,
Accept-Language, TE).

If @unacceptable is not %NULL, then on return, it will contain the
items with qvalue 0. Either way, those items will be removed from
the main list.</doc>
      <source-position filename="../libsoup/soup-headers.h" line="47"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-headers.c"
             line="529">a #GSList of
acceptable values (as allocated strings), highest-qvalue first.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="header" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="517">a header value</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="unacceptable"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="518">on
return, will contain a list of unacceptable values</doc>
          <type name="GLib.SList" c:type="GSList**">
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="header_parse_semi_param_list"
              c:identifier="soup_header_parse_semi_param_list"
              version="2.24">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="797">Parses a header which is a semicolon-delimited list of something
like: &lt;literal&gt;token [ "=" ( token | quoted-string ) ]&lt;/literal&gt;.

Tokens that don't have an associated value will still be added to
the resulting hash table, but with a %NULL value.

This also handles RFC5987 encoding (which in HTTP is mostly used
for giving UTF8-encoded filenames in the Content-Disposition
header).</doc>
      <source-position filename="../libsoup/soup-headers.h" line="59"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-headers.c"
             line="811">a
#GHashTable of list elements, which can be freed with
soup_header_free_param_list().</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="header" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="799">a header value</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="header_parse_semi_param_list_strict"
              c:identifier="soup_header_parse_semi_param_list_strict"
              version="2.66">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="852">A strict version of soup_header_parse_semi_param_list()
that bails out if there are duplicate parameters.
Note that this function will treat RFC5987-encoded
parameters as duplicated if an ASCII version is also
present. For header fields that might contain
RFC5987-encoded parameters, use
soup_header_parse_semi_param_list() instead.</doc>
      <source-position filename="../libsoup/soup-headers.h" line="63"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-headers.c"
             line="864">
a #GHashTable of list elements, which can be freed with
soup_header_free_param_list() or %NULL if there are duplicate
elements.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="header" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="854">a header value</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="headers_parse"
              c:identifier="soup_headers_parse"
              version="2.26">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="18">Parses the headers of an HTTP request or response in @str and
stores the results in @dest. Beware that @dest may be modified even
on failure.

This is a low-level method; normally you would use
soup_headers_parse_request() or soup_headers_parse_response().</doc>
      <source-position filename="../libsoup/soup-headers.h" line="17"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-headers.c"
             line="32">success or failure</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="20">the header string (including the Request-Line or Status-Line,
  but not the trailing blank line)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="22">length of @str</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="23">#SoupMessageHeaders to store the header values in</doc>
          <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
        </parameter>
      </parameters>
    </function>
    <function name="headers_parse_request"
              c:identifier="soup_headers_parse_request">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="157">Parses the headers of an HTTP request in @str and stores the
results in @req_method, @req_path, @ver, and @req_headers.

Beware that @req_headers may be modified even on failure.</doc>
      <source-position filename="../libsoup/soup-headers.h" line="22"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-headers.c"
             line="174">%SOUP_STATUS_OK if the headers could be parsed, or an
HTTP error to be returned to the client if they could not be.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="159">the headers (up to, but not including, the trailing blank line)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="160">length of @str</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="req_headers" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="161">#SoupMessageHeaders to store the header values in</doc>
          <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
        </parameter>
        <parameter name="req_method"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="162">if non-%NULL, will be filled in with the
request method</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="req_path"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="164">if non-%NULL, will be filled in with the
request path</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="ver"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="166">if non-%NULL, will be filled in with the HTTP
version</doc>
          <type name="HTTPVersion" c:type="SoupHTTPVersion*"/>
        </parameter>
      </parameters>
    </function>
    <function name="headers_parse_response"
              c:identifier="soup_headers_parse_response">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="344">Parses the headers of an HTTP response in @str and stores the
results in @ver, @status_code, @reason_phrase, and @headers.

Beware that @headers may be modified even on failure.</doc>
      <source-position filename="../libsoup/soup-headers.h" line="36"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-headers.c"
             line="361">success or failure.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="346">the headers (up to, but not including, the trailing blank line)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="347">length of @str</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="headers" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="348">#SoupMessageHeaders to store the header values in</doc>
          <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
        </parameter>
        <parameter name="ver"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="349">if non-%NULL, will be filled in with the HTTP
version</doc>
          <type name="HTTPVersion" c:type="SoupHTTPVersion*"/>
        </parameter>
        <parameter name="status_code"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="351">if non-%NULL, will be filled in with
the status code</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="reason_phrase"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="353">if non-%NULL, will be filled in with
the reason phrase</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="headers_parse_status_line"
              c:identifier="soup_headers_parse_status_line">
      <doc xml:space="preserve"
           filename="../libsoup/soup-headers.c"
           line="269">Parses the HTTP Status-Line string in @status_line into @ver,
@status_code, and @reason_phrase. @status_line must be terminated by
either "\0" or "\r\n".</doc>
      <source-position filename="../libsoup/soup-headers.h" line="30"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-headers.c"
             line="283">%TRUE if @status_line was parsed successfully.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="status_line" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="271">an HTTP Status-Line</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="ver"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="272">if non-%NULL, will be filled in with the HTTP
version</doc>
          <type name="HTTPVersion" c:type="SoupHTTPVersion*"/>
        </parameter>
        <parameter name="status_code"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="274">if non-%NULL, will be filled in with
the status code</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="reason_phrase"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-headers.c"
               line="276">if non-%NULL, will be filled in with
the reason phrase</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="http_error_quark" c:identifier="soup_http_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="message_headers_iter_init"
              c:identifier="soup_message_headers_iter_init"
              moved-to="MessageHeadersIter.init">
      <doc xml:space="preserve"
           filename="../libsoup/soup-message-headers.c"
           line="499">Initializes @iter for iterating @hdrs.</doc>
      <source-position filename="../libsoup/soup-message-headers.h" line="87"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="iter"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="501">a pointer to a %SoupMessageHeadersIter
structure</doc>
          <type name="MessageHeadersIter" c:type="SoupMessageHeadersIter*"/>
        </parameter>
        <parameter name="hdrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-message-headers.c"
               line="503">a %SoupMessageHeaders</doc>
          <type name="MessageHeaders" c:type="SoupMessageHeaders*"/>
        </parameter>
      </parameters>
    </function>
    <function name="request_error_quark"
              c:identifier="soup_request_error_quark"
              moved-to="RequestError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="requester_error_quark"
              c:identifier="soup_requester_error_quark"
              moved-to="RequesterError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="status_get_phrase"
              c:identifier="soup_status_get_phrase"
              moved-to="Status.get_phrase">
      <doc xml:space="preserve"
           filename="../libsoup/soup-status.c"
           line="250">Looks up the stock HTTP description of @status_code. This is used
by soup_message_set_status() to get the correct text to go with a
given status code.

&lt;emphasis&gt;There is no reason for you to ever use this
function.&lt;/emphasis&gt; If you wanted the textual description for the
#SoupMessage:status_code of a given #SoupMessage, you should just
look at the message's #SoupMessage:reason_phrase. However, you
should only do that for use in debugging messages; HTTP reason
phrases are not localized, and are not generally very descriptive
anyway, and so they should never be presented to the user directly.
Instead, you should create you own error messages based on the
status code, and on what you were trying to do.</doc>
      <source-position filename="../libsoup/soup-status.h" line="97"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="268">the (terse, English) description of @status_code</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="status_code" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-status.c"
               line="252">an HTTP status code</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="status_proxify"
              c:identifier="soup_status_proxify"
              moved-to="Status.proxify"
              version="2.26">
      <doc xml:space="preserve"
           filename="../libsoup/soup-status.c"
           line="283">Turns %SOUP_STATUS_CANT_RESOLVE into
%SOUP_STATUS_CANT_RESOLVE_PROXY and %SOUP_STATUS_CANT_CONNECT into
%SOUP_STATUS_CANT_CONNECT_PROXY. Other status codes are passed
through unchanged.</doc>
      <source-position filename="../libsoup/soup-status.h" line="99"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-status.c"
             line="292">the "proxified" equivalent of @status_code.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="status_code" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-status.c"
               line="285">a status code</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="str_case_equal" c:identifier="soup_str_case_equal">
      <doc xml:space="preserve"
           filename="../libsoup/soup-misc.c"
           line="46">Compares @v1 and @v2 in a case-insensitive manner</doc>
      <source-position filename="../libsoup/soup-misc.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-misc.c"
             line="53">%TRUE if they are equal (modulo case)</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="v1"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="48">an ASCII string</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="v2"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="49">another ASCII string</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="str_case_hash" c:identifier="soup_str_case_hash">
      <doc xml:space="preserve"
           filename="../libsoup/soup-misc.c"
           line="25">Hashes @key in a case-insensitive manner.</doc>
      <source-position filename="../libsoup/soup-misc.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-misc.c"
             line="31">the hash code.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="key"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-misc.c"
               line="27">ASCII string to hash</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="tld_domain_is_public_suffix"
              c:identifier="soup_tld_domain_is_public_suffix"
              version="2.40">
      <doc xml:space="preserve"
           filename="../libsoup/soup-tld.c"
           line="76">Looks whether the @domain passed as argument is a public domain
suffix (.org, .com, .co.uk, etc) or not.

Prior to libsoup 2.46, this function required that @domain be in
UTF-8 if it was an IDN. From 2.46 on, the name can be in either
UTF-8 or ASCII format.</doc>
      <source-position filename="../libsoup/soup-tld.h" line="18"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-tld.c"
             line="87">%TRUE if it is a public domain, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-tld.c"
               line="78">a domain name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="tld_error_quark"
              c:identifier="soup_tld_error_quark"
              moved-to="TLDError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="tld_get_base_domain"
              c:identifier="soup_tld_get_base_domain"
              version="2.40"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-tld.c"
           line="32">Finds the base domain for a given @hostname. The base domain is
composed by the top level domain (such as .org, .com, .co.uk, etc)
plus the second level domain, for example for myhost.mydomain.com
it will return mydomain.com.

Note that %NULL will be returned for private URLs (those not ending
with any well known TLD) because choosing a base domain for them
would be totally arbitrary.

Prior to libsoup 2.46, this function required that @hostname be in
UTF-8 if it was an IDN. From 2.46 on, the name can be in either
UTF-8 or ASCII format (and the return value will be in the same
format).</doc>
      <source-position filename="../libsoup/soup-tld.h" line="14"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-tld.c"
             line="52">a pointer to the start of the base domain in @hostname. If
an error occurs, %NULL will be returned and @error set.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="hostname" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-tld.c"
               line="34">a hostname</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="uri_decode"
              c:identifier="soup_uri_decode"
              moved-to="URI.decode">
      <doc xml:space="preserve"
           filename="../libsoup/soup-uri.c"
           line="786">Fully %&lt;!-- --&gt;-decodes @part.

In the past, this would return %NULL if @part contained invalid
percent-encoding, but now it just ignores the problem (as
soup_uri_new() already did).</doc>
      <source-position filename="../libsoup/soup-uri.h" line="73"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="796">the decoded URI part.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="part" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="788">a URI part</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="uri_encode"
              c:identifier="soup_uri_encode"
              moved-to="URI.encode">
      <doc xml:space="preserve"
           filename="../libsoup/soup-uri.c"
           line="726">This %&lt;!-- --&gt;-encodes the given URI part and returns the escaped
version in allocated memory, which the caller must free when it is
done.</doc>
      <source-position filename="../libsoup/soup-uri.h" line="70"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="736">the encoded URI part</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="part" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="728">a URI part</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="escape_extra"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="729">additional reserved characters to
escape (or %NULL)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="uri_normalize"
              c:identifier="soup_uri_normalize"
              moved-to="URI.normalize">
      <doc xml:space="preserve"
           filename="../libsoup/soup-uri.c"
           line="869">%&lt;!-- --&gt;-decodes any "unreserved" characters (or characters in
@unescape_extra) in @part, and %&lt;!-- --&gt;-encodes any non-ASCII
characters, spaces, and non-printing characters in @part.

"Unreserved" characters are those that are not allowed to be used
for punctuation according to the URI spec. For example, letters are
unreserved, so soup_uri_normalize() will turn
&lt;literal&gt;http://example.com/foo/b%&lt;!-- --&gt;61r&lt;/literal&gt; into
&lt;literal&gt;http://example.com/foo/bar&lt;/literal&gt;, which is guaranteed
to mean the same thing. However, "/" is "reserved", so
&lt;literal&gt;http://example.com/foo%&lt;!-- --&gt;2Fbar&lt;/literal&gt; would not
be changed, because it might mean something different to the
server.

In the past, this would return %NULL if @part contained invalid
percent-encoding, but now it just ignores the problem (as
soup_uri_new() already did).</doc>
      <source-position filename="../libsoup/soup-uri.h" line="75"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-uri.c"
             line="892">the normalized URI part</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="part" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="871">a URI part</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="unescape_extra"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-uri.c"
               line="872">reserved characters to unescape (or %NULL)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_array_append"
              c:identifier="soup_value_array_append"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="424">Appends the provided value of type @type to @array as with
g_value_array_append(). (The provided data is copied rather than
being inserted directly.)</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="91"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="426">a #GValueArray</doc>
          <type name="GObject.ValueArray" c:type="GValueArray*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="427">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="428">a value of type @type</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="value_array_append_vals"
              c:identifier="soup_value_array_append_vals"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="448">Appends the provided values into @array as with
g_value_array_append(). (The provided data is copied rather than
being inserted directly.)</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="96"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="450">a #GValueArray</doc>
          <type name="GObject.ValueArray" c:type="GValueArray*"/>
        </parameter>
        <parameter name="first_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="451">the type of the first value to add</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="452">the first value to add, followed by other type/value
pairs, terminated by %G_TYPE_INVALID</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="value_array_from_args"
              c:identifier="soup_value_array_from_args"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="279">Creates a #GValueArray from the provided arguments, which must
consist of pairs of a #GType and a value of that type, terminated
by %G_TYPE_INVALID. (The array will contain copies of the provided
data rather than pointing to the passed-in data directly.)</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="69"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-value-utils.c"
             line="288">a new #GValueArray, or %NULL if an error
occurred.</doc>
        <type name="GObject.ValueArray" c:type="GValueArray*"/>
      </return-value>
      <parameters>
        <parameter name="args" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="281">arguments to create a #GValueArray from</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_array_get_nth"
              c:identifier="soup_value_array_get_nth"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="471">Gets the @index_ element of @array and stores its value into the
provided location.</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="101"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-value-utils.c"
             line="481">%TRUE if @array contained a value with index @index_
and type @type, %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="473">a #GValueArray</doc>
          <type name="GObject.ValueArray" c:type="GValueArray*"/>
        </parameter>
        <parameter name="index_" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="474">the index to look up</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="475">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="476">a value of type pointer-to-@type</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="value_array_insert"
              c:identifier="soup_value_array_insert"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="399">Inserts the provided value of type @type into @array as with
g_value_array_insert(). (The provided data is copied rather than
being inserted directly.)</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="85"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="401">a #GValueArray</doc>
          <type name="GObject.ValueArray" c:type="GValueArray*"/>
        </parameter>
        <parameter name="index_" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="402">the index to insert at</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="403">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="404">a value of type @type</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="value_array_new"
              c:identifier="soup_value_array_new"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="341">Creates a new %GValueArray. (This is just a wrapper around
g_value_array_new(), for naming consistency purposes.)</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="77"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-value-utils.c"
             line="347">a new %GValueArray</doc>
        <type name="GObject.ValueArray" c:type="GValueArray*"/>
      </return-value>
    </function>
    <function name="value_array_new_with_vals"
              c:identifier="soup_value_array_new_with_vals"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="373">Creates a new %GValueArray and copies the provided values
into it.</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="80"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-value-utils.c"
             line="382">a new %GValueArray</doc>
        <type name="GObject.ValueArray" c:type="GValueArray*"/>
      </return-value>
      <parameters>
        <parameter name="first_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="375">the type of the first value to add</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="376">the first value to add, followed by other type/value
pairs, terminated by %G_TYPE_INVALID</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="value_array_to_args"
              c:identifier="soup_value_array_to_args"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="308">Extracts a #GValueArray into the provided arguments, which must
consist of pairs of a #GType and a value of pointer-to-that-type,
terminated by %G_TYPE_INVALID. The returned values will point to the
same memory as the values in the array.</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="72"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-value-utils.c"
             line="318">success or failure</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="310">a #GValueArray</doc>
          <type name="GObject.ValueArray" c:type="GValueArray*"/>
        </parameter>
        <parameter name="args" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="311">arguments to extract @array into</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_hash_insert"
              c:identifier="soup_value_hash_insert"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="152">Inserts the provided value of type @type into @hash. (Unlike with
g_hash_table_insert(), both the key and the value are copied).</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="46"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="154">a value hash</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="155">the key</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="156">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="157">a value of type @type</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="value_hash_insert_vals"
              c:identifier="soup_value_hash_insert_vals"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="176">Inserts the given data into @hash. As with
soup_value_hash_insert(), the keys and values are copied rather
than being inserted directly.</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="52"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="178">a value hash</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="first_key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="179">the key for the first value</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="180">the type of @first_key, followed by the value, followed
by additional key/type/value triplets, terminated by %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="value_hash_insert_value"
              c:identifier="soup_value_hash_insert_value"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="131">Inserts @value into @hash. (Unlike with g_hash_table_insert(), both
the key and the value are copied).</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="41"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="133">a value hash</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="134">the key</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="135">a value</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_hash_lookup"
              c:identifier="soup_value_hash_lookup"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="199">Looks up @key in @hash and stores its value into the provided
location.</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-value-utils.c"
             line="209">%TRUE if @hash contained a value with key @key and
type @type, %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="201">a value hash</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="202">the key to look up</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="203">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="204">a value of type pointer-to-@type</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="value_hash_lookup_vals"
              c:identifier="soup_value_hash_lookup_vals"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="231">Looks up a number of keys in @hash and returns their values.</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="63"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-value-utils.c"
             line="241">%TRUE if all of the keys were found, %FALSE
if any were missing; note that you will generally need to
initialize each destination variable to a reasonable default
value, since there is no way to tell which keys were found
and which were not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="233">a value hash</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="first_key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="234">the first key to look up</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="235">the type of @first_key, a pointer to that type, and
then additional key/type/pointer triplets, terminated
by %NULL.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="value_hash_new"
              c:identifier="soup_value_hash_new"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="66">Creates a #GHashTable whose keys are strings and whose values
are #GValue.</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="34"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-value-utils.c"
             line="72">a new
empty #GHashTable</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="GObject.Value"/>
        </type>
      </return-value>
    </function>
    <function name="value_hash_new_with_vals"
              c:identifier="soup_value_hash_new_with_vals"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-value-utils.c"
           line="102">Creates a #GHashTable whose keys are strings and whose values
are #GValue, and initializes it with the provided data. As
with soup_value_hash_insert(), the keys and values are copied
rather than being inserted directly.</doc>
      <doc-deprecated xml:space="preserve">Use #GVariant API instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-value-utils.h" line="37"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-value-utils.c"
             line="113">a new
#GHashTable, initialized with the given values</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="GObject.Value"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="first_key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="104">the key for the first value</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-value-utils.c"
               line="105">the type of @first_key, followed by the value, followed
by additional key/type/value triplets, terminated by %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="websocket_client_prepare_handshake"
              c:identifier="soup_websocket_client_prepare_handshake"
              version="2.50">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="247">Adds the necessary headers to @msg to request a WebSocket
handshake. The message body and non-WebSocket-related headers are
not modified.

Use soup_websocket_client_prepare_handshake_with_extensions() if you
want to include "Sec-WebSocket-Extensions" header in the request.

This is a low-level function; if you use
soup_session_websocket_connect_async() to create a WebSocket
connection, it will call this for you.</doc>
      <source-position filename="../libsoup/soup-websocket.h" line="72"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="249">a #SoupMessage</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="origin"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="250">the "Origin" header to set</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="protocols"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="251">list of
  protocols to offer</doc>
          <array c:type="char**">
            <type name="utf8" c:type="char*"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="websocket_client_prepare_handshake_with_extensions"
              c:identifier="soup_websocket_client_prepare_handshake_with_extensions"
              version="2.68">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="275">Adds the necessary headers to @msg to request a WebSocket
handshake including supported WebSocket extensions.
The message body and non-WebSocket-related headers are
not modified.

This is a low-level function; if you use
soup_session_websocket_connect_async() to create a WebSocket
connection, it will call this for you.</doc>
      <source-position filename="../libsoup/soup-websocket.h" line="76"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="277">a #SoupMessage</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="origin"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="278">the "Origin" header to set</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="protocols"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="279">list of
  protocols to offer</doc>
          <array c:type="char**">
            <type name="utf8" c:type="char*"/>
          </array>
        </parameter>
        <parameter name="supported_extensions"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="281">list
  of supported extension types</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="GObject.TypeClass"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="websocket_client_verify_handshake"
              c:identifier="soup_websocket_client_verify_handshake"
              version="2.50"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="899">Looks at the response status code and headers in @msg and
determines if they contain a valid WebSocket handshake response
(given the handshake request in @msg's request headers).

If the response contains the "Sec-WebSocket-Extensions" header,
the handshake will be considered invalid. You need to use
soup_websocket_client_verify_handshake_with_extensions() to handle
responses with extensions.

This is a low-level function; if you use
soup_session_websocket_connect_async() to create a WebSocket
connection, it will call this for you.</doc>
      <source-position filename="../libsoup/soup-websocket.h" line="82"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="918">%TRUE if @msg contains a completed valid WebSocket
  handshake, %FALSE and an error if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="901">#SoupMessage containing both client and server sides of a
  WebSocket handshake</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="websocket_client_verify_handshake_with_extensions"
              c:identifier="soup_websocket_client_verify_handshake_with_extensions"
              version="2.68"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="930">Looks at the response status code and headers in @msg and
determines if they contain a valid WebSocket handshake response
(given the handshake request in @msg's request headers).

If @supported_extensions is non-%NULL, extensions included in the
response "Sec-WebSocket-Extensions" are verified too. Accepted
extensions are returned in @accepted_extensions parameter if non-%NULL.

This is a low-level function; if you use
soup_session_websocket_connect_async() to create a WebSocket
connection, it will call this for you.</doc>
      <source-position filename="../libsoup/soup-websocket.h" line="85"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="952">%TRUE if @msg contains a completed valid WebSocket
  handshake, %FALSE and an error if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="932">#SoupMessage containing both client and server sides of a
  WebSocket handshake</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="supported_extensions"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="934">list
  of supported extension types</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="GObject.TypeClass"/>
          </array>
        </parameter>
        <parameter name="accepted_extensions"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="936">a
  #GList of #SoupWebsocketExtension objects</doc>
          <type name="GLib.List" c:type="GList**">
            <type name="WebsocketExtension"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="websocket_error_get_quark"
              c:identifier="soup_websocket_error_get_quark"
              moved-to="WebsocketError.get_quark">
      <source-position filename="../libsoup/soup-websocket.h" line="30"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="websocket_server_check_handshake"
              c:identifier="soup_websocket_server_check_handshake"
              version="2.50"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="373">Examines the method and request headers in @msg and determines
whether @msg contains a valid handshake request.

If @origin is non-%NULL, then only requests containing a matching
"Origin" header will be accepted. If @protocols is non-%NULL, then
only requests containing a compatible "Sec-WebSocket-Protocols"
header will be accepted.

Requests containing "Sec-WebSocket-Extensions" header will be
accepted even if the header is not valid. To check a request
with extensions you need to use
soup_websocket_server_check_handshake_with_extensions() and provide
the list of supported extension types.

Normally soup_websocket_server_process_handshake() will take care
of this for you, and if you use soup_server_add_websocket_handler()
to handle accepting WebSocket connections, it will call that for
you. However, this function may be useful if you need to perform
more complicated validation; eg, accepting multiple different Origins,
or handling different protocols depending on the path.</doc>
      <source-position filename="../libsoup/soup-websocket.h" line="91"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="402">%TRUE if @msg contained a valid WebSocket handshake,
  %FALSE and an error if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="375">#SoupMessage containing the client side of a WebSocket handshake</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="origin"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="376">expected Origin header</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="protocols"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="377">allowed WebSocket
  protocols.</doc>
          <array c:type="char**">
            <type name="utf8" c:type="char*"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="websocket_server_check_handshake_with_extensions"
              c:identifier="soup_websocket_server_check_handshake_with_extensions"
              version="2.68"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="608">Examines the method and request headers in @msg and determines
whether @msg contains a valid handshake request.

If @origin is non-%NULL, then only requests containing a matching
"Origin" header will be accepted. If @protocols is non-%NULL, then
only requests containing a compatible "Sec-WebSocket-Protocols"
header will be accepted. If @supported_extensions is non-%NULL, then
only requests containing valid supported extensions in
"Sec-WebSocket-Extensions" header will be accepted.

Normally soup_websocket_server_process_handshake_with_extensioins()
will take care of this for you, and if you use
soup_server_add_websocket_handler() to handle accepting WebSocket
connections, it will call that for you. However, this function may
be useful if you need to perform more complicated validation; eg,
accepting multiple different Origins, or handling different protocols
depending on the path.</doc>
      <source-position filename="../libsoup/soup-websocket.h" line="97"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="636">%TRUE if @msg contained a valid WebSocket handshake,
  %FALSE and an error if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="610">#SoupMessage containing the client side of a WebSocket handshake</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="origin"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="611">expected Origin header</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="protocols"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="612">allowed WebSocket
  protocols.</doc>
          <array c:type="char**">
            <type name="utf8" c:type="char*"/>
          </array>
        </parameter>
        <parameter name="supported_extensions"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="614">list
  of supported extension types</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="GObject.TypeClass"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="websocket_server_process_handshake"
              c:identifier="soup_websocket_server_process_handshake"
              version="2.50">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="743">Examines the method and request headers in @msg and (assuming @msg
contains a valid handshake request), fills in the handshake
response.

If @expected_origin is non-%NULL, then only requests containing a matching
"Origin" header will be accepted. If @protocols is non-%NULL, then
only requests containing a compatible "Sec-WebSocket-Protocols"
header will be accepted.

Requests containing "Sec-WebSocket-Extensions" header will be
accepted even if the header is not valid. To process a request
with extensions you need to use
soup_websocket_server_process_handshake_with_extensions() and provide
the list of supported extension types.

This is a low-level function; if you use
soup_server_add_websocket_handler() to handle accepting WebSocket
connections, it will call this for you.</doc>
      <source-position filename="../libsoup/soup-websocket.h" line="104"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="769">%TRUE if @msg contained a valid WebSocket handshake
  request and was updated to contain a handshake response. %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="745">#SoupMessage containing the client side of a WebSocket handshake</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="expected_origin"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="746">expected Origin header</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="protocols"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="747">allowed WebSocket
  protocols.</doc>
          <array c:type="char**">
            <type name="utf8" c:type="char*"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="websocket_server_process_handshake_with_extensions"
              c:identifier="soup_websocket_server_process_handshake_with_extensions"
              version="2.68">
      <doc xml:space="preserve"
           filename="../libsoup/soup-websocket.c"
           line="782">Examines the method and request headers in @msg and (assuming @msg
contains a valid handshake request), fills in the handshake
response.

If @expected_origin is non-%NULL, then only requests containing a matching
"Origin" header will be accepted. If @protocols is non-%NULL, then
only requests containing a compatible "Sec-WebSocket-Protocols"
header will be accepted. If @supported_extensions is non-%NULL, then
only requests containing valid supported extensions in
"Sec-WebSocket-Extensions" header will be accepted. The accepted extensions
will be returned in @accepted_extensions parameter if non-%NULL.

This is a low-level function; if you use
soup_server_add_websocket_handler() to handle accepting WebSocket
connections, it will call this for you.</doc>
      <source-position filename="../libsoup/soup-websocket.h" line="109"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-websocket.c"
             line="809">%TRUE if @msg contained a valid WebSocket handshake
  request and was updated to contain a handshake response. %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="784">#SoupMessage containing the client side of a WebSocket handshake</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="expected_origin"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="785">expected Origin header</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="protocols"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="786">allowed WebSocket
  protocols.</doc>
          <array c:type="char**">
            <type name="utf8" c:type="char*"/>
          </array>
        </parameter>
        <parameter name="supported_extensions"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="788">list
  of supported extension types</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="GObject.TypeClass"/>
          </array>
        </parameter>
        <parameter name="accepted_extensions"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-websocket.c"
               line="790">a
  #GList of #SoupWebsocketExtension objects</doc>
          <type name="GLib.List" c:type="GList**">
            <type name="WebsocketExtension"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_build_fault"
              c:identifier="soup_xmlrpc_build_fault"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="466">This creates an XML-RPC fault response and returns it as a string.
(To create a successful response, use
soup_xmlrpc_build_method_response().)</doc>
      <source-position filename="../libsoup/soup-xmlrpc.h" line="47"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="476">the text of the fault</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="fault_code" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="468">the fault code</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="fault_format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="469">a printf()-style format string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="470">the parameters to @fault_format</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_build_method_call"
              c:identifier="soup_xmlrpc_build_method_call"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc-old.c"
           line="121">This creates an XML-RPC methodCall and returns it as a string.
This is the low-level method that soup_xmlrpc_request_new() is
built on.

@params is an array of #GValue representing the parameters to
@method. (It is *not* a #GValueArray, although if you have a
#GValueArray, you can just pass its &lt;literal&gt;values&lt;/literal&gt;f and
&lt;literal&gt;n_values&lt;/literal&gt; fields.)

The correspondence between glib types and XML-RPC types is:

  int: #int (%G_TYPE_INT)
  boolean: #gboolean (%G_TYPE_BOOLEAN)
  string: #char* (%G_TYPE_STRING)
  double: #double (%G_TYPE_DOUBLE)
  datetime.iso8601: #SoupDate (%SOUP_TYPE_DATE)
  base64: #GByteArray (%SOUP_TYPE_BYTE_ARRAY)
  struct: #GHashTable (%G_TYPE_HASH_TABLE)
  array: #GValueArray (%G_TYPE_VALUE_ARRAY)

For structs, use a #GHashTable that maps strings to #GValue;
soup_value_hash_new() and related methods can help with this.</doc>
      <doc-deprecated xml:space="preserve">Use soup_xmlrpc_build_request() instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-xmlrpc-old.h" line="16"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc-old.c"
             line="150">the text of the methodCall, or %NULL on
error</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="method_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="123">the name of the XML-RPC method</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="124">arguments to @method</doc>
          <array length="2" zero-terminated="0" c:type="GValue*">
            <type name="GObject.Value" c:type="GValue"/>
          </array>
        </parameter>
        <parameter name="n_params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="125">length of @params</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_build_method_response"
              c:identifier="soup_xmlrpc_build_method_response"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc-old.c"
           line="245">This creates a (successful) XML-RPC methodResponse and returns it
as a string. To create a fault response, use
soup_xmlrpc_build_fault().

The glib type to XML-RPC type mapping is as with
soup_xmlrpc_build_method_call(), qv.</doc>
      <doc-deprecated xml:space="preserve">Use soup_xmlrpc_build_response() instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-xmlrpc-old.h" line="53"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc-old.c"
             line="256">the text of the methodResponse, or %NULL
on error</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="247">the return value</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_build_request"
              c:identifier="soup_xmlrpc_build_request"
              version="2.52"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="239">This creates an XML-RPC methodCall and returns it as a string.
This is the low-level method that soup_xmlrpc_message_new() is
built on.

@params is a #GVariant tuple representing the method parameters.

Serialization details:
 - "a{s*}" and "{s*}" are serialized as &amp;lt;struct&amp;gt;
 - "ay" is serialized as &amp;lt;base64&amp;gt;
 - Other arrays and tuples are serialized as &amp;lt;array&amp;gt;
 - booleans are serialized as &amp;lt;boolean&amp;gt;
 - byte, int16, uint16 and int32 are serialized as &amp;lt;int&amp;gt;
 - uint32 and int64 are serialized as the nonstandard &amp;lt;i8&amp;gt; type
 - doubles are serialized as &amp;lt;double&amp;gt;
 - Strings are serialized as &amp;lt;string&amp;gt;
 - Variants (i.e. "v" type) are unwrapped and their child is serialized.
 - #GVariants created by soup_xmlrpc_variant_new_datetime() are serialized as
   &amp;lt;dateTime.iso8601&amp;gt;
 - Other types are not supported and will return %NULL and set @error.
   This notably includes: object-paths, signatures, uint64, handles, maybes
   and dictionaries with non-string keys.

If @params is floating, it is consumed.</doc>
      <source-position filename="../libsoup/soup-xmlrpc.h" line="16"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="269">the text of the methodCall, or %NULL on error.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="method_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="241">the name of the XML-RPC method</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="242">a #GVariant tuple</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_build_response"
              c:identifier="soup_xmlrpc_build_response"
              version="2.52"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="360">This creates a (successful) XML-RPC methodResponse and returns it
as a string. To create a fault response, use soup_xmlrpc_build_fault(). This
is the low-level method that soup_xmlrpc_message_set_response() is built on.

See soup_xmlrpc_build_request() for serialization details, but note
that since a method can only have a single return value, @value
should not be a tuple here (unless the return value is an array).

If @value is floating, it is consumed.</doc>
      <source-position filename="../libsoup/soup-xmlrpc.h" line="44"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="375">the text of the methodResponse, or %NULL on error.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="362">the return value</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_error_quark"
              c:identifier="soup_xmlrpc_error_quark"
              moved-to="XMLRPCError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="xmlrpc_extract_method_call"
              c:identifier="soup_xmlrpc_extract_method_call"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc-old.c"
           line="558">Parses @method_call to get the name and parameters, and puts
the parameters into variables of the appropriate types.

The parameters are handled similarly to
@soup_xmlrpc_build_method_call, with pairs of types and values,
terminated by %G_TYPE_INVALID, except that values are pointers to
variables of the indicated type, rather than values of the type.

See also soup_xmlrpc_parse_method_call(), which can be used if
you don't know the types of the parameters.</doc>
      <doc-deprecated xml:space="preserve">Use soup_xmlrpc_parse_request_full() instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-xmlrpc-old.h" line="47"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc-old.c"
             line="576">success or failure.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="method_call" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="560">the XML-RPC methodCall string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="561">the length of @method_call, or -1 if it is NUL-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="method_name"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="562">on return, the methodName from @method_call</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="563">return types and locations for parameters</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_extract_method_response"
              c:identifier="soup_xmlrpc_extract_method_response"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc-old.c"
           line="686">Parses @method_response and extracts the return value into
a variable of the correct type.

If @method_response is a fault, the return value will be unset,
and @error will be set to an error of type %SOUP_XMLRPC_FAULT, with
the error #code containing the fault code, and the error #message
containing the fault string. (If @method_response cannot be parsed
at all, soup_xmlrpc_extract_method_response() will return %FALSE,
but @error will be unset.)</doc>
      <doc-deprecated xml:space="preserve">Use soup_xmlrpc_parse_response() instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-xmlrpc-old.h" line="32"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc-old.c"
             line="704">%TRUE if a return value was parsed, %FALSE if the
response was of the wrong type, or contained a fault.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="method_response" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="688">the XML-RPC methodResponse string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="689">the length of @method_response, or -1 if it is NUL-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="690">error return value</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="691">the expected type of the return value</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="692">location for return value</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_fault_quark"
              c:identifier="soup_xmlrpc_fault_quark"
              moved-to="XMLRPCFault.quark">
      <source-position filename="../libsoup/soup-xmlrpc.h" line="80"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="xmlrpc_message_new"
              c:identifier="soup_xmlrpc_message_new"
              version="2.52"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="322">Creates an XML-RPC methodCall and returns a #SoupMessage, ready
to send, for that method call.

See soup_xmlrpc_build_request() for serialization details.

If @params is floating, it is consumed.</doc>
      <source-position filename="../libsoup/soup-xmlrpc.h" line="20"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="336">a #SoupMessage encoding the
  indicated XML-RPC request, or %NULL on error.</doc>
        <type name="Message" c:type="SoupMessage*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="324">URI of the XML-RPC service</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="method_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="325">the name of the XML-RPC method to invoke at @uri</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="326">a #GVariant tuple</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_message_set_fault"
              c:identifier="soup_xmlrpc_message_set_fault"
              version="2.52"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="490">Sets the status code and response body of @msg to indicate an
unsuccessful XML-RPC call, with the error described by @fault_code
and @fault_format.</doc>
      <source-position filename="../libsoup/soup-xmlrpc.h" line="55"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="492">an XML-RPC request</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="fault_code" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="493">the fault code</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="fault_format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="494">a printf()-style format string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="495">the parameters to @fault_format</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_message_set_response"
              c:identifier="soup_xmlrpc_message_set_response"
              version="2.52"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="519">Sets the status code and response body of @msg to indicate a
successful XML-RPC call, with a return value given by @value. To set a
fault response, use soup_xmlrpc_message_set_fault().

See soup_xmlrpc_build_request() for serialization details.

If @value is floating, it is consumed.</doc>
      <source-position filename="../libsoup/soup-xmlrpc.h" line="51"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="533">%TRUE on success, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="521">an XML-RPC request</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="522">a #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_parse_method_call"
              c:identifier="soup_xmlrpc_parse_method_call"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc-old.c"
           line="486">Parses @method_call to get the name and parameters, and returns the
parameter values in a #GValueArray; see also
soup_xmlrpc_extract_method_call(), which is more convenient if you
know in advance what the types of the parameters will be.</doc>
      <doc-deprecated xml:space="preserve">Use soup_xmlrpc_parse_request_full() instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-xmlrpc-old.h" line="41"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc-old.c"
             line="498">success or failure.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="method_call" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="488">the XML-RPC methodCall string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="489">the length of @method_call, or -1 if it is NUL-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="method_name"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="490">on return, the methodName from @method_call</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="params"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="491">on return, the parameters from @method_call</doc>
          <type name="GObject.ValueArray" c:type="GValueArray**"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_parse_method_response"
              c:identifier="soup_xmlrpc_parse_method_response"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc-old.c"
           line="601">Parses @method_response and returns the return value in @value. If
@method_response is a fault, @value will be unchanged, and @error
will be set to an error of type %SOUP_XMLRPC_FAULT, with the error
#code containing the fault code, and the error #message containing
the fault string. (If @method_response cannot be parsed at all,
soup_xmlrpc_parse_method_response() will return %FALSE, but @error
will be unset.)</doc>
      <doc-deprecated xml:space="preserve">Use soup_xmlrpc_parse_response() instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-xmlrpc-old.h" line="26"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc-old.c"
             line="616">%TRUE if a return value was parsed, %FALSE if the
response could not be parsed, or contained a fault.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="method_response" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="603">the XML-RPC methodResponse string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="604">the length of @method_response, or -1 if it is NUL-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="605">on return, the return value from @method_call</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_parse_request"
              c:identifier="soup_xmlrpc_parse_request"
              version="2.52"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="1182">Parses @method_call and return the method name. Method parameters can be
parsed later using soup_xmlrpc_params_parse().</doc>
      <source-position filename="../libsoup/soup-xmlrpc.h" line="39"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1192">method's name, or %NULL on error.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="method_call" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="1184">the XML-RPC methodCall string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="1185">the length of @method_call, or -1 if it is NUL-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="params"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="1186">on success, a new #SoupXMLRPCParams</doc>
          <type name="XMLRPCParams" c:type="SoupXMLRPCParams**"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_parse_response"
              c:identifier="soup_xmlrpc_parse_response"
              version="2.52"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="1254">Parses @method_response and returns the return value. If
@method_response is a fault, %NULL is returned, and @error
will be set to an error in the %SOUP_XMLRPC_FAULT domain, with the error
code containing the fault code, and the error message containing
the fault string. If @method_response cannot be parsed, %NULL is returned,
and @error will be set to an error in the %SOUP_XMLRPC_ERROR domain.

See soup_xmlrpc_params_parse() for deserialization details.</doc>
      <source-position filename="../libsoup/soup-xmlrpc.h" line="25"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1270">a new (non-floating) #GVariant, or %NULL</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="method_response" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="1256">the XML-RPC methodResponse string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="1257">the length of @method_response, or -1 if it is NUL-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="signature"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="1258">A valid #GVariant type string, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_request_new"
              c:identifier="soup_xmlrpc_request_new"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc-old.c"
           line="215">Creates an XML-RPC methodCall and returns a #SoupMessage, ready
to send, for that method call.

The parameters are passed as type/value pairs; ie, first a #GType,
and then a value of the appropriate type, finally terminated by
%G_TYPE_INVALID.</doc>
      <doc-deprecated xml:space="preserve">Use soup_xmlrpc_message_new() instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-xmlrpc-old.h" line="21"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc-old.c"
             line="228">a #SoupMessage encoding the
indicated XML-RPC request.</doc>
        <type name="Message" c:type="SoupMessage*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="217">URI of the XML-RPC service</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="method_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="218">the name of the XML-RPC method to invoke at @uri</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="219">parameters for @method</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_set_fault"
              c:identifier="soup_xmlrpc_set_fault"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc-old.c"
           line="326">Sets the status code and response body of @msg to indicate an
unsuccessful XML-RPC call, with the error described by @fault_code
and @fault_format.</doc>
      <doc-deprecated xml:space="preserve">Use soup_xmlrpc_message_set_fault() instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-xmlrpc-old.h" line="61"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="328">an XML-RPC request</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="fault_code" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="329">the fault code</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="fault_format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="330">a printf()-style format string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="331">the parameters to @fault_format</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_set_response"
              c:identifier="soup_xmlrpc_set_response"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc-old.c"
           line="292">Sets the status code and response body of @msg to indicate a
successful XML-RPC call, with a return value given by @type and the
following varargs argument, of the type indicated by @type.</doc>
      <doc-deprecated xml:space="preserve">Use soup_xmlrpc_message_set_response() instead.</doc-deprecated>
      <source-position filename="../libsoup/soup-xmlrpc-old.h" line="56"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="294">an XML-RPC request</doc>
          <type name="Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="295">the type of the response value</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc-old.c"
               line="296">the response value</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_variant_get_datetime"
              c:identifier="soup_xmlrpc_variant_get_datetime"
              version="2.52"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="1386">Get the #SoupDate from special #GVariant created by
soup_xmlrpc_variant_new_datetime() or by parsing a &amp;lt;dateTime.iso8601&amp;gt;
node. See soup_xmlrpc_params_parse().

If @variant does not contain a datetime it will return an error but it is not
considered a programmer error because it generally means parameters received
are not in the expected type.</doc>
      <source-position filename="../libsoup/soup-xmlrpc.h" line="65"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1399">a new #SoupDate, or %NULL on error.</doc>
        <type name="Date" c:type="SoupDate*"/>
      </return-value>
      <parameters>
        <parameter name="variant" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="1388">a #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlrpc_variant_new_datetime"
              c:identifier="soup_xmlrpc_variant_new_datetime"
              version="2.52">
      <doc xml:space="preserve"
           filename="../libsoup/soup-xmlrpc.c"
           line="1356">Construct a special #GVariant used to serialize a &amp;lt;dateTime.iso8601&amp;gt;
node. See soup_xmlrpc_build_request().

The actual type of the returned #GVariant is unspecified and "v" or "*"
should be used in variant format strings. For example:
&lt;informalexample&gt;&lt;programlisting&gt;
args = g_variant_new ("(v)", soup_xmlrpc_variant_new_datetime (date));
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <source-position filename="../libsoup/soup-xmlrpc.h" line="62"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsoup/soup-xmlrpc.c"
             line="1369">a floating #GVariant.</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="date" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsoup/soup-xmlrpc.c"
               line="1358">a #SoupDate</doc>
          <type name="Date" c:type="SoupDate*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
