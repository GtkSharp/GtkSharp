

namespace WebKit {

    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using static GLib.AbiStructExtension;

    #region Autogenerated code

    public partial class JavaScriptValue : GLib.Object {

        public JavaScriptValue(IntPtr raw) : base(raw) { }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate bool d_jsc_value_is_array(IntPtr raw);

        static d_jsc_value_is_array jsc_value_is_array = FuncLoader.LoadFunction<d_jsc_value_is_array>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_is_array"));

        public bool IsArray {
            get {
                bool raw_ret = jsc_value_is_array(Handle);
                bool ret = raw_ret;

                return ret;
            }
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate bool d_jsc_value_is_boolean(IntPtr raw);

        static d_jsc_value_is_boolean jsc_value_is_boolean = FuncLoader.LoadFunction<d_jsc_value_is_boolean>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_is_boolean"));

        public bool IsBoolean {
            get {
                bool raw_ret = jsc_value_is_boolean(Handle);
                bool ret = raw_ret;

                return ret;
            }
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate bool d_jsc_value_is_null(IntPtr raw);

        static d_jsc_value_is_null jsc_value_is_null = FuncLoader.LoadFunction<d_jsc_value_is_null>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_is_null"));

        public bool IsNull {
            get {
                bool raw_ret = jsc_value_is_null(Handle);
                bool ret = raw_ret;

                return ret;
            }
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate bool d_jsc_value_is_number(IntPtr raw);

        static d_jsc_value_is_number jsc_value_is_number = FuncLoader.LoadFunction<d_jsc_value_is_number>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_is_number"));

        public bool IsNumber {
            get {
                bool raw_ret = jsc_value_is_number(Handle);
                bool ret = raw_ret;

                return ret;
            }
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate bool d_jsc_value_is_object(IntPtr raw);

        static d_jsc_value_is_object jsc_value_is_object = FuncLoader.LoadFunction<d_jsc_value_is_object>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_is_object"));

        public bool IsObject {
            get {
                bool raw_ret = jsc_value_is_object(Handle);
                bool ret = raw_ret;

                return ret;
            }
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate bool d_jsc_value_is_string(IntPtr raw);

        static d_jsc_value_is_string jsc_value_is_string = FuncLoader.LoadFunction<d_jsc_value_is_string>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_is_string"));

        public bool IsString {
            get {
                bool raw_ret = jsc_value_is_string(Handle);
                bool ret = raw_ret;

                return ret;
            }
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate bool d_jsc_value_is_undefined(IntPtr raw);

        static d_jsc_value_is_undefined jsc_value_is_undefined = FuncLoader.LoadFunction<d_jsc_value_is_undefined>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_is_undefined"));

        public bool IsUndefined {
            get {
                bool raw_ret = jsc_value_is_undefined(Handle);
                bool ret = raw_ret;

                return ret;
            }
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate bool d_jsc_value_object_delete_property(IntPtr raw, IntPtr name);

        static d_jsc_value_object_delete_property jsc_value_object_delete_property = FuncLoader.LoadFunction<d_jsc_value_object_delete_property>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_object_delete_property"));

        public bool ObjectDeleteProperty(string name) {
            IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup(name);
            bool raw_ret = jsc_value_object_delete_property(Handle, native_name);
            bool ret = raw_ret;
            GLib.Marshaller.Free(native_name);

            return ret;
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate IntPtr d_jsc_value_object_enumerate_properties(IntPtr raw);

        static d_jsc_value_object_enumerate_properties jsc_value_object_enumerate_properties = FuncLoader.LoadFunction<d_jsc_value_object_enumerate_properties>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_object_enumerate_properties"));

        public string[] ObjectEnumerateProperties() {
            IntPtr raw_ret = jsc_value_object_enumerate_properties(Handle);
            string[] ret = GLib.Marshaller.NullTermPtrToStringArray(raw_ret, true);

            return ret;
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate IntPtr d_jsc_value_object_get_property(IntPtr raw, IntPtr name);

        static d_jsc_value_object_get_property jsc_value_object_get_property = FuncLoader.LoadFunction<d_jsc_value_object_get_property>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_object_get_property"));

        public JavaScriptValue ObjectGetProperty(string name) {
            IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup(name);
            IntPtr raw_ret = jsc_value_object_get_property(Handle, native_name);
            JavaScriptValue ret = GLib.Object.GetObject(raw_ret, true) as JavaScriptValue;
            GLib.Marshaller.Free(native_name);

            return ret;
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate bool d_jsc_value_object_has_property(IntPtr raw, IntPtr name);

        static d_jsc_value_object_has_property jsc_value_object_has_property = FuncLoader.LoadFunction<d_jsc_value_object_has_property>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_object_has_property"));

        public bool ObjectHasProperty(string name) {
            IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup(name);
            bool raw_ret = jsc_value_object_has_property(Handle, native_name);
            bool ret = raw_ret;
            GLib.Marshaller.Free(native_name);

            return ret;
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate bool d_jsc_value_to_boolean(IntPtr raw);

        static d_jsc_value_to_boolean jsc_value_to_boolean = FuncLoader.LoadFunction<d_jsc_value_to_boolean>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_to_boolean"));

        public bool ToBoolean() {
            bool raw_ret = jsc_value_to_boolean(Handle);
            bool ret = raw_ret;

            return ret;
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate double d_jsc_value_to_double(IntPtr raw);

        static d_jsc_value_to_double jsc_value_to_double = FuncLoader.LoadFunction<d_jsc_value_to_double>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_to_double"));

        public double ToDouble() {
            double raw_ret = jsc_value_to_double(Handle);
            double ret = raw_ret;

            return ret;
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate int d_jsc_value_to_int32(IntPtr raw);

        static d_jsc_value_to_int32 jsc_value_to_int32 = FuncLoader.LoadFunction<d_jsc_value_to_int32>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_to_int32"));

        public int ToInt32() {
            int raw_ret = jsc_value_to_int32(Handle);
            int ret = raw_ret;

            return ret;
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate IntPtr d_jsc_value_to_json(IntPtr raw, uint indent);

        static d_jsc_value_to_json jsc_value_to_json = FuncLoader.LoadFunction<d_jsc_value_to_json>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_to_json"));

        public string ToJson(uint indent) {
            IntPtr raw_ret = jsc_value_to_json(Handle, indent);
            string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);

            return ret;
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        delegate IntPtr d_jsc_value_to_string(IntPtr raw);

        static d_jsc_value_to_string jsc_value_to_string = FuncLoader.LoadFunction<d_jsc_value_to_string>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "jsc_value_to_string"));

        public override string ToString() {
            IntPtr raw_ret = jsc_value_to_string(Handle);
            string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);

            return ret;
        }

        // Internal representation of the wrapped structure ABI.
        static GLib.AbiStruct _abi_info = null;

        static public new GLib.AbiStruct abi_info {
            get {
                if (_abi_info == null)
                    _abi_info = new GLib.AbiStruct(new List<GLib.AbiField> {
                        new GLib.AbiField("priv"
                            , GLib.Object.abi_info.Fields
                            , (uint)Marshal.SizeOf(typeof(IntPtr)) // priv
                            , null
                            , null
                            , (uint)Marshal.SizeOf(typeof(IntPtr))
                            , 0
                        ),
                    });

                return _abi_info;
            }
        }

        // End of the ABI representation.

        #endregion

        
    }

}